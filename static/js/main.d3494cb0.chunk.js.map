{"version":3,"sources":["Translation.js","App.js","serviceWorker.js","index.js"],"names":["TranslationHelper","IndexHandlers","v","toFixed","Math","floor","stringformat","fmt","args","Array","prototype","slice","call","arguments","replace","match","number","GetTranslationLinesForMod","translationJson","mod","values","consumedIdxs","Set","translationLines","statIdx","has","statObj","statId","translationIdx","add","translation","translationStatIdx","findIndex","x","translationLine","numStatsInTranslation","length","fill","addlStatIdx","addlStat","addlStatId","addlStatTranslationIdx","push","GetTranslationRuleForLine","line","translationRule","conditionsFailed","condition","value","ApplyIndexHandlers","indexHandlers","handler","this","GetStringForTranslationRule","rule","replacementStrings","replacementMin","replacementMax","replacementValue","replacementCombined","GetStringsForTranslationLines","strings","lineIdx","TranslateMod","randRange","rng","minInclusive","maxInclusive","quick","TipLine","props","className","PropertyLine","ItemNameLine","topLine","key","bottomLine","CraftedItem","getItemTypeName","base_items","itemState","baseItemId","getTipLine","modInstance","context","mods","id","toUpperCase","tier","getStatLines","stat_translations","map","i","getImplicitLine","getImplicitLines","implicits","getAffixLine","getAffixLines","affixes","generatedName","React","Component","CanBaseItemHaveRarity","rarity","GetSpawnWeightForMod","modId","tags","spawnWeight","includes","GetPrefixCount","existingAffixCount","GetSuffixCount","GetAffixCount","GetPrefixLimitForRarity","baseItem","GetSuffixLimitForRarity","GetAffixLimitForRarity","GetAffixLimit","CanModBeAddedToItem","level","GetPrefixLimit","GetSuffixLimit","modGroup","affix","GetValidModsForItemWithPositiveWeightTag","tag","GetItemTags","validMods","find","GetInfluenceTag","influence","baseItemClass","console","log","item_classes","influenceTagId","influenceTag","GetAddedTags","concat","influences","implicit","GetBaseItemTags","RollModValues","statRolls","stat","CreateRolledMod","RollRareAffixCount","maxAffixCount","randInt","cloneMods","modArray","newArray","oldModIdx","cloneItemState","corruptions","AddRandomModFromList","newItemState","modPool","randRoll","totalWeight","weightAccum","modEndWeight","weight","PickModFromWeightedModPool","modIds","modWeight","CreateWeightedModPool","AddRandomMod","GetValidModsForItem","CanAddInfluenceToItem","AddInfluenceToItem","newState","CanScourItem","corrupted","ScourItem","CanTransmutationItem","TransmutationItem","numMods","CanAlterationItem","AlterationItem","CanAugmentationItem","AugmentationItem","result","CanRegalItem","RegalItem","CanAlchemyItem","AlchemyItem","CanChaosItem","ChaosItem","CanExaltedItem","ExaltedItem","CanExaltedWithInfluenceItem","ExaltedWithInfluenceItem","CanAnnulmentItem","AnnulmentItem","affixIdxToRemove","splice","CanBlessedItem","BlessedItem","CanDivineItem","DivineItem","CraftingButton","onClick","disabled","enabled","label","TheoryCrafter","history","historyIdx","testMap","actionMap","seedrandom","normalItemState","quality","implicitId","CreateItem","state","initState","transmuteResult","insertAndCutState","initItemState","itemStateHistory","itemStateHistoryIdx","setState","newStateHistory","actionName","getState","performAction","canPerformAction","RenderCraftingButton","undoState","canUndoState","redoState","canRedoState","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3494cb0.chunk.js","sourcesContent":["export default class TranslationHelper {\r\n    static IndexHandlers = {\r\n        \"30%_of_value\": v => { return v * 0.3 },\r\n        \"60%_of_value\": v => { return v * 0.6 },\r\n        \"deciseconds_to_seconds\": v => { return v / 10 },\r\n        \"divide_by_one_hundred\": v => { return v / 100 },\r\n        \"divide_by_one_hundred_and_negate\": v => { return -v / 100 },\r\n        \"divide_by_one_hundred_2dp\": v => { return (v / 100).toFixed(2) },\r\n        \"milliseconds_to_seconds\": v => { return v / 1000 },\r\n        \"milliseconds_to_seconds_0dp\": v => { return (v / 1000).toFixed(0) },\r\n        \"milliseconds_to_seconds_1dp\": v => { return (v / 1000).toFixed(1) },\r\n        \"milliseconds_to_seconds_2dp\": v => { return (v / 1000).toFixed(2) },\r\n        \"milliseconds_to_seconds_2dp_if_required\": v => { return (v / 1000).toFixed(2) },\r\n        \"multiplicative_damage_modifier\": v => { return v + 100 },\r\n        \"multiplicative_permyriad_damage_modifier\": v => { return v / 100 + 100 },\r\n        \"negate\": v => { return -v },\r\n        \"old_leech_percent\": v => { return v / 5 },\r\n        \"old_leech_permyriad\": v => { return v / 500 },\r\n        \"per_minute_to_per_second\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_0dp\": v => { return (v / 60).toFixed(0) },\r\n        \"per_minute_to_per_second_1dp\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_2dp\": v => { return (v / 60).toFixed(2) },\r\n        \"per_minute_to_per_second_2dp_if_required\": v => { return (v / 60).toFixed(2) },\r\n        \"divide_by_two_0dp\": v => { return Math.floor(v / 2) },\r\n        \"divide_by_six\": v => { return v / 6 },\r\n        \"divide_by_ten_0dp\": v => { return Math.floor(v / 10) },\r\n        \"divide_by_twelve\": v => { return v / 12 },\r\n        \"divide_by_fifteen_0dp\": v => { return Math.floor(v / 15) },\r\n        \"divide_by_twenty_then_double_0dp\": v => { return Math.floor(v / 20) * 2 },\r\n        \"times_twenty\": v => { return v * 20 }\r\n    };\r\n\r\n    static stringformat = function(fmt) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        return fmt.replace(/{(\\d+)}/g, (match, number) => {\r\n            return args[0][number];\r\n        });\r\n    }\r\n\r\n    static GetTranslationLinesForMod = function(translationJson, mod, values = null) {\r\n        let consumedIdxs = new Set();\r\n        let translationLines = [];\r\n        for (let statIdx in mod[\"stats\"]) {\r\n            if (consumedIdxs.has(statIdx)) {\r\n                continue;\r\n            }\r\n            const statObj = mod[\"stats\"][statIdx];\r\n            const statId = statObj[\"id\"];\r\n            consumedIdxs.add(statIdx);\r\n\r\n            for (const translationIdx in translationJson) {\r\n                const translation = translationJson[translationIdx];\r\n                const translationStatIdx = translation[\"ids\"].findIndex((x => x === statId));\r\n                if (translationStatIdx >= 0) {\r\n                    let translationLine = {};\r\n                    translationLine[\"tidx\"] = translationIdx;\r\n                    const numStatsInTranslation = translation[\"ids\"].length;\r\n                    translationLine[\"mins\"] = Array(numStatsInTranslation).fill(0);\r\n                    translationLine[\"maxs\"] = Array(numStatsInTranslation).fill(0);\r\n                    if (values)\r\n                        translationLine[\"values\"] = Array(numStatsInTranslation).fill(0);\r\n\r\n                    translationLine[\"mins\"][translationStatIdx] = statObj[\"min\"];\r\n                    translationLine[\"maxs\"][translationStatIdx] = statObj[\"max\"];\r\n                    if (values)                    \r\n                        translationLine[\"values\"][translationStatIdx] = values[statIdx];\r\n\r\n                    for (let addlStatIdx in mod[\"stats\"]) {\r\n                        const addlStat = mod[\"stats\"][addlStatIdx];\r\n                        const addlStatId = addlStat[\"id\"];\r\n                        if (consumedIdxs.has(addlStatIdx)) {\r\n                            continue;\r\n                        }\r\n                        const addlStatTranslationIdx = translation[\"ids\"].findIndex((x => x === addlStatId));\r\n                        if (addlStatTranslationIdx > 0) {\r\n                            translationLine[\"mins\"][addlStatTranslationIdx] = addlStat[\"min\"];\r\n                            translationLine[\"maxs\"][addlStatTranslationIdx] = addlStat[\"max\"];\r\n                            if (values)                            \r\n                                translationLine[\"values\"][addlStatTranslationIdx] = values[addlStatIdx];\r\n\r\n                            consumedIdxs.add(addlStatIdx);\r\n                        }\r\n                    }\r\n                    translationLines.push(translationLine);\r\n                }\r\n            }\r\n        }\r\n        return translationLines;\r\n    }\r\n\r\n    static GetTranslationRuleForLine = function(translationJson, line) {\r\n        const translation = translationJson[line[\"tidx\"]][\"English\"];\r\n        for (const translationRule of translation) {\r\n            let conditionsFailed = false;\r\n            for (const statIdx in line[\"mins\"]) {\r\n                let condition = translationRule[\"condition\"][statIdx];\r\n                const value = line[\"mins\"][statIdx];\r\n                if (\"min\" in condition) {\r\n                    if (value < condition[\"min\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (\"max\" in condition) {\r\n                    if (value > condition[\"max\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!conditionsFailed) {\r\n                return translationRule;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static ApplyIndexHandlers = function(indexHandlers, value) {\r\n        for (const handler of indexHandlers) {\r\n            value = this.IndexHandlers[handler](value)\r\n        }\r\n        return value;\r\n    }\r\n\r\n    static GetStringForTranslationRule = function(translationJson, rule, line) {\r\n        const translation = translationJson[line[\"tidx\"]];\r\n        let replacementStrings = Array(translation[\"ids\"].length);\r\n        for (const statIdx in translation[\"ids\"]) {\r\n            const replacementMin = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"mins\"][statIdx]);\r\n            const replacementMax = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"maxs\"][statIdx]);\r\n            let replacementValue = null;\r\n            if (\"values\" in line) {\r\n                replacementValue = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"values\"][statIdx]);\r\n            }\r\n\r\n            let replacementCombined = \"\";\r\n            if (replacementMin === replacementMax) {\r\n                replacementCombined = replacementMin;\r\n            }\r\n            else {\r\n                replacementCombined = \"(\" + replacementMin + \"-\" + replacementMax + \")\";\r\n                if (replacementValue) {\r\n                    replacementCombined = replacementValue + replacementCombined;\r\n                }\r\n            }\r\n            replacementStrings[statIdx] = rule[\"format\"][statIdx].replace(\"#\", replacementCombined);\r\n        }\r\n        return this.stringformat(rule[\"string\"], replacementStrings);\r\n    }\r\n\r\n    static GetStringsForTranslationLines = function(translationJson, translationLines) {\r\n        let strings = Array(translationLines.length).fill(\"\");\r\n        for (const lineIdx in translationLines) {\r\n            const translationRule = this.GetTranslationRuleForLine(translationJson, translationLines[lineIdx]);\r\n            if (translationRule) {\r\n                strings[lineIdx] = this.GetStringForTranslationRule(translationJson, translationRule, translationLines[lineIdx]);\r\n            }\r\n        }\r\n        return strings;\r\n    }\r\n\r\n    static TranslateMod = function(translationJson, mod, values = null) {\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, values);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines);\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport TranslationHelper from './Translation.js';\r\nimport seedrandom from 'seedrandom';\r\n\r\nimport base_items from './data/base_items.json';\r\nimport item_classes from './data/item_classes.json';\r\nimport mods from './data/mods.json';\r\nimport stat_translations from './data/stat_translations.json';\r\n\r\nfunction randRange(rng, minInclusive, maxInclusive) {\r\n  return Math.floor(rng.quick() * (maxInclusive - minInclusive + 1)) + minInclusive;\r\n}\r\n\r\nfunction TipLine (props) {\r\n  return <div className=\"tipLine\">{props.line}</div>\r\n}\r\n\r\nfunction PropertyLine (props) {\r\n  return <div className=\"modLine\">{props.line}</div>\r\n}\r\n\r\nfunction ItemNameLine (props) {\r\n  return [props.topLine && <div className=\"itemName\" key=\"itemName_top\">{props.topLine}</div>, props.bottomLine && <div className=\"itemName\" key=\"itemName_bottom\">{props.bottomLine}</div>];\r\n}\r\n\r\nclass CraftedItem extends React.Component {\r\n  getItemTypeName = function() {\r\n    return base_items[this.props.itemState.baseItemId][\"name\"];\r\n  }\r\n\r\n  getTipLine = function(modInstance, context) {\r\n    const mod = mods[modInstance.id];\r\n    let line = \"\";\r\n    if (context === \"prefix\" || context === \"suffix\") {\r\n      line = context[0].toUpperCase() + context.slice(1) + \" Modifier \\\"\" + mod[\"name\"] + \"\\\"\" + (modInstance.tier > 0 ? (\" (Tier: \" + modInstance.tier + \")\") : \"\");\r\n    }\r\n    else if (context === \"unique\" || context === \"implicit\") {\r\n      line = context[0].toUpperCase() + context.slice(1) + \" Modifier\";\r\n    }\r\n    return <TipLine line={line} key={modInstance.id + \"_tip\"}/>;\r\n  }\r\n\r\n  getStatLines = function(modInstance) {\r\n    const mod = mods[modInstance.id];\r\n    const values = modInstance.values;\r\n    const translationStrings = TranslationHelper.TranslateMod(stat_translations, mod, values);    \r\n    return translationStrings.map((x, i) => <PropertyLine line={x} key={modInstance.id + \"_mod_\" + i}/>);\r\n  }\r\n\r\n  getImplicitLine = function(modInstance) {\r\n    return [this.getTipLine(modInstance, \"implicit\"), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getImplicitLines = function() {\r\n    return this.props.itemState.implicits.map(x => this.getImplicitLine(x));\r\n  }\r\n\r\n  getAffixLine = function(modInstance) {\r\n    return [this.getTipLine(modInstance, mods[modInstance.id][\"generation_type\"]), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getAffixLines = function() {\r\n    return this.props.itemState.affixes.map(x => this.getAffixLine(x));\r\n  }\r\n\r\n  render() {\r\n    return [\r\n      <ItemNameLine topLine={this.props.itemState.generatedName} bottomLine={this.getItemTypeName()} key=\"nameLine\"/>, \r\n      <div className=\"separator\" key=\"sep1\">---</div>, \r\n      this.getImplicitLines(),\r\n      <div className=\"separator\" key=\"sep2\">---</div>,\r\n      this.getAffixLines()]\r\n  }\r\n}\r\n\r\nfunction CanBaseItemHaveRarity(baseItemId, rarity) {\r\n  const baseItem = base_items[baseItemId];\r\n  if (baseItem[\"domain\"] === \"flask\") {\r\n    return rarity !== \"rare\";\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetSpawnWeightForMod(modId, tags) {\r\n  const mod = mods[modId];\r\n  for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n    if (tags.includes(spawnWeight[\"tag\"])) {\r\n      return spawnWeight[\"weight\"];\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetPrefixCount(itemState) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"prefix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetSuffixCount(itemState) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"suffix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetAffixCount(itemState) {\r\n  return GetPrefixCount(itemState) + GetSuffixCount(itemState);\r\n}\r\n\r\nfunction GetPrefixLimitForRarity(baseItemId, rarity) {\r\n  if (rarity === \"normal\") {\r\n    return 0;\r\n  }\r\n  if (rarity === \"magic\") {\r\n    return 1;\r\n  }\r\n  if (rarity === \"rare\" || rarity === \"unique\") {\r\n    const baseItem = base_items[baseItemId];\r\n    if (baseItem[\"domain\"] === \"misc\" || baseItem[\"domain\"] === \"abyss_jewel\") {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetSuffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetAffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity) + GetSuffixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetPrefixLimit(itemState) {\r\n  return GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetSuffixLimit(itemState) {\r\n  return GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetAffixLimit(itemState) {\r\n  return GetAffixLimitForRarity(itemState.baseItemId, itemState.rarity); \r\n}\r\n\r\nfunction CanModBeAddedToItem(modId, itemState) {\r\n  const mod = mods[modId];\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  if (mod[\"domain\"] !== baseItem[\"domain\"]) {\r\n    return false;\r\n  }\r\n  if (mod[\"required_level\"] > itemState.level) {\r\n    return false;\r\n  }\r\n  if (mod[\"generation_type\"] === \"prefix\") {\r\n    if (GetPrefixLimit(itemState) <= GetPrefixCount(itemState)) {\r\n      return false;\r\n    }\r\n  }\r\n  else if (mod[\"generation_type\"] === \"suffix\") {\r\n    if (GetSuffixLimit(itemState) <= GetSuffixCount(itemState)) {\r\n      return false;\r\n    }\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n  const modGroup = mod[\"group\"];\r\n  if (modGroup && modGroup !== \"\") {\r\n    for (const affix of itemState.affixes) {\r\n      const existingMod = mods[affix.id];\r\n      if (existingMod[\"group\"] === modGroup) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetValidModsForItem(itemState) {\r\n  const tags = GetItemTags(itemState);\r\n  let validMods = [];\r\n  for (const modId in mods) {\r\n    if (!CanModBeAddedToItem(modId, itemState)) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(modId, tags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push(modId);\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction GetValidModsForItemWithPositiveWeightTag(itemState, tag) {\r\n  const tags = GetItemTags(itemState);\r\n  let validMods = [];\r\n  for (const modId in mods) {\r\n    const mod = mods[modId];\r\n    if (!(mod[\"spawn_weights\"].find(x => x[\"tag\"] == tag && x[\"weight\"] > 0))) {\r\n      continue;\r\n    }\r\n\r\n    if (!CanModBeAddedToItem(modId, itemState)) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(modId, tags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push(modId);\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction CreateWeightedModPool(modIds, tags) {\r\n  let modPool = {\r\n    totalWeight : 0,\r\n    mods : []\r\n  }\r\n\r\n  for (const modId of modIds) {\r\n    let modWeight = GetSpawnWeightForMod(modId, tags);\r\n    modPool.mods.push({\r\n      id : modId,\r\n      weight : modWeight\r\n    });\r\n    modPool.totalWeight += modWeight;\r\n  }\r\n\r\n  return modPool;\r\n}\r\n\r\nfunction PickModFromWeightedModPool(modPool, rng) {\r\n  const randRoll = randRange(rng, 0, modPool.totalWeight - 1);\r\n  let weightAccum = 0;\r\n\r\n  for (const mod of modPool.mods) {\r\n    const modEndWeight = weightAccum + mod.weight;\r\n    if (randRoll < modEndWeight) {\r\n      return mod.id;\r\n    }\r\n    weightAccum = modEndWeight;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction GetInfluenceTag(baseItemId, influence) {\r\n  const baseItem = base_items[baseItemId];\r\n  const baseItemClass = baseItem[\"item_class\"];\r\n  console.log(item_classes);\r\n  if (baseItemClass in item_classes) {\r\n    const influenceTagId = influence + \"_tag\";\r\n    if (influenceTagId in item_classes[baseItemClass]) {\r\n      const influenceTag = item_classes[baseItemClass][influenceTagId];\r\n      if (influenceTag) {\r\n        return influenceTag;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetAddedTags(modId) {\r\n  return mods[modId][\"adds_tags\"];\r\n}\r\n\r\nfunction GetBaseItemTags (itemState) {\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  let tags = [];\r\n  tags = tags.concat(baseItem[\"tags\"]);\r\n  for (const influence of itemState.influences) {\r\n    const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n    if (influenceTag) {\r\n      tags.push(influenceTag);\r\n    }\r\n  }\r\n  for (const implicit of itemState.implicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction GetItemTags(itemState) {\r\n  let tags = GetBaseItemTags(itemState);\r\n  for (const affix of itemState.affixes) {\r\n    tags = tags.concat(GetAddedTags(affix.id));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction RollModValues(modId, rng) {\r\n  let statRolls = [];\r\n  const mod = mods[modId];\r\n  for (const stat of mod[\"stats\"]) {\r\n    statRolls.push(randRange(rng, stat[\"min\"], stat[\"max\"]));\r\n  }\r\n  return statRolls;\r\n}\r\n\r\nfunction CreateRolledMod(modId, rng) {\r\n  return {\r\n    id : modId,\r\n    values : RollModValues(modId, rng),\r\n    tier : 0\r\n  }  \r\n}\r\n\r\nfunction RollRareAffixCount(baseItemId, rng) {\r\n  const maxAffixCount = GetAffixLimitForRarity(baseItemId, \"rare\");\r\n  if (maxAffixCount === 6) {\r\n    // Number of mods from data mined note (source: POE Discord, #3rd-party-tool-dev)\r\n    // \"1/12 chance for 6 mods, 4/12 chance for 5 mods, and 7/12 chance for 6 mods\"\r\n    const randInt = randRange(rng, 0, 11);\r\n    if (randInt < 7) {\r\n      return 4;\r\n    }\r\n    if (randInt < 11) {\r\n      return 5;\r\n    }\r\n    return 6;\r\n  }\r\n  else if (maxAffixCount === 4) {\r\n    // Number of mods from data mined note (source: reddit, https://www.reddit.com/r/pathofexile/comments/8fxnlu/chance_of_getting_specific_number_of_mods_via/)\r\n    // \"for jewels: 65/35\"\r\n    const randInt = randRange(rng, 0, 99);\r\n    if (randInt < 65) {\r\n      return 3;\r\n    }\r\n    return 4;\r\n  }\r\n  else if (maxAffixCount > 0) {\r\n    // Unexpected situation, roll pure random\r\n    return randRange(rng, 1, maxAffixCount);\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction cloneMods(modArray) {\r\n  let newArray = Array(modArray.length);\r\n  for (const oldModIdx in modArray) {\r\n    newArray[oldModIdx] = { ...modArray[oldModIdx], values : [ ...modArray[oldModIdx].values ]};\r\n  }\r\n  return newArray;\r\n}\r\n\r\nfunction cloneItemState(itemState) {\r\n  return { \r\n    ...itemState, \r\n    influences : itemState.influences.slice(),\r\n    implicits : cloneMods(itemState.implicits), \r\n    corruptions : cloneMods(itemState.corruptions), \r\n    affixes : cloneMods(itemState.affixes) \r\n  };\r\n}\r\n\r\nfunction CreateItem(baseItemId, level, rng) {\r\n  let itemState = {\r\n    generatedName : \"\",\r\n    baseItemId : baseItemId,\r\n    level : level,\r\n    rarity : \"normal\",\r\n    corrupted : false,\r\n    quality : 0,\r\n    influences : [],\r\n    implicits : [],\r\n    corruptions : [],\r\n    affixes : []\r\n  }  \r\n\r\n  // Add and roll implicits\r\n  const baseItem = base_items[baseItemId];\r\n  for (const implicitId of baseItem[\"implicits\"]) {\r\n    itemState.implicits.push(CreateRolledMod(implicitId, rng));\r\n  }\r\n\r\n  return itemState;\r\n}\r\n\r\nfunction AddRandomModFromList(itemState, mods, rng) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const itemTags = GetItemTags(newItemState);\r\n  const weightedModPool = CreateWeightedModPool(mods, itemTags);\r\n  const modId = PickModFromWeightedModPool(weightedModPool, rng);\r\n  if (!modId) {\r\n    return [false, itemState];\r\n  }\r\n  newItemState.affixes.push(CreateRolledMod(modId, rng));\r\n  return [true, newItemState];  \r\n}\r\n\r\nfunction AddRandomMod(itemState, rng) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const validMods = GetValidModsForItem(newItemState);\r\n  return AddRandomModFromList(itemState, validMods, rng);\r\n}\r\n\r\nfunction CanAddInfluenceToItem(itemState, influence) {\r\n  return GetInfluenceTag(itemState.baseItemId, influence) != null;\r\n}\r\n\r\nfunction AddInfluenceToItem(itemState, influence) {\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newState = cloneItemState(itemState);\r\n  newState.influences.push(influence);\r\n  return [true, newState];\r\n}\r\n\r\nfunction CanScourItem(itemState) {\r\n  if (itemState.rarity === \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ScourItem(itemState, rng) {\r\n  if (!CanScourItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, { ...cloneItemState(itemState), rarity : \"normal\", affixes : [] }];\r\n}\r\n\r\nfunction CanTransmutationItem(itemState) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"magic\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction TransmutationItem(itemState, rng) {\r\n  if (!CanTransmutationItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...itemState, rarity : \"magic\" };\r\n  const numMods = randRange(rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAlterationItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlterationItem(itemState, rng) {\r\n  if (!CanAlterationItem(itemState)) {\r\n    return [0, itemState];\r\n  }\r\n\r\n  let newItemState = { ...itemState, affixes : [] };\r\n  const numMods = randRange(rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAugmentationItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AugmentationItem(itemState, rng) {\r\n  if (!CanAugmentationItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanRegalItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction RegalItem(itemState, rng) {\r\n  if (!CanRegalItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let rareItemState = { ...itemState, rarity : \"rare\" };\r\n  const [result, newItemState] = AddRandomMod(rareItemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAlchemyItem(itemState) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlchemyItem(itemState, rng) {\r\n  if (!CanAlchemyItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...itemState, rarity : \"rare\" };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanChaosItem(itemState) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ChaosItem(itemState, rng) {\r\n  if (!CanChaosItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...itemState, affixes : [] };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedItem(itemState) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction ExaltedItem(itemState, rng) {\r\n  if (!CanExaltedItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedWithInfluenceItem(itemState, influence) {\r\n  if (itemState.influences.length > 0) {\r\n    return false;\r\n  }\r\n  if (!CanExaltedItem(itemState)) {\r\n    return false;\r\n  }\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsForItemWithPositiveWeightTag(newItemState, influenceTag);\r\n  if (validMods.length == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ExaltedWithInfluenceItem(itemState, rng, influence) {\r\n  if (!CanExaltedWithInfluenceItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsForItemWithPositiveWeightTag(newItemState, influenceTag);\r\n  return AddRandomModFromList(newItemState, validMods, rng);\r\n}\r\n\r\nfunction CanAnnulmentItem(itemState) {\r\n  if (itemState.rarity == \"normal\" || itemState.rarity == \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AnnulmentItem(itemState, rng) {\r\n  if (!CanAnnulmentItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  const numAffixes = GetAffixCount(newItemState);\r\n  const affixIdxToRemove = randRange(rng, 0, numAffixes - 1);\r\n  newItemState.affixes.splice(affixIdxToRemove, 1);\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanBlessedItem(itemState) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.implicits.length == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction BlessedItem(itemState, rng) {\r\n  if (!CanBlessedItem(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let implicit of newItemState.implicits) {\r\n    implicit.values = RollModValues(implicit.id, rng);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanDivineItem(itemState) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.affixes.length == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction DivineItem(itemState, rng) {\r\n  if (!CanDivineItem(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let affix of newItemState.affixes) {\r\n    affix.values = RollModValues(affix.id, rng);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CraftingButton(props) {\r\n  return <button className=\"button\" onClick={props.onClick} disabled={!props.enabled}>{props.label}</button>;\r\n}\r\n\r\nclass TheoryCrafter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.history = [];\r\n    this.historyIdx = 0;\r\n\r\n    this.testMap = {\r\n      \"scour\" : CanScourItem,\r\n      \"transmute\" : CanTransmutationItem,\r\n      \"alt\" : CanAlterationItem,\r\n      \"aug\" : CanAugmentationItem,\r\n      \"regal\" : CanRegalItem,\r\n      \"alch\" : CanAlchemyItem,\r\n      \"chaos\" : CanChaosItem,\r\n      \"exalt\" : CanExaltedItem,\r\n      \"exalt_crusader\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"warlord\"),\r\n      \"annul\" : CanAnnulmentItem,\r\n      \"bless\" : CanBlessedItem,\r\n      \"divine\" : CanDivineItem,\r\n    }\r\n\r\n    this.actionMap = {\r\n      \"scour\" : ScourItem,\r\n      \"transmute\" : TransmutationItem,\r\n      \"alt\" : AlterationItem,\r\n      \"aug\" : AugmentationItem,\r\n      \"regal\" : RegalItem,\r\n      \"alch\" : AlchemyItem,\r\n      \"chaos\" : ChaosItem,\r\n      \"exalt\" : ExaltedItem,\r\n      \"exalt_crusader\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"warlord\"),\r\n      \"annul\" : AnnulmentItem,\r\n      \"bless\" : BlessedItem,\r\n      \"divine\" : DivineItem,\r\n    }\r\n\r\n    this.rng = seedrandom();\r\n    const normalItemState = CreateItem(\"Metadata/Items/Armours/Boots/BootsAtlas1\", 100, this.rng);\r\n    this.state = this.initState(normalItemState);\r\n    const transmuteResult = TransmutationItem(normalItemState, this.rng);\r\n    this.state = this.insertAndCutState(transmuteResult[1]);\r\n  }\r\n\r\n  initState(initItemState) {\r\n    return {\r\n      itemStateHistory : [ initItemState ],\r\n      itemStateHistoryIdx : 0\r\n    };\r\n  }\r\n\r\n  pushState(newState) {\r\n    return { ...this.state, itemStateHistory : [ ...this.state.itemStateHistory, newState ] };\r\n  }\r\n\r\n  getState() {\r\n    return this.state.itemStateHistory[this.state.itemStateHistoryIdx];\r\n  }\r\n\r\n  canUndoState() {\r\n    return this.state.itemStateHistoryIdx > 0;\r\n  }\r\n\r\n  canRedoState() {\r\n    return this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1;\r\n  }\r\n\r\n  undoState() {\r\n    if (this.state.itemStateHistoryIdx > 0)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx - 1 });\r\n    }\r\n  }\r\n\r\n  redoState() {\r\n    if (this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx + 1 });\r\n    }    \r\n  }\r\n\r\n  insertAndCutState(newState) {\r\n    const newStateHistory = this.state.itemStateHistory.slice(0, this.state.itemStateHistoryIdx + 1);\r\n    newStateHistory.push(newState);\r\n    return { ...this.state, itemStateHistory : newStateHistory, itemStateHistoryIdx : this.state.itemStateHistoryIdx + 1 };\r\n  }\r\n\r\n  canPerformAction(actionName) {\r\n    return this.testMap[actionName](this.getState());\r\n  }\r\n\r\n  performAction(actionName) {\r\n    const result = this.actionMap[actionName](this.getState(), this.rng);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutState(result[1], this.state.itemStateHistoryIdx));\r\n    }\r\n  }\r\n\r\n  RenderCraftingButton(actionName, label) {\r\n    return <CraftingButton onClick={ () => this.performAction(actionName) } enabled={ this.canPerformAction(actionName) } label={label} key={actionName} />\r\n  }\r\n\r\n  render() {\r\n    return [\r\n//      <CraftingButton onClick={ () => this.setState(this.state) } enabled=\"true\" label=\"Debug Refresh\" key=\"Refresh\" />,\r\n        this.RenderCraftingButton(\"scour\", \"Scour\"),\r\n        this.RenderCraftingButton(\"transmute\", \"Transmutation\"),\r\n        this.RenderCraftingButton(\"aug\", \"Augmentation\"),\r\n        this.RenderCraftingButton(\"alt\", \"Alteration\"),\r\n        this.RenderCraftingButton(\"regal\", \"Regal\"),\r\n        this.RenderCraftingButton(\"alch\", \"Alchemy\"),\r\n        this.RenderCraftingButton(\"chaos\", \"Chaos\"),\r\n        this.RenderCraftingButton(\"exalt\", \"Exalted\"),\r\n        this.RenderCraftingButton(\"exalt_crusader\", \"Crusader Exalt\"),\r\n        this.RenderCraftingButton(\"exalt_hunter\", \"Hunter Exalt\"),\r\n        this.RenderCraftingButton(\"exalt_redeemer\", \"Redeemer Exalt\"),\r\n        this.RenderCraftingButton(\"exalt_warlord\", \"Warlord Exalt\"),\r\n        this.RenderCraftingButton(\"annul\", \"Annulment\"),\r\n        this.RenderCraftingButton(\"bless\", \"Blessed\"),\r\n        this.RenderCraftingButton(\"divine\", \"Divine\"),\r\n        <div><CraftingButton onClick={ () => this.undoState() } enabled={ this.canUndoState() } label=\"Undo\" key=\"undo\" /><CraftingButton onClick={ () => this.redoState() } enabled={ this.canRedoState() } label=\"Redo\" key=\"redo\" /></div>,\r\n        <CraftedItem itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx] } key=\"craftedItem\" />\r\n    ]\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <TheoryCrafter />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}