{"version":3,"sources":["Translation.js","RareItemnames.js","App.js","serviceWorker.js","index.js"],"names":["TranslationHelper","IndexHandlers","v","toFixed","Math","floor","stringformat","fmt","args","Array","prototype","slice","call","arguments","replace","match","number","GetTranslationLinesForMod","translationJson","mod","values","consumedIdxs","Set","translationLines","statIdx","has","statObj","statId","translationIdx","add","translation","translationStatIdx","findIndex","x","translationLine","numStatsInTranslation","length","fill","addlStatIdx","addlStat","addlStatId","addlStatTranslationIdx","push","GetTranslationRuleForLine","line","translationRule","conditionsFailed","condition","value","ApplyIndexHandlers","indexHandlers","handler","this","GetStringForTranslationRule","rule","replacementStrings","replacementMin","replacementMax","replacementValue","replacementCombined","GetStringsForTranslationLines","strings","lineIdx","TranslateMod","RarePrefixes","RareSuffixes","GenerateRareName","itemData","rng","prefixIdx","suffixPool","includes","randRange","minInclusive","maxInclusive","quick","TipLine","props","className","PropertyLine","ItemNameLine","topLine","key","bottomLine","CraftedItem","base_items","itemState","baseItemId","modInstance","context","mods","id","toUpperCase","tierCount","tier","stat_translations","map","i","getTipLine","getStatLines","implicits","getImplicitLine","affixes","getAffixLine","generatedName","getItemTypeName","getImplicitLines","getAffixLines","React","Component","CanBaseItemHaveRarity","rarity","GetSpawnWeightForMod","modId","tags","spawnWeight","GetPrefixCount","existingAffixCount","GetSuffixCount","GetAffixCount","GetPrefixLimitForRarity","baseItem","GetSuffixLimitForRarity","GetAffixLimitForRarity","GetAffixLimit","CanModBeAddedToItem","level","GetPrefixLimit","GetSuffixLimit","modGroup","affix","GetValidModsForItemWithPositiveWeightTag","tag","GetItemTags","validMods","find","GetInfluenceTag","influence","baseItemClass","console","log","item_classes","influenceTagId","influenceTag","GetAddedTags","GetBaseItemTags","concat","influences","implicit","RollModValues","statRolls","stat","CreateRolledMod","tierValues","modTier","modCount","modLevel","baseItemTags","otherModId","otherMod","GetTierForMod","RollRareName","RareItemNames","RollRareAffixCount","maxAffixCount","randInt","cloneMods","modArray","newArray","oldModIdx","cloneItemState","corruptions","AddRandomModFromList","newItemState","modPool","randRoll","totalWeight","weightAccum","modEndWeight","weight","PickModFromWeightedModPool","modIds","modWeight","CreateWeightedModPool","AddRandomMod","GetValidModsForItem","CanAddInfluenceToItem","AddInfluenceToItem","newState","CanScourItem","corrupted","ScourItem","CanTransmutationItem","TransmutationItem","numMods","CanAlterationItem","AlterationItem","CanAugmentationItem","AugmentationItem","result","CanRegalItem","RegalItem","CanAlchemyItem","AlchemyItem","CanChaosItem","ChaosItem","CanExaltedItem","ExaltedItem","CanExaltedWithInfluenceItem","ExaltedWithInfluenceItem","CanAnnulmentItem","AnnulmentItem","affixIdxToRemove","splice","CanBlessedItem","BlessedItem","CanDivineItem","DivineItem","CraftingButton","onClick","disabled","enabled","label","TheoryCrafter","testMap","actionMap","seedrandom","normalItemState","quality","implicitId","CreateItem","state","initState","initItemState","itemStateHistory","action","itemStateHistoryIdx","lastCommand","actionName","canUndoState","setState","canRerollAction","previousItemState","insertAndCutStateAt","canRedoState","index","newStateHistory","getState","insertAndCutState","performAction","canPerformAction","RenderCraftingButton","undoState","getUndoLabel","redoState","getRedoLabel","rerollAction","getRerollLabel","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3be90b41.chunk.js","sourcesContent":["export default class TranslationHelper {\r\n    static IndexHandlers = {\r\n        \"30%_of_value\": v => { return v * 0.3 },\r\n        \"60%_of_value\": v => { return v * 0.6 },\r\n        \"deciseconds_to_seconds\": v => { return v / 10 },\r\n        \"divide_by_one_hundred\": v => { return v / 100 },\r\n        \"divide_by_one_hundred_and_negate\": v => { return -v / 100 },\r\n        \"divide_by_one_hundred_2dp\": v => { return (v / 100).toFixed(2) },\r\n        \"milliseconds_to_seconds\": v => { return v / 1000 },\r\n        \"milliseconds_to_seconds_0dp\": v => { return (v / 1000).toFixed(0) },\r\n        \"milliseconds_to_seconds_1dp\": v => { return (v / 1000).toFixed(1) },\r\n        \"milliseconds_to_seconds_2dp\": v => { return (v / 1000).toFixed(2) },\r\n        \"milliseconds_to_seconds_2dp_if_required\": v => { return (v / 1000).toFixed(2) },\r\n        \"multiplicative_damage_modifier\": v => { return v + 100 },\r\n        \"multiplicative_permyriad_damage_modifier\": v => { return v / 100 + 100 },\r\n        \"negate\": v => { return -v },\r\n        \"old_leech_percent\": v => { return v / 5 },\r\n        \"old_leech_permyriad\": v => { return v / 500 },\r\n        \"per_minute_to_per_second\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_0dp\": v => { return (v / 60).toFixed(0) },\r\n        \"per_minute_to_per_second_1dp\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_2dp\": v => { return (v / 60).toFixed(2) },\r\n        \"per_minute_to_per_second_2dp_if_required\": v => { return (v / 60).toFixed(2) },\r\n        \"divide_by_two_0dp\": v => { return Math.floor(v / 2) },\r\n        \"divide_by_six\": v => { return v / 6 },\r\n        \"divide_by_ten_0dp\": v => { return Math.floor(v / 10) },\r\n        \"divide_by_twelve\": v => { return v / 12 },\r\n        \"divide_by_fifteen_0dp\": v => { return Math.floor(v / 15) },\r\n        \"divide_by_twenty_then_double_0dp\": v => { return Math.floor(v / 20) * 2 },\r\n        \"times_twenty\": v => { return v * 20 }\r\n    };\r\n\r\n    static stringformat = function(fmt) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        return fmt.replace(/{(\\d+)}/g, (match, number) => {\r\n            return args[0][number];\r\n        });\r\n    }\r\n\r\n    static GetTranslationLinesForMod = function(translationJson, mod, values = null) {\r\n        let consumedIdxs = new Set();\r\n        let translationLines = [];\r\n        for (let statIdx in mod[\"stats\"]) {\r\n            if (consumedIdxs.has(statIdx)) {\r\n                continue;\r\n            }\r\n            const statObj = mod[\"stats\"][statIdx];\r\n            const statId = statObj[\"id\"];\r\n            consumedIdxs.add(statIdx);\r\n\r\n            for (const translationIdx in translationJson) {\r\n                const translation = translationJson[translationIdx];\r\n                const translationStatIdx = translation[\"ids\"].findIndex((x => x === statId));\r\n                if (translationStatIdx >= 0) {\r\n                    let translationLine = {};\r\n                    translationLine[\"tidx\"] = translationIdx;\r\n                    const numStatsInTranslation = translation[\"ids\"].length;\r\n                    translationLine[\"mins\"] = Array(numStatsInTranslation).fill(0);\r\n                    translationLine[\"maxs\"] = Array(numStatsInTranslation).fill(0);\r\n                    if (values)\r\n                        translationLine[\"values\"] = Array(numStatsInTranslation).fill(0);\r\n\r\n                    translationLine[\"mins\"][translationStatIdx] = statObj[\"min\"];\r\n                    translationLine[\"maxs\"][translationStatIdx] = statObj[\"max\"];\r\n                    if (values)                    \r\n                        translationLine[\"values\"][translationStatIdx] = values[statIdx];\r\n\r\n                    for (let addlStatIdx in mod[\"stats\"]) {\r\n                        const addlStat = mod[\"stats\"][addlStatIdx];\r\n                        const addlStatId = addlStat[\"id\"];\r\n                        if (consumedIdxs.has(addlStatIdx)) {\r\n                            continue;\r\n                        }\r\n                        const addlStatTranslationIdx = translation[\"ids\"].findIndex((x => x === addlStatId));\r\n                        if (addlStatTranslationIdx > 0) {\r\n                            translationLine[\"mins\"][addlStatTranslationIdx] = addlStat[\"min\"];\r\n                            translationLine[\"maxs\"][addlStatTranslationIdx] = addlStat[\"max\"];\r\n                            if (values)                            \r\n                                translationLine[\"values\"][addlStatTranslationIdx] = values[addlStatIdx];\r\n\r\n                            consumedIdxs.add(addlStatIdx);\r\n                        }\r\n                    }\r\n                    translationLines.push(translationLine);\r\n                }\r\n            }\r\n        }\r\n        return translationLines;\r\n    }\r\n\r\n    static GetTranslationRuleForLine = function(translationJson, line) {\r\n        const translation = translationJson[line[\"tidx\"]][\"English\"];\r\n        for (const translationRule of translation) {\r\n            let conditionsFailed = false;\r\n            for (const statIdx in line[\"mins\"]) {\r\n                let condition = translationRule[\"condition\"][statIdx];\r\n                const value = line[\"mins\"][statIdx];\r\n                if (\"min\" in condition) {\r\n                    if (value < condition[\"min\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (\"max\" in condition) {\r\n                    if (value > condition[\"max\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!conditionsFailed) {\r\n                return translationRule;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static ApplyIndexHandlers = function(indexHandlers, value) {\r\n        for (const handler of indexHandlers) {\r\n            value = this.IndexHandlers[handler](value)\r\n        }\r\n        return value;\r\n    }\r\n\r\n    static GetStringForTranslationRule = function(translationJson, rule, line) {\r\n        const translation = translationJson[line[\"tidx\"]];\r\n        let replacementStrings = Array(translation[\"ids\"].length);\r\n        for (const statIdx in translation[\"ids\"]) {\r\n            const replacementMin = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"mins\"][statIdx]);\r\n            const replacementMax = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"maxs\"][statIdx]);\r\n            let replacementValue = null;\r\n            if (\"values\" in line) {\r\n                replacementValue = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"values\"][statIdx]);\r\n            }\r\n\r\n            let replacementCombined = \"\";\r\n            if (replacementMin === replacementMax) {\r\n                replacementCombined = replacementMin;\r\n            }\r\n            else {\r\n                replacementCombined = \"(\" + replacementMin + \"-\" + replacementMax + \")\";\r\n                if (replacementValue) {\r\n                    replacementCombined = replacementValue + replacementCombined;\r\n                }\r\n            }\r\n            replacementStrings[statIdx] = rule[\"format\"][statIdx].replace(\"#\", replacementCombined);\r\n        }\r\n        return this.stringformat(rule[\"string\"], replacementStrings);\r\n    }\r\n\r\n    static GetStringsForTranslationLines = function(translationJson, translationLines) {\r\n        let strings = Array(translationLines.length).fill(\"\");\r\n        for (const lineIdx in translationLines) {\r\n            const translationRule = this.GetTranslationRuleForLine(translationJson, translationLines[lineIdx]);\r\n            if (translationRule) {\r\n                strings[lineIdx] = this.GetStringForTranslationRule(translationJson, translationRule, translationLines[lineIdx]);\r\n            }\r\n        }\r\n        return strings;\r\n    }\r\n\r\n    static TranslateMod = function(translationJson, mod, values = null) {\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, values);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines);\r\n    }\r\n}","const RarePrefixes = [\r\n    \"Agony\", \"Apocalypse\", \"Armageddon\", \"Beast\", \"Behemoth\", \"Blight\", \"Blood\", \"Bramble\", \"Brimstone\", \"Brood\", \"Carrion\", \"Cataclysm\", \"Chimeric\", \"Corpse\", \"Corruption\", \"Damnation\", \"Death\", \"Demon\", \"Dire\", \"Dragon\", \"Dread\", \"Doom\", \"Dusk\", \"Eagle\", \"Empyrean\", \"Fate\", \"Foe\", \"Gale\", \"Ghoul\", \"Gloom\", \"Glyph\", \"Golem\", \"Grim\", \"Hate\", \"Havoc\", \"Honour\", \"Horror\", \"Hypnotic\", \"Kraken\", \"Loath\", \"Maelstrom\", \"Mind\", \"Miracle\", \"Morbid\", \"Oblivion\", \"Onslaught\", \"Pain\", \"Pandemonium\", \"Phoenix\", \"Plague\", \"Rage\", \"Rapture\", \"Rune\", \"Skull\", \"Sol\", \"Soul\", \"Sorrow\", \"Spirit\", \"Storm\", \"Tempest\", \"Torment\", \"Vengeance\", \"Victory\", \"Viper\", \"Vortex\", \"Woe\", \"Wrath\"\r\n];\r\n\r\nconst RareSuffixes = {\r\n    \"One Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"Two Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"One Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Two Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Sceptre\" : [\"Bane\", \"Blow\", \"Breaker\", \"Call\", \"Chant\", \"Crack\", \"Crusher\", \"Cry\", \"Gnarl\", \"Grinder\", \"Knell\", \"Ram\", \"Roar\", \"Smasher\", \"Song\", \"Spell\", \"Star\", \"Weaver\" ],\r\n    \"Staff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"Warstaff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Thrusting One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\",\"Stinger\", \"Thirst\" ],\r\n    \"Two Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Rune Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Claw\" : [\"Bane\", \"Bite\", \"Edge\", \"Fang\", \"Fist\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Roar\", \"Scratch\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Talons\", \"Thirst\" ],\r\n    \"Bow\" : [\"Arch\", \"Bane\", \"Barrage\", \"Blast\", \"Branch\", \"Breeze\", \"Fletch\", \"Guide\", \"Horn\", \"Mark\", \"Nock\", \"Rain\", \"Reach\", \"Siege\", \"Song\", \"Stinger\", \"Strike\", \"Thirst\", \"Thunder\", \"Twine\", \"Volley\", \"Wind\", \"Wing\" ],\r\n    \"Wand\" : [\"Bane\", \"Barb\", \"Bite\", \"Branch\", \"Call\", \"Chant\", \"Charm\", \"Cry\", \"Edge\", \"Gnarl\", \"Goad\", \"Needle\", \"Scratch\", \"Song\", \"Spell\", \"Spire\", \"Thirst\", \"Weaver\" ],\r\n\r\n    // Armor\r\n    \"Body Armour\" : [\"Carapace\", \"Cloak\", \"Coat\", \"Curtain\", \"Guardian\", \"Hide\", \"Jack\", \"Keep\", \"Mantle\", \"Pelt\", \"Salvation\", \"Sanctuary\", \"Shell\", \"Shelter\", \"Shroud\", \"Skin\", \"Suit\", \"Veil\", \"Ward\", \"Wrap\" ],\r\n    \"Helmet\" : [\"Brow\", \"Corona\", \"Cowl\", \"Crest\", \"Crown\", \"Dome\", \"Glance\", \"Guardian\", \"Halo\", \"Horn\", \"Keep\", \"Peak\", \"Salvation\", \"Shelter\", \"Star\", \"Veil\", \"Visage\", \"Visor\", \"Ward\" ],\r\n    \"Gloves\" : [\"Caress\", \"Claw\", \"Clutches\", \"Fingers\", \"Fist\", \"Grasp\", \"Grip\", \"Hand\", \"Hold\", \"Knuckle\", \"Mitts\", \"Nails\", \"Palm\", \"Paw\", \"Talons\", \"Touch\", \"Vise\" ],\r\n    \"Boots\" : [\"Dash\", \"Goad\", \"Hoof\", \"League\", \"March\", \"Pace\", \"Road\", \"Slippers\", \"Sole\", \"Span\", \"Spark\", \"Spur\", \"Stride\", \"Track\", \"Trail\", \"Tread\", \"Urge\" ],\r\n    // These share the 'Shield' item class, have to search for the 'focus' tag on the item\r\n    \"_Spirit Shield\" : [\"Ancient\", \"Anthem\", \"Call\", \"Chant\", \"Charm\", \"Emblem\", \"Guard\", \"Mark\", \"Pith\", \"Sanctuary\", \"Song\", \"Spell\", \"Star\", \"Ward\", \"Weaver\", \"Wish\" ],\r\n    \"_Other Shield\" : [\"Aegis\", \"Badge\", \"Barrier\", \"Bastion\", \"Bulwark\", \"Duty\", \"Emblem\", \"Fend\", \"Guard\", \"Mark\", \"Refuge\", \"Rock\", \"Rook\", \"Sanctuary\", \"Span\", \"Tower\", \"Watch\", \"Wing\" ],\r\n\r\n    // Accessories\r\n    \"Amulet\" : [\"Beads\", \"Braid\", \"Charm\", \"Choker\", \"Clasp\", \"Collar\", \"Idol\", \"Gorget\", \"Heart\", \"Locket\", \"Medallion\", \"Noose\", \"Pendant\", \"Rosary\", \"Scarab\", \"Talisman\", \"Torc\" ],\r\n    \"Ring\" : [\"Band\", \"Circle\", \"Coil\", \"Eye\", \"Finger\", \"Grasp\", \"Grip\", \"Gyre\", \"Hold\", \"Knot\", \"Knuckle\", \"Loop\", \"Nail\", \"Spiral\", \"Turn\", \"Twirl\", \"Whorl\" ],\r\n    \"Belt\" : [\"Bind\", \"Bond\", \"Buckle\", \"Clasp\", \"Cord\", \"Girdle\", \"Harness\", \"Lash\", \"Leash\", \"Lock\", \"Locket\", \"Shackle\", \"Snare\", \"Strap\", \"Tether\", \"Thread\", \"Trap\", \"Twine\" ],\r\n    \"Quiver\" : [\"Arrow\", \"Barb\", \"Bite\", \"Bolt\", \"Brand\", \"Dart\", \"Flight\", \"Hail\", \"Impaler\", \"Nails\", \"Needle\", \"Quill\", \"Rod\", \"Shot\", \"Skewer\", \"Spear\", \"Spike\", \"Spire\", \"Stinger\" ],\r\n\r\n    // No source for this! Just pulling some random names off poe.trade\r\n    \"Jewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n    \"AbyssJewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n};\r\n\r\nexport function GenerateRareName(itemData, rng) {\r\n    const prefixIdx = Math.floor(rng() * RarePrefixes.length);\r\n    const prefix = RarePrefixes[prefixIdx];\r\n    let suffixPool = [];\r\n    if (itemData[\"item_class\"] === \"Shield\") {\r\n        if (itemData[\"tags\"].includes(\"focus\")) {\r\n            suffixPool = RareSuffixes[\"_Spirit Shield\"];\r\n        }\r\n        else {\r\n            suffixPool = RareSuffixes[\"_Other Shield\"];\r\n        }\r\n    }\r\n    else {\r\n        suffixPool = RareSuffixes[itemData[\"item_class\"]];\r\n    }\r\n    const suffixIdx = Math.floor(rng() * suffixPool.length);\r\n    const suffix = suffixPool[suffixIdx];\r\n    return prefix + \" \" + suffix;\r\n}\r\n\r\nexport default { GenerateRareName };","import React from 'react';\r\nimport './App.css';\r\nimport TranslationHelper from './Translation.js';\r\nimport seedrandom from 'seedrandom';\r\nimport RareItemNames from './RareItemnames.js';\r\nimport base_items from './data/base_items.json';\r\nimport item_classes from './data/item_classes.json';\r\nimport mods from './data/mods.json';\r\nimport stat_translations from './data/stat_translations.json';\r\n\r\nfunction randRange(rng, minInclusive, maxInclusive) {\r\n  return Math.floor(rng.quick() * (maxInclusive - minInclusive + 1)) + minInclusive;\r\n}\r\n\r\nfunction TipLine (props) {\r\n  return <div className=\"tipLine\">{props.line}</div>\r\n}\r\n\r\nfunction PropertyLine (props) {\r\n  return <div className=\"modLine\">{props.line}</div>\r\n}\r\n\r\nfunction ItemNameLine (props) {\r\n  return [props.topLine && <div className=\"itemName\" key=\"itemName_top\">{props.topLine}</div>, props.bottomLine && <div className=\"itemName\" key=\"itemName_bottom\">{props.bottomLine}</div>];\r\n}\r\n\r\nclass CraftedItem extends React.Component {\r\n  getItemTypeName() {\r\n    return base_items[this.props.itemState.baseItemId][\"name\"];\r\n  }\r\n\r\n  getTipLine(modInstance, context) {\r\n    const mod = mods[modInstance.id];\r\n    let line = \"\";\r\n    if (context === \"prefix\" || context === \"suffix\") {\r\n      line = context[0].toUpperCase() + context.slice(1) + \" Modifier \\\"\" + mod[\"name\"] + \"\\\"\" + (modInstance.tierCount > 0 ? (\" (Tier: \" + (modInstance.tier + 1) + \"/\" + modInstance.tierCount + \")\") : \"\");\r\n    }\r\n    else if (context === \"unique\" || context === \"implicit\") {\r\n      line = context[0].toUpperCase() + context.slice(1) + \" Modifier\";\r\n    }\r\n    return <TipLine line={line} key={modInstance.id + \"_tip\"}/>;\r\n  }\r\n\r\n  getStatLines(modInstance) {\r\n    const mod = mods[modInstance.id];\r\n    const values = modInstance.values;\r\n    const translationStrings = TranslationHelper.TranslateMod(stat_translations, mod, values);    \r\n    return translationStrings.map((x, i) => <PropertyLine line={x} key={modInstance.id + \"_mod_\" + i}/>);\r\n  }\r\n\r\n  getImplicitLine(modInstance) {\r\n    return [this.getTipLine(modInstance, \"implicit\"), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getImplicitLines() {\r\n    return this.props.itemState.implicits.map(x => this.getImplicitLine(x));\r\n  }\r\n\r\n  getAffixLine(modInstance) {\r\n    return [this.getTipLine(modInstance, mods[modInstance.id][\"generation_type\"]), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getAffixLines() {\r\n    return this.props.itemState.affixes.map(x => this.getAffixLine(x));\r\n  }\r\n\r\n  render() {\r\n    return [\r\n      <ItemNameLine topLine={this.props.itemState.generatedName} bottomLine={this.getItemTypeName()} key=\"nameLine\"/>, \r\n      <div className=\"separator\" key=\"sep1\">---</div>, \r\n      this.getImplicitLines(),\r\n      <div className=\"separator\" key=\"sep2\">---</div>,\r\n      this.getAffixLines()]\r\n  }\r\n}\r\n\r\nfunction CanBaseItemHaveRarity(baseItemId, rarity) {\r\n  const baseItem = base_items[baseItemId];\r\n  if (baseItem[\"domain\"] === \"flask\") {\r\n    return rarity !== \"rare\";\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetSpawnWeightForMod(modId, tags) {\r\n  const mod = mods[modId];\r\n  for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n    if (tags.includes(spawnWeight[\"tag\"])) {\r\n      return spawnWeight[\"weight\"];\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetPrefixCount(itemState) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"prefix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetSuffixCount(itemState) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"suffix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetAffixCount(itemState) {\r\n  return GetPrefixCount(itemState) + GetSuffixCount(itemState);\r\n}\r\n\r\nfunction GetPrefixLimitForRarity(baseItemId, rarity) {\r\n  if (rarity === \"normal\") {\r\n    return 0;\r\n  }\r\n  if (rarity === \"magic\") {\r\n    return 1;\r\n  }\r\n  if (rarity === \"rare\" || rarity === \"unique\") {\r\n    const baseItem = base_items[baseItemId];\r\n    if (baseItem[\"domain\"] === \"misc\" || baseItem[\"domain\"] === \"abyss_jewel\") {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetSuffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetAffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity) + GetSuffixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetPrefixLimit(itemState) {\r\n  return GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetSuffixLimit(itemState) {\r\n  return GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetAffixLimit(itemState) {\r\n  return GetAffixLimitForRarity(itemState.baseItemId, itemState.rarity); \r\n}\r\n\r\nfunction CanModBeAddedToItem(modId, itemState) {\r\n  const mod = mods[modId];\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  if (mod[\"domain\"] !== baseItem[\"domain\"]) {\r\n    return false;\r\n  }\r\n  if (mod[\"required_level\"] > itemState.level) {\r\n    return false;\r\n  }\r\n  if (mod[\"generation_type\"] === \"prefix\") {\r\n    if (GetPrefixLimit(itemState) <= GetPrefixCount(itemState)) {\r\n      return false;\r\n    }\r\n  }\r\n  else if (mod[\"generation_type\"] === \"suffix\") {\r\n    if (GetSuffixLimit(itemState) <= GetSuffixCount(itemState)) {\r\n      return false;\r\n    }\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n  const modGroup = mod[\"group\"];\r\n  if (modGroup && modGroup !== \"\") {\r\n    for (const affix of itemState.affixes) {\r\n      const existingMod = mods[affix.id];\r\n      if (existingMod[\"group\"] === modGroup) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetValidModsForItem(itemState) {\r\n  const tags = GetItemTags(itemState);\r\n  let validMods = [];\r\n  for (const modId in mods) {\r\n    if (!CanModBeAddedToItem(modId, itemState)) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(modId, tags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push(modId);\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction GetValidModsForItemWithPositiveWeightTag(itemState, tag) {\r\n  const tags = GetItemTags(itemState);\r\n  let validMods = [];\r\n  for (const modId in mods) {\r\n    const mod = mods[modId];\r\n    if (!(mod[\"spawn_weights\"].find(x => x[\"tag\"] == tag && x[\"weight\"] > 0))) {\r\n      continue;\r\n    }\r\n\r\n    if (!CanModBeAddedToItem(modId, itemState)) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(modId, tags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push(modId);\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction CreateWeightedModPool(modIds, tags) {\r\n  let modPool = {\r\n    totalWeight : 0,\r\n    mods : []\r\n  }\r\n\r\n  for (const modId of modIds) {\r\n    let modWeight = GetSpawnWeightForMod(modId, tags);\r\n    modPool.mods.push({\r\n      id : modId,\r\n      weight : modWeight\r\n    });\r\n    modPool.totalWeight += modWeight;\r\n  }\r\n\r\n  return modPool;\r\n}\r\n\r\nfunction PickModFromWeightedModPool(modPool, rng) {\r\n  const randRoll = randRange(rng, 0, modPool.totalWeight - 1);\r\n  let weightAccum = 0;\r\n\r\n  for (const mod of modPool.mods) {\r\n    const modEndWeight = weightAccum + mod.weight;\r\n    if (randRoll < modEndWeight) {\r\n      return mod.id;\r\n    }\r\n    weightAccum = modEndWeight;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction GetInfluenceTag(baseItemId, influence) {\r\n  const baseItem = base_items[baseItemId];\r\n  const baseItemClass = baseItem[\"item_class\"];\r\n  console.log(item_classes);\r\n  if (baseItemClass in item_classes) {\r\n    const influenceTagId = influence + \"_tag\";\r\n    if (influenceTagId in item_classes[baseItemClass]) {\r\n      const influenceTag = item_classes[baseItemClass][influenceTagId];\r\n      if (influenceTag) {\r\n        return influenceTag;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetAddedTags(modId) {\r\n  return mods[modId][\"adds_tags\"];\r\n}\r\n\r\nfunction GetBaseItemTags (itemState) {\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  let tags = [];\r\n  tags = tags.concat(baseItem[\"tags\"]);\r\n  for (const influence of itemState.influences) {\r\n    const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n    if (influenceTag) {\r\n      tags.push(influenceTag);\r\n    }\r\n  }\r\n  for (const implicit of itemState.implicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction GetItemTags(itemState) {\r\n  let tags = GetBaseItemTags(itemState);\r\n  for (const affix of itemState.affixes) {\r\n    tags = tags.concat(GetAddedTags(affix.id));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction RollModValues(modId, rng) {\r\n  let statRolls = [];\r\n  const mod = mods[modId];\r\n  for (const stat of mod[\"stats\"]) {\r\n    statRolls.push(randRange(rng, stat[\"min\"], stat[\"max\"]));\r\n  }\r\n  return statRolls;\r\n}\r\n\r\nfunction GetTierForMod(itemState, modId) {\r\n  const mod = mods[modId];\r\n  if (mod[\"is_essence_only\"]) {\r\n    return [0, 1]\r\n  }\r\n\r\n  if (mod[\"generation_type\"] === \"unique\") {\r\n    return [0, 1]\r\n  }\r\n\r\n  let modTier = 0;\r\n  let modCount = 1;\r\n  const modLevel = mod[\"required_level\"];\r\n  const baseItemTags = GetBaseItemTags(itemState);\r\n  for (const otherModId in mods) {\r\n    if (otherModId === modId) {\r\n      continue;\r\n    }\r\n    const otherMod = mods[otherModId];\r\n    if (otherMod[\"domain\"] !== mod[\"domain\"]) {\r\n      continue;\r\n    }\r\n    if (otherMod[\"group\"] !== mod[\"group\"]) {\r\n      continue;\r\n    }\r\n    if (otherMod[\"type\"] !== mod[\"type\"]) {\r\n      continue;\r\n    }\r\n    if (otherMod[\"is_essence_only\"]) {\r\n      continue;\r\n    }\r\n    if (GetSpawnWeightForMod(otherModId, baseItemTags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    modCount++;\r\n\r\n    if (otherMod[\"required_level\"] > modLevel) {\r\n      modTier++;\r\n    }\r\n  }\r\n\r\n  return [modTier, modCount];\r\n}\r\n\r\nfunction CreateRolledMod(itemState, modId, rng) {\r\n  const tierValues = GetTierForMod(itemState, modId);\r\n  return {\r\n    id : modId,\r\n    values : RollModValues(modId, rng),\r\n    tier : tierValues[0],\r\n    tierCount : tierValues[1],\r\n  }  \r\n}\r\n\r\nfunction RollRareName(itemState, rng) {\r\n  const itemData = base_items[itemState.baseItemId];\r\n  return RareItemNames.GenerateRareName(itemData, rng);\r\n}\r\n\r\nfunction RollRareAffixCount(baseItemId, rng) {\r\n  const maxAffixCount = GetAffixLimitForRarity(baseItemId, \"rare\");\r\n  if (maxAffixCount === 6) {\r\n    // Number of mods from data mined note (source: POE Discord, #3rd-party-tool-dev)\r\n    // \"1/12 chance for 6 mods, 4/12 chance for 5 mods, and 7/12 chance for 6 mods\"\r\n    const randInt = randRange(rng, 0, 11);\r\n    if (randInt < 7) {\r\n      return 4;\r\n    }\r\n    if (randInt < 11) {\r\n      return 5;\r\n    }\r\n    return 6;\r\n  }\r\n  else if (maxAffixCount === 4) {\r\n    // Number of mods from data mined note (source: reddit, https://www.reddit.com/r/pathofexile/comments/8fxnlu/chance_of_getting_specific_number_of_mods_via/)\r\n    // \"for jewels: 65/35\"\r\n    const randInt = randRange(rng, 0, 99);\r\n    if (randInt < 65) {\r\n      return 3;\r\n    }\r\n    return 4;\r\n  }\r\n  else if (maxAffixCount > 0) {\r\n    // Unexpected situation, roll pure random\r\n    return randRange(rng, 1, maxAffixCount);\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction cloneMods(modArray) {\r\n  let newArray = Array(modArray.length);\r\n  for (const oldModIdx in modArray) {\r\n    newArray[oldModIdx] = { ...modArray[oldModIdx], values : [ ...modArray[oldModIdx].values ]};\r\n  }\r\n  return newArray;\r\n}\r\n\r\nfunction cloneItemState(itemState) {\r\n  return { \r\n    ...itemState, \r\n    influences : itemState.influences.slice(),\r\n    implicits : cloneMods(itemState.implicits), \r\n    corruptions : cloneMods(itemState.corruptions), \r\n    affixes : cloneMods(itemState.affixes) \r\n  };\r\n}\r\n\r\nfunction CreateItem(baseItemId, level, rng) {\r\n  let itemState = {\r\n    generatedName : \"\",\r\n    baseItemId : baseItemId,\r\n    level : level,\r\n    rarity : \"normal\",\r\n    corrupted : false,\r\n    quality : 0,\r\n    influences : [],\r\n    implicits : [],\r\n    corruptions : [],\r\n    affixes : []\r\n  }  \r\n\r\n  // Add and roll implicits\r\n  const baseItem = base_items[baseItemId];\r\n  for (const implicitId of baseItem[\"implicits\"]) {\r\n    itemState.implicits.push(CreateRolledMod(itemState, implicitId, rng));\r\n  }\r\n\r\n  return itemState;\r\n}\r\n\r\nfunction AddRandomModFromList(itemState, mods, rng) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const itemTags = GetItemTags(newItemState);\r\n  const weightedModPool = CreateWeightedModPool(mods, itemTags);\r\n  const modId = PickModFromWeightedModPool(weightedModPool, rng);\r\n  if (!modId) {\r\n    return [false, itemState];\r\n  }\r\n  newItemState.affixes.push(CreateRolledMod(itemState, modId, rng));\r\n  return [true, newItemState];  \r\n}\r\n\r\nfunction AddRandomMod(itemState, rng) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const validMods = GetValidModsForItem(newItemState);\r\n  return AddRandomModFromList(itemState, validMods, rng);\r\n}\r\n\r\nfunction CanAddInfluenceToItem(itemState, influence) {\r\n  return GetInfluenceTag(itemState.baseItemId, influence) != null;\r\n}\r\n\r\nfunction AddInfluenceToItem(itemState, influence) {\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newState = cloneItemState(itemState);\r\n  newState.influences.push(influence);\r\n  return [true, newState];\r\n}\r\n\r\nfunction CanScourItem(itemState) {\r\n  if (itemState.rarity === \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction ScourItem(itemState, rng) {\r\n  if (!CanScourItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, { ...cloneItemState(itemState), generatedName : \"\", rarity : \"normal\", affixes : [] }];\r\n}\r\n\r\nfunction CanTransmutationItem(itemState) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"magic\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction TransmutationItem(itemState, rng) {\r\n  if (!CanTransmutationItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"magic\" };\r\n  const numMods = randRange(rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAlterationItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlterationItem(itemState, rng) {\r\n  if (!CanAlterationItem(itemState)) {\r\n    return [0, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [] };\r\n  const numMods = randRange(rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAugmentationItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AugmentationItem(itemState, rng) {\r\n  if (!CanAugmentationItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanRegalItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction RegalItem(itemState, rng) {\r\n  if (!CanRegalItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let rareItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, rng) };\r\n  const [result, newItemState] = AddRandomMod(rareItemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAlchemyItem(itemState) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlchemyItem(itemState, rng) {\r\n  if (!CanAlchemyItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, rng) };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n  newItemState.generatedName = RollRareName(itemState, rng);\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanChaosItem(itemState) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ChaosItem(itemState, rng) {\r\n  if (!CanChaosItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [], generatedName : RollRareName(itemState, rng)  };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedItem(itemState) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction ExaltedItem(itemState, rng) {\r\n  if (!CanExaltedItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedWithInfluenceItem(itemState, influence) {\r\n  if (itemState.influences.length > 0) {\r\n    return false;\r\n  }\r\n  if (!CanExaltedItem(itemState)) {\r\n    return false;\r\n  }\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsForItemWithPositiveWeightTag(newItemState, influenceTag);\r\n  if (validMods.length == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ExaltedWithInfluenceItem(itemState, rng, influence) {\r\n  if (!CanExaltedWithInfluenceItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsForItemWithPositiveWeightTag(newItemState, influenceTag);\r\n  return AddRandomModFromList(newItemState, validMods, rng);\r\n}\r\n\r\nfunction CanAnnulmentItem(itemState) {\r\n  if (itemState.rarity == \"normal\" || itemState.rarity == \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AnnulmentItem(itemState, rng) {\r\n  if (!CanAnnulmentItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  const numAffixes = GetAffixCount(newItemState);\r\n  const affixIdxToRemove = randRange(rng, 0, numAffixes - 1);\r\n  newItemState.affixes.splice(affixIdxToRemove, 1);\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanBlessedItem(itemState) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.implicits.length == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction BlessedItem(itemState, rng) {\r\n  if (!CanBlessedItem(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let implicit of newItemState.implicits) {\r\n    implicit.values = RollModValues(implicit.id, rng);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanDivineItem(itemState) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.affixes.length == 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction DivineItem(itemState, rng) {\r\n  if (!CanDivineItem(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let affix of newItemState.affixes) {\r\n    affix.values = RollModValues(affix.id, rng);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CraftingButton(props) {\r\n  return <button className=\"button\" onClick={props.onClick} disabled={!props.enabled}>{props.label}</button>;\r\n}\r\n\r\nclass TheoryCrafter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.testMap = {\r\n      \"scour\" : CanScourItem,\r\n      \"transmute\" : CanTransmutationItem,\r\n      \"alt\" : CanAlterationItem,\r\n      \"aug\" : CanAugmentationItem,\r\n      \"regal\" : CanRegalItem,\r\n      \"alch\" : CanAlchemyItem,\r\n      \"chaos\" : CanChaosItem,\r\n      \"exalt\" : CanExaltedItem,\r\n      \"exalt_crusader\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"warlord\"),\r\n      \"annul\" : CanAnnulmentItem,\r\n      \"bless\" : CanBlessedItem,\r\n      \"divine\" : CanDivineItem,\r\n    }\r\n\r\n    this.actionMap = {\r\n      \"scour\" : ScourItem,\r\n      \"transmute\" : TransmutationItem,\r\n      \"alt\" : AlterationItem,\r\n      \"aug\" : AugmentationItem,\r\n      \"regal\" : RegalItem,\r\n      \"alch\" : AlchemyItem,\r\n      \"chaos\" : ChaosItem,\r\n      \"exalt\" : ExaltedItem,\r\n      \"exalt_crusader\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"warlord\"),\r\n      \"annul\" : AnnulmentItem,\r\n      \"bless\" : BlessedItem,\r\n      \"divine\" : DivineItem,\r\n    }\r\n\r\n    this.rng = seedrandom();\r\n    const normalItemState = CreateItem(\"Metadata/Items/Armours/Boots/BootsAtlas1\", 100, this.rng);\r\n    this.state = this.initState(normalItemState);\r\n  }\r\n\r\n  initState(initItemState) {\r\n    return {\r\n      itemStateHistory : [ { itemState: initItemState, action : \"\" } ],\r\n      itemStateHistoryIdx : 0,\r\n      lastCommand : \"\",\r\n    };\r\n  }\r\n\r\n  pushState(newState, actionName) {\r\n    return { ...this.state, itemStateHistory : [ ...this.state.itemStateHistory, { itemState: newState, action : actionName } ] };\r\n  }\r\n\r\n  getState() {\r\n    return this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState;\r\n  }\r\n\r\n  canUndoState() {\r\n    return this.state.itemStateHistoryIdx > 0;\r\n  }\r\n\r\n  getUndoLabel() {\r\n    if (!this.canUndoState()) {\r\n      return \"Undo\";\r\n    }\r\n    return \"Undo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  undoState() {\r\n    if (this.state.itemStateHistoryIdx > 0)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx - 1 });\r\n    }\r\n  }\r\n\r\n  canRerollAction() {\r\n    return (this.state.itemStateHistory[this.state.itemStateHistoryIdx].action != \"\") \r\n      && (this.state.itemStateHistoryIdx > 0);\r\n  }\r\n\r\n  getRerollLabel() {\r\n    if (!this.canRerollAction()) {\r\n      return \"Reroll Action\";\r\n    }\r\n    return \"Reroll \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  rerollAction() {\r\n    if (!this.canRerollAction()) {\r\n      return;\r\n    }\r\n    const action = this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n    const previousItemState = this.state.itemStateHistory[this.state.itemStateHistoryIdx - 1].itemState;\r\n    const canPerformAction = this.testMap[action](previousItemState);\r\n    if (!canPerformAction) {\r\n      return;\r\n    }\r\n    const result = this.actionMap[action](previousItemState, this.rng);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutStateAt(result[1], action, this.state.itemStateHistoryIdx));\r\n    }\r\n  }\r\n\r\n  canRedoState() {\r\n    return this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1;\r\n  }\r\n\r\n  getRedoLabel() {\r\n    if (!this.canRedoState()) {\r\n      return \"Redo\";\r\n    }\r\n    return \"Redo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx + 1].action;\r\n  }\r\n\r\n  redoState() {\r\n    if (this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx + 1 });\r\n    }\r\n  }\r\n\r\n  insertAndCutStateAt(newState, actionName, index) {\r\n    const newStateHistory = this.state.itemStateHistory.slice(0, index);\r\n    newStateHistory.push( { itemState: newState, action : actionName } );\r\n    return { ...this.state, itemStateHistory : newStateHistory, itemStateHistoryIdx : index };    \r\n  }\r\n\r\n  insertAndCutState(newState, actionName) {\r\n    return this.insertAndCutStateAt(newState, actionName, this.state.itemStateHistoryIdx + 1);\r\n  }\r\n\r\n  canPerformAction(actionName) {\r\n    return this.testMap[actionName](this.getState());\r\n  }\r\n\r\n  performAction(actionName) {\r\n    const result = this.actionMap[actionName](this.getState(), this.rng);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutState(result[1], actionName));\r\n    }\r\n  }\r\n\r\n  RenderCraftingButton(actionName, label) {\r\n    return <CraftingButton onClick={ () => this.performAction(actionName) } enabled={ this.canPerformAction(actionName) } label={label} key={actionName} />\r\n  }\r\n\r\n  render() {\r\n    return [\r\n//      <CraftingButton onClick={ () => this.setState(this.state) } enabled=\"true\" label=\"Debug Refresh\" key=\"Refresh\" />,\r\n        this.RenderCraftingButton(\"scour\", \"Scour\"),\r\n        this.RenderCraftingButton(\"transmute\", \"Transmutation\"),\r\n        this.RenderCraftingButton(\"aug\", \"Augmentation\"),\r\n        this.RenderCraftingButton(\"alt\", \"Alteration\"),\r\n        this.RenderCraftingButton(\"regal\", \"Regal\"),\r\n        this.RenderCraftingButton(\"alch\", \"Alchemy\"),\r\n        this.RenderCraftingButton(\"chaos\", \"Chaos\"),\r\n        this.RenderCraftingButton(\"exalt\", \"Exalted\"),\r\n        this.RenderCraftingButton(\"exalt_crusader\", \"Crusader Exalt\"),\r\n        this.RenderCraftingButton(\"exalt_hunter\", \"Hunter Exalt\"),\r\n        this.RenderCraftingButton(\"exalt_redeemer\", \"Redeemer Exalt\"),\r\n        this.RenderCraftingButton(\"exalt_warlord\", \"Warlord Exalt\"),\r\n        this.RenderCraftingButton(\"annul\", \"Annulment\"),\r\n        this.RenderCraftingButton(\"bless\", \"Blessed\"),\r\n        this.RenderCraftingButton(\"divine\", \"Divine\"),\r\n        <div key=\"undoDiv\"><CraftingButton onClick={ () => this.undoState() } enabled={ this.canUndoState() } label={ this.getUndoLabel() } key=\"undo\" /></div>,\r\n        <div key=\"redoDiv\"><CraftingButton onClick={ () => this.redoState() } enabled={ this.canRedoState() } label={ this.getRedoLabel() } key=\"redo\" /></div>,\r\n        <div key=\"rerollDiv\"><CraftingButton onClick={ () => this.rerollAction() } enabled={ this.canRerollAction() } label={ this.getRerollLabel() } key=\"undo\" /></div>,\r\n        <CraftedItem itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } key=\"craftedItem\" />\r\n    ]\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <TheoryCrafter />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}