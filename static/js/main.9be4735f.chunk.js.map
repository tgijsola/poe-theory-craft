{"version":3,"sources":["Translation.js","RareItemnames.js","App.js","serviceWorker.js","index.js"],"names":["TranslationHelper","IndexHandlers","v","toFixed","Math","floor","stringformat","fmt","args","Array","prototype","slice","call","arguments","replace","match","number","GetTranslationLinesForMod","translationJson","mod","values","consumedIdxs","Set","translationLines","statIdx","has","statObj","statId","translationIdx","add","translation","translationStatIdx","findIndex","x","translationLine","numStatsInTranslation","length","fill","addlStatIdx","addlStat","addlStatId","addlStatTranslationIdx","push","GetTranslationRuleForLine","line","translationRule","conditionsFailed","condition","value","ApplyIndexHandlers","indexHandlers","handler","this","GetStringForTranslationRule","rule","replacementStrings","replacementMin","replacementMax","replacementValue","replacementCombined","GetStringsForTranslationLines","strings","lineIdx","concat","split","TranslateMod","RarePrefixes","RareSuffixes","GenerateRareName","itemData","rng","prefixIdx","suffixPool","includes","randRange","minInclusive","maxInclusive","quick","PropertyLine","props","replacementIdx","replacementSpans","map","className","key","lineSplit","output","i","TipLine","ModLine","ItemNameLine","topLine","bottomLine","ItemHeader","double","generatedName","itemTypeName","leftSymbolClass","influences","rightSymbolClass","CraftedItem","base_items","itemState","baseItemId","modInstance","context","mods","id","toUpperCase","tierCount","tier","tierCountAtItemLevel","stat_translations","getStatLines","getTipLine","showMods","implicits","sortMods","SortMods","getImplicitLine","affixes","getAffixLine","groups","separatedGroups","separatoridx","group","rarity","getItemTypeName","level","getGroupsWithSeparators","getImplicitBoxes","getAffixBoxes","React","Component","CanBaseItemHaveRarity","GetSpawnWeightForMod","modId","tags","spawnWeight","GetPrefixCount","existingAffixCount","GetSuffixCount","GetAffixCount","GetPrefixLimitForRarity","baseItem","GetSuffixLimitForRarity","GetAffixLimitForRarity","GetAffixLimit","CanModBeAddedToItem","GetPrefixLimit","GetSuffixLimit","modGroup","affix","GetValidModsForItemWithPositiveWeightTag","tag","GetItemTags","validMods","find","GetInfluenceTag","influence","baseItemClass","item_classes","influenceTagId","influenceTag","GetAddedTags","GetBaseItemTags","implicit","RollModValues","statRolls","stat","CreateRolledMod","tierValues","modTier","modCount","modCountAtItemLevel","modLevel","baseItemTags","otherModId","otherMod","GetTierForMod","RollRareName","RareItemNames","RollRareAffixCount","maxAffixCount","randInt","cloneMods","modArray","newArray","oldModIdx","cloneItemState","corruptions","CreateItem","corrupted","quality","implicitId","AddRandomModFromList","newItemState","modPool","randRoll","totalWeight","weightAccum","modEndWeight","weight","PickModFromWeightedModPool","modIds","modWeight","CreateWeightedModPool","AddRandomMod","GetValidModsForItem","generationTypeOrder","ModComparer","a","b","modA","modB","modAGenerationType","modBGenerationType","modAFirstStatId","modBFirstStatId","modAFirstStatIdx","modBFirstStartIdx","statKeys","Object","keys","stats","statKey","modARequiredLevel","modBRequiredLevel","modList","sortedList","sort","CanAddInfluenceToItem","AddInfluenceToItem","newState","CanScourItem","ScourItem","CanTransmutationItem","TransmutationItem","numMods","CanAlterationItem","AlterationItem","CanAugmentationItem","AugmentationItem","result","CanRegalItem","RegalItem","CanAlchemyItem","AlchemyItem","CanChaosItem","ChaosItem","CanExaltedItem","ExaltedItem","CanExaltedWithInfluenceItem","ExaltedWithInfluenceItem","CanAnnulmentItem","AnnulmentItem","affixIdxToRemove","splice","CanBlessedItem","BlessedItem","CanDivineItem","DivineItem","CraftingButton","onClick","disabled","enabled","label","TheoryCrafter","testMap","actionMap","seedrandom","normalItemState","state","initState","initItemState","itemStateHistory","action","itemStateHistoryIdx","lastCommand","selectedBaseId","selectedBaseLevel","actionName","canUndoState","setState","canRerollAction","previousItemState","insertAndCutStateAt","canRedoState","index","newStateHistory","getState","insertAndCutState","e","target","baseItems","domain","lastIndexOf","onChange","handleSelectedBaseChanged","k","handleSelectedBaseLevelChanged","handleBaseSelectButtonClicked","performAction","canPerformAction","checked","RenderBaseSelectList","RenderBaseSelectLevel","RenderBaseSelectButton","RenderCraftingButton","undoState","getUndoLabel","redoState","getRedoLabel","rerollAction","getRerollLabel","type","handleSortModsToggled","style","color","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9be4735f.chunk.js","sourcesContent":["export default class TranslationHelper {\r\n    static IndexHandlers = {\r\n        \"30%_of_value\": v => { return v * 0.3 },\r\n        \"60%_of_value\": v => { return v * 0.6 },\r\n        \"deciseconds_to_seconds\": v => { return v / 10 },\r\n        \"divide_by_one_hundred\": v => { return v / 100 },\r\n        \"divide_by_one_hundred_and_negate\": v => { return -v / 100 },\r\n        \"divide_by_one_hundred_2dp\": v => { return (v / 100).toFixed(2) },\r\n        \"milliseconds_to_seconds\": v => { return v / 1000 },\r\n        \"milliseconds_to_seconds_0dp\": v => { return (v / 1000).toFixed(0) },\r\n        \"milliseconds_to_seconds_1dp\": v => { return (v / 1000).toFixed(1) },\r\n        \"milliseconds_to_seconds_2dp\": v => { return (v / 1000).toFixed(2) },\r\n        \"milliseconds_to_seconds_2dp_if_required\": v => { return (v / 1000).toFixed(2) },\r\n        \"multiplicative_damage_modifier\": v => { return v + 100 },\r\n        \"multiplicative_permyriad_damage_modifier\": v => { return v / 100 + 100 },\r\n        \"negate\": v => { return -v },\r\n        \"old_leech_percent\": v => { return v / 5 },\r\n        \"old_leech_permyriad\": v => { return v / 500 },\r\n        \"per_minute_to_per_second\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_0dp\": v => { return (v / 60).toFixed(0) },\r\n        \"per_minute_to_per_second_1dp\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_2dp\": v => { return (v / 60).toFixed(2) },\r\n        \"per_minute_to_per_second_2dp_if_required\": v => { return (v / 60).toFixed(2) },\r\n        \"divide_by_two_0dp\": v => { return Math.floor(v / 2) },\r\n        \"divide_by_six\": v => { return v / 6 },\r\n        \"divide_by_ten_0dp\": v => { return Math.floor(v / 10) },\r\n        \"divide_by_twelve\": v => { return v / 12 },\r\n        \"divide_by_fifteen_0dp\": v => { return Math.floor(v / 15) },\r\n        \"divide_by_twenty_then_double_0dp\": v => { return Math.floor(v / 20) * 2 },\r\n        \"times_twenty\": v => { return v * 20 }\r\n    };\r\n\r\n    static stringformat = function(fmt) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        return fmt.replace(/{(\\d+)}/g, (match, number) => {\r\n            return args[0][number];\r\n        });\r\n    }\r\n\r\n    static GetTranslationLinesForMod = function(translationJson, mod, values = null) {\r\n        let consumedIdxs = new Set();\r\n        let translationLines = [];\r\n        for (let statIdx in mod[\"stats\"]) {\r\n            if (consumedIdxs.has(statIdx)) {\r\n                continue;\r\n            }\r\n            const statObj = mod[\"stats\"][statIdx];\r\n            const statId = statObj[\"id\"];\r\n            consumedIdxs.add(statIdx);\r\n\r\n            for (const translationIdx in translationJson) {\r\n                const translation = translationJson[translationIdx];\r\n                const translationStatIdx = translation[\"ids\"].findIndex((x => x === statId));\r\n                if (translationStatIdx >= 0) {\r\n                    let translationLine = {};\r\n                    translationLine[\"tidx\"] = translationIdx;\r\n                    const numStatsInTranslation = translation[\"ids\"].length;\r\n                    translationLine[\"mins\"] = Array(numStatsInTranslation).fill(0);\r\n                    translationLine[\"maxs\"] = Array(numStatsInTranslation).fill(0);\r\n                    if (values)\r\n                        translationLine[\"values\"] = Array(numStatsInTranslation).fill(0);\r\n\r\n                    translationLine[\"mins\"][translationStatIdx] = statObj[\"min\"];\r\n                    translationLine[\"maxs\"][translationStatIdx] = statObj[\"max\"];\r\n                    if (values)                    \r\n                        translationLine[\"values\"][translationStatIdx] = values[statIdx];\r\n\r\n                    for (let addlStatIdx in mod[\"stats\"]) {\r\n                        const addlStat = mod[\"stats\"][addlStatIdx];\r\n                        const addlStatId = addlStat[\"id\"];\r\n                        if (consumedIdxs.has(addlStatIdx)) {\r\n                            continue;\r\n                        }\r\n                        const addlStatTranslationIdx = translation[\"ids\"].findIndex((x => x === addlStatId));\r\n                        if (addlStatTranslationIdx > 0) {\r\n                            translationLine[\"mins\"][addlStatTranslationIdx] = addlStat[\"min\"];\r\n                            translationLine[\"maxs\"][addlStatTranslationIdx] = addlStat[\"max\"];\r\n                            if (values)                            \r\n                                translationLine[\"values\"][addlStatTranslationIdx] = values[addlStatIdx];\r\n\r\n                            consumedIdxs.add(addlStatIdx);\r\n                        }\r\n                    }\r\n                    translationLines.push(translationLine);\r\n                }\r\n            }\r\n        }\r\n        return translationLines;\r\n    }\r\n\r\n    static GetTranslationRuleForLine = function(translationJson, line) {\r\n        const translation = translationJson[line[\"tidx\"]][\"English\"];\r\n        for (const translationRule of translation) {\r\n            let conditionsFailed = false;\r\n            for (const statIdx in line[\"mins\"]) {\r\n                let condition = translationRule[\"condition\"][statIdx];\r\n                const value = line[\"mins\"][statIdx];\r\n                if (\"min\" in condition) {\r\n                    if (value < condition[\"min\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (\"max\" in condition) {\r\n                    if (value > condition[\"max\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!conditionsFailed) {\r\n                return translationRule;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static ApplyIndexHandlers = function(indexHandlers, value) {\r\n        for (const handler of indexHandlers) {\r\n            value = this.IndexHandlers[handler](value)\r\n        }\r\n        return value;\r\n    }\r\n\r\n    static GetStringForTranslationRule = function(translationJson, rule, line) {\r\n        const translation = translationJson[line[\"tidx\"]];\r\n        let replacementStrings = Array(translation[\"ids\"].length);\r\n        for (const statIdx in translation[\"ids\"]) {\r\n            const replacementMin = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"mins\"][statIdx]);\r\n            const replacementMax = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"maxs\"][statIdx]);\r\n            let replacementValue = null;\r\n            if (\"values\" in line) {\r\n                replacementValue = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"values\"][statIdx]);\r\n            }\r\n\r\n            let replacementCombined = \"\";\r\n            if (replacementMin === replacementMax) {\r\n                replacementCombined = replacementMin;\r\n            }\r\n            else {\r\n                replacementCombined = \"(\" + replacementMin + \"-\" + replacementMax + \")\";\r\n                if (replacementValue) {\r\n                    replacementCombined = replacementValue + replacementCombined;\r\n                }\r\n            }\r\n            replacementStrings[statIdx] = rule[\"format\"][statIdx].replace(\"#\", replacementCombined);\r\n        }\r\n        return this.stringformat(rule[\"string\"], replacementStrings);\r\n    }\r\n\r\n    static GetStringsForTranslationLines = function(translationJson, translationLines) {\r\n        let strings = [];\r\n        for (const lineIdx in translationLines) {\r\n            const translationRule = this.GetTranslationRuleForLine(translationJson, translationLines[lineIdx]);\r\n            if (translationRule) {\r\n                strings = strings.concat(this.GetStringForTranslationRule(translationJson, translationRule, translationLines[lineIdx]).split(\"\\n\"));\r\n            }\r\n        }\r\n        return strings;\r\n    }\r\n\r\n    static TranslateMod = function(translationJson, mod, values = null) {\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, values);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines);\r\n    }\r\n}","const RarePrefixes = [\r\n    \"Agony\", \"Apocalypse\", \"Armageddon\", \"Beast\", \"Behemoth\", \"Blight\", \"Blood\", \"Bramble\", \"Brimstone\", \"Brood\", \"Carrion\", \"Cataclysm\", \"Chimeric\", \"Corpse\", \"Corruption\", \"Damnation\", \"Death\", \"Demon\", \"Dire\", \"Dragon\", \"Dread\", \"Doom\", \"Dusk\", \"Eagle\", \"Empyrean\", \"Fate\", \"Foe\", \"Gale\", \"Ghoul\", \"Gloom\", \"Glyph\", \"Golem\", \"Grim\", \"Hate\", \"Havoc\", \"Honour\", \"Horror\", \"Hypnotic\", \"Kraken\", \"Loath\", \"Maelstrom\", \"Mind\", \"Miracle\", \"Morbid\", \"Oblivion\", \"Onslaught\", \"Pain\", \"Pandemonium\", \"Phoenix\", \"Plague\", \"Rage\", \"Rapture\", \"Rune\", \"Skull\", \"Sol\", \"Soul\", \"Sorrow\", \"Spirit\", \"Storm\", \"Tempest\", \"Torment\", \"Vengeance\", \"Victory\", \"Viper\", \"Vortex\", \"Woe\", \"Wrath\"\r\n];\r\n\r\nconst RareSuffixes = {\r\n    \"One Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"Two Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"One Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Two Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Sceptre\" : [\"Bane\", \"Blow\", \"Breaker\", \"Call\", \"Chant\", \"Crack\", \"Crusher\", \"Cry\", \"Gnarl\", \"Grinder\", \"Knell\", \"Ram\", \"Roar\", \"Smasher\", \"Song\", \"Spell\", \"Star\", \"Weaver\" ],\r\n    \"Staff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"FishingRod\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"Warstaff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Thrusting One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\",\"Stinger\", \"Thirst\" ],\r\n    \"Two Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Rune Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Claw\" : [\"Bane\", \"Bite\", \"Edge\", \"Fang\", \"Fist\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Roar\", \"Scratch\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Talons\", \"Thirst\" ],\r\n    \"Bow\" : [\"Arch\", \"Bane\", \"Barrage\", \"Blast\", \"Branch\", \"Breeze\", \"Fletch\", \"Guide\", \"Horn\", \"Mark\", \"Nock\", \"Rain\", \"Reach\", \"Siege\", \"Song\", \"Stinger\", \"Strike\", \"Thirst\", \"Thunder\", \"Twine\", \"Volley\", \"Wind\", \"Wing\" ],\r\n    \"Wand\" : [\"Bane\", \"Barb\", \"Bite\", \"Branch\", \"Call\", \"Chant\", \"Charm\", \"Cry\", \"Edge\", \"Gnarl\", \"Goad\", \"Needle\", \"Scratch\", \"Song\", \"Spell\", \"Spire\", \"Thirst\", \"Weaver\" ],\r\n\r\n    // Armor\r\n    \"Body Armour\" : [\"Carapace\", \"Cloak\", \"Coat\", \"Curtain\", \"Guardian\", \"Hide\", \"Jack\", \"Keep\", \"Mantle\", \"Pelt\", \"Salvation\", \"Sanctuary\", \"Shell\", \"Shelter\", \"Shroud\", \"Skin\", \"Suit\", \"Veil\", \"Ward\", \"Wrap\" ],\r\n    \"Helmet\" : [\"Brow\", \"Corona\", \"Cowl\", \"Crest\", \"Crown\", \"Dome\", \"Glance\", \"Guardian\", \"Halo\", \"Horn\", \"Keep\", \"Peak\", \"Salvation\", \"Shelter\", \"Star\", \"Veil\", \"Visage\", \"Visor\", \"Ward\" ],\r\n    \"Gloves\" : [\"Caress\", \"Claw\", \"Clutches\", \"Fingers\", \"Fist\", \"Grasp\", \"Grip\", \"Hand\", \"Hold\", \"Knuckle\", \"Mitts\", \"Nails\", \"Palm\", \"Paw\", \"Talons\", \"Touch\", \"Vise\" ],\r\n    \"Boots\" : [\"Dash\", \"Goad\", \"Hoof\", \"League\", \"March\", \"Pace\", \"Road\", \"Slippers\", \"Sole\", \"Span\", \"Spark\", \"Spur\", \"Stride\", \"Track\", \"Trail\", \"Tread\", \"Urge\" ],\r\n    // These share the 'Shield' item class, have to search for the 'focus' tag on the item\r\n    \"_Spirit Shield\" : [\"Ancient\", \"Anthem\", \"Call\", \"Chant\", \"Charm\", \"Emblem\", \"Guard\", \"Mark\", \"Pith\", \"Sanctuary\", \"Song\", \"Spell\", \"Star\", \"Ward\", \"Weaver\", \"Wish\" ],\r\n    \"_Other Shield\" : [\"Aegis\", \"Badge\", \"Barrier\", \"Bastion\", \"Bulwark\", \"Duty\", \"Emblem\", \"Fend\", \"Guard\", \"Mark\", \"Refuge\", \"Rock\", \"Rook\", \"Sanctuary\", \"Span\", \"Tower\", \"Watch\", \"Wing\" ],\r\n\r\n    // Accessories\r\n    \"Amulet\" : [\"Beads\", \"Braid\", \"Charm\", \"Choker\", \"Clasp\", \"Collar\", \"Idol\", \"Gorget\", \"Heart\", \"Locket\", \"Medallion\", \"Noose\", \"Pendant\", \"Rosary\", \"Scarab\", \"Talisman\", \"Torc\" ],\r\n    \"Ring\" : [\"Band\", \"Circle\", \"Coil\", \"Eye\", \"Finger\", \"Grasp\", \"Grip\", \"Gyre\", \"Hold\", \"Knot\", \"Knuckle\", \"Loop\", \"Nail\", \"Spiral\", \"Turn\", \"Twirl\", \"Whorl\" ],\r\n    \"Belt\" : [\"Bind\", \"Bond\", \"Buckle\", \"Clasp\", \"Cord\", \"Girdle\", \"Harness\", \"Lash\", \"Leash\", \"Lock\", \"Locket\", \"Shackle\", \"Snare\", \"Strap\", \"Tether\", \"Thread\", \"Trap\", \"Twine\" ],\r\n    \"Quiver\" : [\"Arrow\", \"Barb\", \"Bite\", \"Bolt\", \"Brand\", \"Dart\", \"Flight\", \"Hail\", \"Impaler\", \"Nails\", \"Needle\", \"Quill\", \"Rod\", \"Shot\", \"Skewer\", \"Spear\", \"Spike\", \"Spire\", \"Stinger\" ],\r\n\r\n    // No source for this! Just pulling some random names off poe.trade\r\n    \"Jewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n    \"AbyssJewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n};\r\n\r\nexport function GenerateRareName(itemData, rng) {\r\n    const prefixIdx = Math.floor(rng() * RarePrefixes.length);\r\n    const prefix = RarePrefixes[prefixIdx];\r\n    let suffixPool = [];\r\n    if (itemData[\"item_class\"] === \"Shield\") {\r\n        if (itemData[\"tags\"].includes(\"focus\")) {\r\n            suffixPool = RareSuffixes[\"_Spirit Shield\"];\r\n        }\r\n        else {\r\n            suffixPool = RareSuffixes[\"_Other Shield\"];\r\n        }\r\n    }\r\n    else {\r\n        suffixPool = RareSuffixes[itemData[\"item_class\"]];\r\n    }\r\n    const suffixIdx = Math.floor(rng() * suffixPool.length);\r\n    const suffix = suffixPool[suffixIdx];\r\n    return prefix + \" \" + suffix;\r\n}\r\n\r\nexport default { GenerateRareName };","import React from 'react';\r\nimport './App.css';\r\nimport TranslationHelper from './Translation.js';\r\nimport seedrandom from 'seedrandom';\r\nimport RareItemNames from './RareItemnames.js';\r\n\r\nimport base_items from './data/base_items.json';\r\nimport item_classes from './data/item_classes.json';\r\nimport mods from './data/mods.json';\r\nimport stat_translations from './data/stat_translations.json';\r\nimport stats from './data/stats.json'\r\n\r\nfunction randRange(rng, minInclusive, maxInclusive) {\r\n  return Math.floor(rng.quick() * (maxInclusive - minInclusive + 1)) + minInclusive;\r\n}\r\n\r\nfunction PropertyLine (props) {\r\n  let replacementIdx = 0;\r\n  let replacementSpans = props.values.map((x) => <span className=\"property\" key={replacementIdx++}>{x}</span>);\r\n  const lineSplit = props.line.split(/{}/g);\r\n  let output = [];\r\n  for (let i = 0; i < lineSplit.length - 1; ++i) {\r\n    output.push(lineSplit[i]);\r\n    output.push(replacementSpans[i]);\r\n  }\r\n  output.push(lineSplit[lineSplit.length - 1]);\r\n  return <div className=\"propertyLine\">{output}</div>;\r\n}\r\n\r\nfunction TipLine (props) {\r\n  return <div className=\"tipLine\">{props.line}</div>\r\n}\r\n\r\nfunction ModLine (props) {\r\n  return <div className=\"modLine\">{props.line}</div>\r\n}\r\n\r\nfunction ItemNameLine (props) {\r\n  return [props.topLine && <div className=\"itemName\" key=\"itemName_top\">{props.topLine}</div>, props.bottomLine && <div className=\"itemName\" key=\"itemName_bottom\">{props.bottomLine}</div>];\r\n}\r\n\r\nfunction ItemHeader (props) {\r\n  const double = props.generatedName.length > 0 && props.itemTypeName.length > 0;\r\n  const leftSymbolClass = props.influences.length > 0 ? props.influences[0] : \"\";\r\n  const rightSymbolClass = props.influences.length > 1 ? props.influences[1] : leftSymbolClass;\r\n  return  <div className={\"header-border \" + (double ? \"double\" : \"single\")}>\r\n            <span className={\"l symbol \" + leftSymbolClass}></span>\r\n            <ItemNameLine topLine={props.generatedName} bottomLine={props.itemTypeName} key=\"nameLine\"/>\r\n            <span className={\"r symbol \" + rightSymbolClass}></span>\r\n          </div>\r\n  ;\r\n}\r\n\r\nclass CraftedItem extends React.Component {\r\n  getItemTypeName() {\r\n    return base_items[this.props.itemState.baseItemId][\"name\"];\r\n  }\r\n\r\n  getTipLine(modInstance, context) {\r\n    const mod = mods[modInstance.id];\r\n    let line = \"\";\r\n    if (context === \"prefix\" || context === \"suffix\") {\r\n      line = context[0].toUpperCase() + context.slice(1) + \" Modifier \\\"\" + mod[\"name\"] + \"\\\"\" + (modInstance.tierCount > 0 ? (\" (Tier: \" + (modInstance.tier + 1) + \" [\" + (modInstance.tierCount - modInstance.tierCountAtItemLevel + 1) + \"-\" + modInstance.tierCount + \"])\") : \"\");\r\n    }\r\n    else if (context === \"unique\" || context === \"implicit\") {\r\n      line = context[0].toUpperCase() + context.slice(1) + \" Modifier\";\r\n    }\r\n    return <TipLine line={line} key={modInstance.id + \"_tip\"}/>;\r\n  }\r\n\r\n  getStatLines(modInstance) {\r\n    const mod = mods[modInstance.id];\r\n    const values = modInstance.values;\r\n    const translationStrings = TranslationHelper.TranslateMod(stat_translations, mod, values);    \r\n    return translationStrings.map((x, i) => <ModLine line={x} key={modInstance.id + \"_mod_\" + i}/>);\r\n  }\r\n\r\n  getImplicitLine(modInstance) {\r\n    const statLines = this.getStatLines(modInstance);\r\n    if (statLines.length > 0) {\r\n      return [this.getTipLine(modInstance, \"implicit\"), this.getStatLines(modInstance)];\r\n    }\r\n  }\r\n\r\n  getImplicitBoxes() {\r\n    let showMods = this.props.itemState.implicits;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods);\r\n    }\r\n    return showMods.map(\r\n      x => <div className=\"modBox implicit\" key={x.id}>{this.getImplicitLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getAffixLine(modInstance) {\r\n    return [this.getTipLine(modInstance, mods[modInstance.id][\"generation_type\"]), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getAffixBoxes() {\r\n    let showMods = this.props.itemState.affixes;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods);\r\n    }\r\n    return showMods.map(    \r\n      x => <div className=\"modBox\" key={x.id}>{this.getAffixLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getGroupsWithSeparators(groups) \r\n  {\r\n    let separatedGroups = [];\r\n    let separatoridx = 0;\r\n    for (const group of groups) {\r\n      if (group.length > 0) {\r\n        separatedGroups.push(<div className=\"separator\" key={\"sep_\" + separatoridx} />);\r\n        separatoridx++;\r\n        separatedGroups = separatedGroups.concat(group);\r\n      }\r\n    }\r\n    return separatedGroups;\r\n  }\r\n\r\n  render() {\r\n    return <div className={\"craftedItem \" + this.props.itemState.rarity}>\r\n      <div className=\"content-box\">\r\n        <ItemHeader itemTypeName={this.getItemTypeName()} generatedName={this.props.itemState.generatedName} influences={this.props.itemState.influences} />\r\n        <PropertyLine line=\"Item Level: {}\" values={[this.props.itemState.level]} />\r\n        { this.getGroupsWithSeparators([this.getImplicitBoxes(), this.getAffixBoxes()]) }\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\nfunction CanBaseItemHaveRarity(baseItemId, rarity) {\r\n  const baseItem = base_items[baseItemId];\r\n  if (baseItem[\"domain\"] === \"flask\") {\r\n    return rarity !== \"rare\";\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetSpawnWeightForMod(modId, tags) {\r\n  const mod = mods[modId];\r\n  for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n    if (tags.includes(spawnWeight[\"tag\"])) {\r\n      return spawnWeight[\"weight\"];\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetPrefixCount(itemState) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"prefix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetSuffixCount(itemState) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"suffix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetAffixCount(itemState) {\r\n  return GetPrefixCount(itemState) + GetSuffixCount(itemState);\r\n}\r\n\r\nfunction GetPrefixLimitForRarity(baseItemId, rarity) {\r\n  if (rarity === \"normal\") {\r\n    return 0;\r\n  }\r\n  if (rarity === \"magic\") {\r\n    return 1;\r\n  }\r\n  if (rarity === \"rare\" || rarity === \"unique\") {\r\n    const baseItem = base_items[baseItemId];\r\n    if (baseItem[\"domain\"] === \"misc\" || baseItem[\"domain\"] === \"abyss_jewel\") {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetSuffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetAffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity) + GetSuffixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetPrefixLimit(itemState) {\r\n  return GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetSuffixLimit(itemState) {\r\n  return GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetAffixLimit(itemState) {\r\n  return GetAffixLimitForRarity(itemState.baseItemId, itemState.rarity); \r\n}\r\n\r\nfunction CanModBeAddedToItem(modId, itemState) {\r\n  const mod = mods[modId];\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  if (mod[\"domain\"] !== baseItem[\"domain\"]) {\r\n    return false;\r\n  }\r\n  if (mod[\"required_level\"] > itemState.level) {\r\n    return false;\r\n  }\r\n  if (mod[\"generation_type\"] === \"prefix\") {\r\n    if (GetPrefixLimit(itemState) <= GetPrefixCount(itemState)) {\r\n      return false;\r\n    }\r\n  }\r\n  else if (mod[\"generation_type\"] === \"suffix\") {\r\n    if (GetSuffixLimit(itemState) <= GetSuffixCount(itemState)) {\r\n      return false;\r\n    }\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n  const modGroup = mod[\"group\"];\r\n  if (modGroup && modGroup !== \"\") {\r\n    for (const affix of itemState.affixes) {\r\n      const existingMod = mods[affix.id];\r\n      if (existingMod[\"group\"] === modGroup) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetValidModsForItem(itemState) {\r\n  const tags = GetItemTags(itemState);\r\n  let validMods = [];\r\n  for (const modId in mods) {\r\n    if (!CanModBeAddedToItem(modId, itemState)) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(modId, tags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push(modId);\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction GetValidModsForItemWithPositiveWeightTag(itemState, tag) {\r\n  const tags = GetItemTags(itemState);\r\n  let validMods = [];\r\n  for (const modId in mods) {\r\n    const mod = mods[modId];\r\n    if (!(mod[\"spawn_weights\"].find(x => x[\"tag\"] === tag && x[\"weight\"] > 0))) {\r\n      continue;\r\n    }\r\n\r\n    if (!CanModBeAddedToItem(modId, itemState)) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(modId, tags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push(modId);\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction CreateWeightedModPool(modIds, tags) {\r\n  let modPool = {\r\n    totalWeight : 0,\r\n    mods : []\r\n  }\r\n\r\n  for (const modId of modIds) {\r\n    let modWeight = GetSpawnWeightForMod(modId, tags);\r\n    modPool.mods.push({\r\n      id : modId,\r\n      weight : modWeight\r\n    });\r\n    modPool.totalWeight += modWeight;\r\n  }\r\n\r\n  return modPool;\r\n}\r\n\r\nfunction PickModFromWeightedModPool(modPool, rng) {\r\n  const randRoll = randRange(rng, 0, modPool.totalWeight - 1);\r\n  let weightAccum = 0;\r\n\r\n  for (const mod of modPool.mods) {\r\n    const modEndWeight = weightAccum + mod.weight;\r\n    if (randRoll < modEndWeight) {\r\n      return mod.id;\r\n    }\r\n    weightAccum = modEndWeight;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction GetInfluenceTag(baseItemId, influence) {\r\n  const baseItem = base_items[baseItemId];\r\n  const baseItemClass = baseItem[\"item_class\"];\r\n  if (baseItemClass in item_classes) {\r\n    const influenceTagId = influence + \"_tag\";\r\n    if (influenceTagId in item_classes[baseItemClass]) {\r\n      const influenceTag = item_classes[baseItemClass][influenceTagId];\r\n      if (influenceTag) {\r\n        return influenceTag;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetAddedTags(modId) {\r\n  return mods[modId][\"adds_tags\"];\r\n}\r\n\r\nfunction GetBaseItemTags (itemState) {\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  let tags = [];\r\n  tags = tags.concat(baseItem[\"tags\"]);\r\n  for (const influence of itemState.influences) {\r\n    const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n    if (influenceTag) {\r\n      tags.push(influenceTag);\r\n    }\r\n  }\r\n  for (const implicit of itemState.implicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction GetItemTags(itemState) {\r\n  let tags = GetBaseItemTags(itemState);\r\n  for (const affix of itemState.affixes) {\r\n    tags = tags.concat(GetAddedTags(affix.id));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction RollModValues(modId, rng) {\r\n  let statRolls = [];\r\n  const mod = mods[modId];\r\n  for (const stat of mod[\"stats\"]) {\r\n    statRolls.push(randRange(rng, stat[\"min\"], stat[\"max\"]));\r\n  }\r\n  return statRolls;\r\n}\r\n\r\nfunction GetTierForMod(itemState, modId) {\r\n  const mod = mods[modId];\r\n  if (mod[\"is_essence_only\"]) {\r\n    return [0, 1]\r\n  }\r\n\r\n  if (mod[\"generation_type\"] === \"unique\") {\r\n    return [0, 1]\r\n  }\r\n\r\n  let modTier = 0;\r\n  let modCount = 1;\r\n  let modCountAtItemLevel = 1;\r\n  const modLevel = mod[\"required_level\"];\r\n  const baseItemTags = GetBaseItemTags(itemState);\r\n  for (const otherModId in mods) {\r\n    if (otherModId === modId) {\r\n      continue;\r\n    }\r\n    const otherMod = mods[otherModId];\r\n    if (otherMod[\"domain\"] !== mod[\"domain\"]) {\r\n      continue;\r\n    }\r\n    if (otherMod[\"group\"] !== mod[\"group\"]) {\r\n      continue;\r\n    }\r\n    if (otherMod[\"type\"] !== mod[\"type\"]) {\r\n      continue;\r\n    }\r\n    if (otherMod[\"is_essence_only\"]) {\r\n      continue;\r\n    }\r\n    if (GetSpawnWeightForMod(otherModId, baseItemTags) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    modCount++;\r\n\r\n    if (otherMod[\"required_level\"] <= itemState.level) {\r\n      modCountAtItemLevel++;\r\n    }\r\n\r\n    if (otherMod[\"required_level\"] > modLevel) {\r\n      modTier++;\r\n    }\r\n  }\r\n\r\n  return [modTier, modCount, modCountAtItemLevel];\r\n}\r\n\r\nfunction CreateRolledMod(itemState, modId, rng) {\r\n  const tierValues = GetTierForMod(itemState, modId);\r\n  return {\r\n    id : modId,\r\n    values : RollModValues(modId, rng),\r\n    tier : tierValues[0],\r\n    tierCount : tierValues[1],\r\n    tierCountAtItemLevel : tierValues[2]\r\n  }  \r\n}\r\n\r\nfunction RollRareName(itemState, rng) {\r\n  const itemData = base_items[itemState.baseItemId];\r\n  return RareItemNames.GenerateRareName(itemData, rng);\r\n}\r\n\r\nfunction RollRareAffixCount(baseItemId, rng) {\r\n  const maxAffixCount = GetAffixLimitForRarity(baseItemId, \"rare\");\r\n  if (maxAffixCount === 6) {\r\n    // Number of mods from data mined note (source: POE Discord, #3rd-party-tool-dev)\r\n    // \"1/12 chance for 6 mods, 4/12 chance for 5 mods, and 7/12 chance for 6 mods\"\r\n    const randInt = randRange(rng, 0, 11);\r\n    if (randInt < 7) {\r\n      return 4;\r\n    }\r\n    if (randInt < 11) {\r\n      return 5;\r\n    }\r\n    return 6;\r\n  }\r\n  else if (maxAffixCount === 4) {\r\n    // Number of mods from data mined note (source: reddit, https://www.reddit.com/r/pathofexile/comments/8fxnlu/chance_of_getting_specific_number_of_mods_via/)\r\n    // \"for jewels: 65/35\"\r\n    const randInt = randRange(rng, 0, 99);\r\n    if (randInt < 65) {\r\n      return 3;\r\n    }\r\n    return 4;\r\n  }\r\n  else if (maxAffixCount > 0) {\r\n    // Unexpected situation, roll pure random\r\n    return randRange(rng, 1, maxAffixCount);\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction cloneMods(modArray) {\r\n  let newArray = Array(modArray.length);\r\n  for (const oldModIdx in modArray) {\r\n    newArray[oldModIdx] = { ...modArray[oldModIdx], values : [ ...modArray[oldModIdx].values ]};\r\n  }\r\n  return newArray;\r\n}\r\n\r\nfunction cloneItemState(itemState) {\r\n  return { \r\n    ...itemState, \r\n    influences : itemState.influences.slice(),\r\n    implicits : cloneMods(itemState.implicits), \r\n    corruptions : cloneMods(itemState.corruptions), \r\n    affixes : cloneMods(itemState.affixes) \r\n  };\r\n}\r\n\r\nfunction CreateItem(baseItemId, level, rng) {\r\n  let itemState = {\r\n    generatedName : \"\",\r\n    baseItemId : baseItemId,\r\n    level : level,\r\n    rarity : \"normal\",\r\n    corrupted : false,\r\n    quality : 0,\r\n    influences : [],\r\n    implicits : [],\r\n    corruptions : [],\r\n    affixes : []\r\n  }  \r\n\r\n  // Add and roll implicits\r\n  const baseItem = base_items[baseItemId];\r\n  for (const implicitId of baseItem[\"implicits\"]) {\r\n    itemState.implicits.push(CreateRolledMod(itemState, implicitId, rng));\r\n  }\r\n\r\n  return itemState;\r\n}\r\n\r\nfunction AddRandomModFromList(itemState, mods, rng) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const itemTags = GetItemTags(newItemState);\r\n  const weightedModPool = CreateWeightedModPool(mods, itemTags);\r\n  const modId = PickModFromWeightedModPool(weightedModPool, rng);\r\n  if (!modId) {\r\n    return [false, itemState];\r\n  }\r\n  newItemState.affixes.push(CreateRolledMod(itemState, modId, rng));\r\n  return [true, newItemState];  \r\n}\r\n\r\nfunction AddRandomMod(itemState, rng) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const validMods = GetValidModsForItem(newItemState);\r\n  return AddRandomModFromList(itemState, validMods, rng);\r\n}\r\n\r\nconst generationTypeOrder = {\r\n  \"unique\": 0,\r\n  \"prefix\": 1,\r\n  \"suffix\": 2,\r\n};\r\n\r\nfunction ModComparer (a, b) {\r\n  const modA = mods[a.id];\r\n  const modB = mods[b.id];\r\n\r\n  const modAGenerationType = modA[\"generation_type\"];\r\n  const modBGenerationType = modB[\"generation_type\"];\r\n  if (modAGenerationType !== modBGenerationType) {\r\n    if (modAGenerationType in generationTypeOrder && modBGenerationType in generationTypeOrder) {\r\n      return generationTypeOrder[modAGenerationType] - generationTypeOrder[modBGenerationType];\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const modAFirstStatId = modA[\"stats\"].length > 0 ? modA[\"stats\"][0][\"id\"] : \"\";\r\n  const modBFirstStatId = modB[\"stats\"].length > 0 ? modB[\"stats\"][0][\"id\"] : \"\";\r\n  if (modAFirstStatId !== modBFirstStatId) {\r\n    if (modAFirstStatId.length === 0) {\r\n      return -1;\r\n    }\r\n    else if (modBFirstStatId.length === 0) {\r\n      return 1;\r\n    }\r\n\r\n    // This is likely to be s-l-o-w, first pass impl only\r\n    let modAFirstStatIdx = -1;\r\n    let modBFirstStartIdx = -1;\r\n    const statKeys = Object.keys(stats);\r\n    for (let statIdx = 0; statIdx < statKeys.length; ++statIdx) {\r\n      const statKey = statKeys[statIdx];\r\n      if (statKey === modAFirstStatId) {\r\n        modAFirstStatIdx = statIdx;\r\n      }\r\n      else if (statKey === modBFirstStatId) {\r\n        modBFirstStartIdx = statIdx;\r\n      }\r\n      if (modAFirstStatIdx >= 0 && modBFirstStartIdx >= 0) {\r\n        break;\r\n      }\r\n    }\r\n    return (modAFirstStatIdx - modBFirstStartIdx);\r\n  }\r\n\r\n  const modARequiredLevel = modA[\"required_level\"];\r\n  const modBRequiredLevel = modB[\"required_level\"];\r\n  if (modARequiredLevel !== modBRequiredLevel) {\r\n    return -(modARequiredLevel - modBRequiredLevel);\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction SortMods(modList) {\r\n  let sortedList = cloneMods(modList);\r\n  sortedList.sort(ModComparer);\r\n  return sortedList;\r\n}\r\n\r\nfunction CanAddInfluenceToItem(itemState, influence) {\r\n  return GetInfluenceTag(itemState.baseItemId, influence) != null;\r\n}\r\n\r\nfunction AddInfluenceToItem(itemState, influence) {\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newState = cloneItemState(itemState);\r\n  newState.influences.push(influence);\r\n  return [true, newState];\r\n}\r\n\r\nfunction CanScourItem(itemState) {\r\n  if (itemState.rarity === \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction ScourItem(itemState, rng) {\r\n  if (!CanScourItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, { ...cloneItemState(itemState), generatedName : \"\", rarity : \"normal\", affixes : [] }];\r\n}\r\n\r\nfunction CanTransmutationItem(itemState) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"magic\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction TransmutationItem(itemState, rng) {\r\n  if (!CanTransmutationItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"magic\" };\r\n  const numMods = randRange(rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAlterationItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlterationItem(itemState, rng) {\r\n  if (!CanAlterationItem(itemState)) {\r\n    return [0, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [] };\r\n  const numMods = randRange(rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAugmentationItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AugmentationItem(itemState, rng) {\r\n  if (!CanAugmentationItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanRegalItem(itemState) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction RegalItem(itemState, rng) {\r\n  if (!CanRegalItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let rareItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, rng) };\r\n  const [result, newItemState] = AddRandomMod(rareItemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAlchemyItem(itemState) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlchemyItem(itemState, rng) {\r\n  if (!CanAlchemyItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, rng) };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n  newItemState.generatedName = RollRareName(itemState, rng);\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanChaosItem(itemState) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ChaosItem(itemState, rng) {\r\n  if (!CanChaosItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [], generatedName : RollRareName(itemState, rng)  };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, rng)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedItem(itemState) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction ExaltedItem(itemState, rng) {\r\n  if (!CanExaltedItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, rng);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedWithInfluenceItem(itemState, influence) {\r\n  if (itemState.influences.length > 0) {\r\n    return false;\r\n  }\r\n  if (!CanExaltedItem(itemState)) {\r\n    return false;\r\n  }\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsForItemWithPositiveWeightTag(newItemState, influenceTag);\r\n  if (validMods.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ExaltedWithInfluenceItem(itemState, rng, influence) {\r\n  if (!CanExaltedWithInfluenceItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsForItemWithPositiveWeightTag(newItemState, influenceTag);\r\n  return AddRandomModFromList(newItemState, validMods, rng);\r\n}\r\n\r\nfunction CanAnnulmentItem(itemState) {\r\n  if (itemState.rarity === \"normal\" || itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState) === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AnnulmentItem(itemState, rng) {\r\n  if (!CanAnnulmentItem(itemState)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  const numAffixes = GetAffixCount(newItemState);\r\n  const affixIdxToRemove = randRange(rng, 0, numAffixes - 1);\r\n  newItemState.affixes.splice(affixIdxToRemove, 1);\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanBlessedItem(itemState) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.implicits.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction BlessedItem(itemState, rng) {\r\n  if (!CanBlessedItem(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let implicit of newItemState.implicits) {\r\n    implicit.values = RollModValues(implicit.id, rng);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanDivineItem(itemState) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.affixes.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction DivineItem(itemState, rng) {\r\n  if (!CanDivineItem(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let affix of newItemState.affixes) {\r\n    affix.values = RollModValues(affix.id, rng);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CraftingButton(props) {\r\n  return <button className=\"button\" onClick={props.onClick} disabled={!props.enabled}>{props.label}</button>;\r\n}\r\n\r\nclass TheoryCrafter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.testMap = {\r\n      \"scour\" : CanScourItem,\r\n      \"transmute\" : CanTransmutationItem,\r\n      \"alt\" : CanAlterationItem,\r\n      \"aug\" : CanAugmentationItem,\r\n      \"regal\" : CanRegalItem,\r\n      \"alch\" : CanAlchemyItem,\r\n      \"chaos\" : CanChaosItem,\r\n      \"exalt\" : CanExaltedItem,\r\n      \"exalt_crusader\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState) => CanExaltedWithInfluenceItem(itemState, \"warlord\"),\r\n      \"annul\" : CanAnnulmentItem,\r\n      \"bless\" : CanBlessedItem,\r\n      \"divine\" : CanDivineItem,\r\n    }\r\n\r\n    this.actionMap = {\r\n      \"scour\" : ScourItem,\r\n      \"transmute\" : TransmutationItem,\r\n      \"alt\" : AlterationItem,\r\n      \"aug\" : AugmentationItem,\r\n      \"regal\" : RegalItem,\r\n      \"alch\" : AlchemyItem,\r\n      \"chaos\" : ChaosItem,\r\n      \"exalt\" : ExaltedItem,\r\n      \"exalt_crusader\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState, rng) => ExaltedWithInfluenceItem(itemState, rng, \"warlord\"),\r\n      \"annul\" : AnnulmentItem,\r\n      \"bless\" : BlessedItem,\r\n      \"divine\" : DivineItem,\r\n    }\r\n\r\n    this.rng = seedrandom();\r\n    const normalItemState = CreateItem(\"Metadata/Items/Armours/Boots/BootsAtlas1\", 100, this.rng);\r\n    this.state = this.initState(normalItemState);\r\n  }\r\n\r\n  initState(initItemState) {\r\n    return {\r\n      itemStateHistory : [ { itemState: initItemState, action : \"\" } ],\r\n      itemStateHistoryIdx : 0,\r\n      lastCommand : \"\",\r\n      selectedBaseId : initItemState.baseItemId,\r\n      selectedBaseLevel : initItemState.level,\r\n      sortMods : false\r\n    };\r\n  }\r\n\r\n  pushState(newState, actionName) {\r\n    return { ...this.state, itemStateHistory : [ ...this.state.itemStateHistory, { itemState: newState, action : actionName } ] };\r\n  }\r\n\r\n  getState() {\r\n    return this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState;\r\n  }\r\n\r\n  canUndoState() {\r\n    return this.state.itemStateHistoryIdx > 0;\r\n  }\r\n\r\n  getUndoLabel() {\r\n    if (!this.canUndoState()) {\r\n      return \"Undo\";\r\n    }\r\n    return \"Undo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  undoState() {\r\n    if (this.state.itemStateHistoryIdx > 0)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx - 1 });\r\n    }\r\n  }\r\n\r\n  canRerollAction() {\r\n    return (this.state.itemStateHistory[this.state.itemStateHistoryIdx].action !== \"\") \r\n      && (this.state.itemStateHistoryIdx > 0);\r\n  }\r\n\r\n  getRerollLabel() {\r\n    if (!this.canRerollAction()) {\r\n      return \"Reroll Action\";\r\n    }\r\n    return \"Reroll \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  rerollAction() {\r\n    if (!this.canRerollAction()) {\r\n      return;\r\n    }\r\n    const action = this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n    const previousItemState = this.state.itemStateHistory[this.state.itemStateHistoryIdx - 1].itemState;\r\n    const canPerformAction = this.testMap[action](previousItemState);\r\n    if (!canPerformAction) {\r\n      return;\r\n    }\r\n    const result = this.actionMap[action](previousItemState, this.rng);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutStateAt(result[1], action, this.state.itemStateHistoryIdx));\r\n    }\r\n  }\r\n\r\n  canRedoState() {\r\n    return this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1;\r\n  }\r\n\r\n  getRedoLabel() {\r\n    if (!this.canRedoState()) {\r\n      return \"Redo\";\r\n    }\r\n    return \"Redo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx + 1].action;\r\n  }\r\n\r\n  redoState() {\r\n    if (this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx + 1 });\r\n    }\r\n  }\r\n\r\n  insertAndCutStateAt(newState, actionName, index) {\r\n    const newStateHistory = this.state.itemStateHistory.slice(0, index);\r\n    newStateHistory.push( { itemState: newState, action : actionName } );\r\n    return { ...this.state, itemStateHistory : newStateHistory, itemStateHistoryIdx : index };    \r\n  }\r\n\r\n  insertAndCutState(newState, actionName) {\r\n    return this.insertAndCutStateAt(newState, actionName, this.state.itemStateHistoryIdx + 1);\r\n  }\r\n\r\n  canPerformAction(actionName) {\r\n    return this.testMap[actionName](this.getState());\r\n  }\r\n\r\n  performAction(actionName) {\r\n    const result = this.actionMap[actionName](this.getState(), this.rng);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutState(result[1], actionName));\r\n    }\r\n  }\r\n\r\n  handleSelectedBaseChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseId : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectList() {\r\n    const baseItems = {}\r\n    for (const baseItemId in base_items) {\r\n      if (base_items[baseItemId][\"release_state\"] === \"released\") {\r\n        const domain = base_items[baseItemId][\"domain\"];\r\n        if (domain === \"item\" || domain === \"flask\") {\r\n          baseItems[baseItemId] = baseItemId.slice(baseItemId.lastIndexOf('/') + 1);\r\n        }\r\n      }\r\n    }\r\n    return <select value={this.state.selectedBaseId} onChange={(x) => this.handleSelectedBaseChanged(x)} key=\"baseItemSelector\">\r\n      { Object.keys(baseItems).map( (k) => <option value={k} key={k}>{baseItems[k]}</option> ) }\r\n    </select>;\r\n  }\r\n\r\n  handleSelectedBaseLevelChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseLevel : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectLevel() {\r\n    return <input value={this.state.selectedBaseLevel} onChange={(x) => this.handleSelectedBaseLevelChanged(x)} key=\"baseItemLevelInput\"/>;\r\n  }\r\n\r\n  handleBaseSelectButtonClicked() {\r\n    const normalItemState = CreateItem(this.state.selectedBaseId, this.state.selectedBaseLevel, this.rng);\r\n    this.setState({ ...this.initState(normalItemState), sortMods: this.state.sortMods });\r\n  }\r\n\r\n  RenderBaseSelectButton() {\r\n    return <button onClick={() => this.handleBaseSelectButtonClicked()} key=\"baseItemCreateButton\">Create New Item</button>;\r\n  }\r\n\r\n  RenderCraftingButton(actionName, label) {\r\n    return <CraftingButton onClick={ () => this.performAction(actionName) } enabled={ this.canPerformAction(actionName) } label={label} key={actionName} />\r\n  }\r\n\r\n  handleSortModsToggled(e) {\r\n    this.setState( {...this.state, sortMods : e.target.checked} );\r\n  }\r\n\r\n  render() {\r\n    return [\r\n        <div key=\"baseSelection\">\r\n          { [\r\n            this.RenderBaseSelectList(),\r\n            this.RenderBaseSelectLevel(),\r\n            this.RenderBaseSelectButton(),\r\n          ] }\r\n        </div>,\r\n        <div key=\"craftingButtons\">\r\n          { [\r\n            this.RenderCraftingButton(\"scour\", \"Scour\"),\r\n            this.RenderCraftingButton(\"transmute\", \"Transmutation\"),\r\n            this.RenderCraftingButton(\"aug\", \"Augmentation\"),\r\n            this.RenderCraftingButton(\"alt\", \"Alteration\"),\r\n            this.RenderCraftingButton(\"regal\", \"Regal\"),\r\n            this.RenderCraftingButton(\"alch\", \"Alchemy\"),\r\n            this.RenderCraftingButton(\"chaos\", \"Chaos\"),\r\n            this.RenderCraftingButton(\"exalt\", \"Exalted\"),\r\n            this.RenderCraftingButton(\"exalt_crusader\", \"Crusader Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_hunter\", \"Hunter Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_redeemer\", \"Redeemer Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_warlord\", \"Warlord Exalt\"),\r\n            this.RenderCraftingButton(\"annul\", \"Annulment\"),\r\n            this.RenderCraftingButton(\"bless\", \"Blessed\"),\r\n            this.RenderCraftingButton(\"divine\", \"Divine\")\r\n          ] }\r\n        </div>,\r\n        <div key=\"undoDiv\"><CraftingButton onClick={ () => this.undoState() } enabled={ this.canUndoState() } label={ this.getUndoLabel() } key=\"undo\" /></div>,\r\n        <div key=\"redoDiv\"><CraftingButton onClick={ () => this.redoState() } enabled={ this.canRedoState() } label={ this.getRedoLabel() } key=\"redo\" /></div>,\r\n        <div key=\"rerollDiv\"><CraftingButton onClick={ () => this.rerollAction() } enabled={ this.canRerollAction() } label={ this.getRerollLabel() } key=\"undo\" /></div>,\r\n        <CraftedItem itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } sortMods={this.state.sortMods} key=\"craftedItem\" />,\r\n        <div key=\"sortMods\"><input type=\"checkbox\" onChange={(e) => this.handleSortModsToggled(e)} checked={this.state.sortMods} /><span style={{color: 'white'}}>Sort Mods</span></div>\r\n    ]\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <TheoryCrafter />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}