{"version":3,"sources":["Translation.js","RareItemnames.js","ModGroups.js","App.js","serviceWorker.js","index.js"],"names":["TranslationHelper","IndexHandlers","v","toFixed","Math","floor","stringformat","fmt","args","Array","prototype","slice","call","arguments","replace","match","number","ModTypeTranslationLineOverrides","GetTranslationLinesForMod","translationJson","mod","values","consumedIdxs","Set","translationLines","statIdx","has","statObj","statId","translationIdx","add","translation","translationStatIdx","findIndex","x","translationLine","numStatsInTranslation","length","fill","addlStatIdx","addlStat","addlStatId","addlStatTranslationIdx","push","GetTranslationRuleForLine","line","translationRule","conditionsFailed","condition","value","ApplyIndexHandlers","indexHandlers","handler","this","GetStringForTranslationRule","rule","stringReplacementForValues","replacementStrings","replacementMin","replacementMax","replacementValue","replacementCombined","GetStringsForTranslationLines","strings","lineIdx","concat","split","TranslateMod","type","TranslateModForGroup","RarePrefixes","RareSuffixes","GenerateRareName","itemData","rng","prefixIdx","suffixPool","includes","InfluenceLookupTables","influenceToTags","influence","tag","ModLookupTables","domainTable","groupedModTable","statLineIndices","tags","source","modId","domain","group","addToDomainTable","addToGroupedModTable","addStatLineIndices","addTags","addSource","statIndices","key","getGroupedTableKey","join","modData","getStatLineIndices","ParseModGroups","mods","stats","item_classes","mod_types","knownInfluences","influenceLookupTables","itemClassId","itemClass","influenceId","influenceTag","modLookupTables","statKeyToIndex","idx","statKey","stat","id","modTags","spawnWeight","get","randRange","minInclusive","maxInclusive","quick","PropertyLine","props","replacementIdx","replacementSpans","map","className","lineSplit","output","i","TipLine","ModLine","additionalClassName","ItemNameLine","topLine","bottomLine","ItemHeader","double","generatedName","itemTypeName","leftSymbolClass","influences","rightSymbolClass","CraftedItem","base_items","itemState","baseItemId","modInstance","generationType","context","toUpperCase","tierCount","tier","tierCountAtItemLevel","stat_translations","getStatLines","getTipLine","showMods","enchantments","sortMods","SortMods","getEnchantmentLine","baseImplicits","gildedImplicits","getImplicitLine","affixes","getAffixLine","groups","separatedGroups","separatoridx","rarity","getItemTypeName","level","getGroupsWithSeparators","getEnchantmentBoxes","getImplicitBoxes","getAffixBoxes","React","Component","ModListGroupLine","nextProps","nextState","collapsed","modWeight","prob","spanIdx","nameLineElements","nameLines","splice","tierClass","tierContents","affixLetter","probClass","probabilityClass","onClick","onGroupClicked","weight","ModListModLine","modTier","tierString","requiredLevel","ModGroup","modAndWeightGroup","modName","modTierInfo","GetTierForMod","lineClass","totalWeight","toLocaleString","undefined","style","minimumFractionDigits","groupWeight","reduce","total","groupName","minTier","maxTier","tierForMod","min","max","tierContentsString","probability","elementList","groupKey","renderModsInModGroup","modGroupClassName","groupSource","ModList","actionInfo","getActionInfoFunction","getActionInfoAdditionalParameters","modRollGroups","newItemState","cloneItemState","clearAffixes","setRarity","generateNewName","RollRareName","addInfluences","AddInfluenceToItem","rolls","modRoll","modsAndWeights","GetValidModsAndWeightsForItem","weightParameters","forceWeights","GetModRollGroupsForAction","modRolls","modGroups","sort","a","b","ModIdComparer","currentGroupIdx","currentGroupTableKey","modIdx","groupedTableKey","getGroupedTableKeyForMod","getSource","modRollIndex","label","expandedGroups","CanBaseItemHaveRarity","GetSpawnWeightForMod","GetPrefixCount","existingAffixCount","GetSuffixCount","GetAffixCount","GetPrefixLimitForRarity","baseItem","GetSuffixLimitForRarity","GetAffixLimitForRarity","GetAffixLimit","extendedParameters","validMods","GetBaseItemTags","affix","GetAddedTags","GetItemTags","rarityOverride","ignoreAffixLimits","ignoreAffixTypes","forceAffixTypes","requiredPositiveWeightTag","negativeWeightMultipliers","positiveWeightMultipliers","ignoreExistingGroups","ignoreSpawnWeight","ignoreRequiredLevel","addedMods","forcedModIds","hasPrefixSlots","hasSuffixSlots","modIds","getDomainTable","existingModGroups","existingMod","find","modGroup","getTags","modTag","totalPositiveWeightMultiplier","GetInfluenceTag","baseItemClass","influenceTagId","implicit","RollModValues","rollsLucky","statRolls","rollOne","rollTwo","modCount","modCountAtItemLevel","modLevel","baseItemTags","otherModIds","getGroupedTable","otherModId","otherMod","CreateRolledMod","tierValues","RareItemNames","cloneMods","modArray","newArray","oldModIdx","corruptions","CreateItem","corrupted","quality","implicitId","PickRandomModFromListAndWeights","modPool","randRoll","weightAccum","modEndWeight","PickModFromWeightedModPool","modAndWeight","CreateWeightedModPool","generationTypeOrder","sourceOrder","modA","modB","modAGenerationType","modBGenerationType","modASource","modBSource","aStatIndices","bStatIndices","aNumStats","bNumStats","modARequiredLevel","modBRequiredLevel","modList","sortedList","ModComparer","CanAddInfluenceToItem","newState","AffixCountRule","ActionInfo","affixCountRule","affixCount","ModRollInfo","modType","rollSelectionChance","fillRemainingAffixRolls","TryApplyAction","success","postInfluenceItemState","maxAffixCount","RollRareAffixCount","affixRollCount","rolledAffixes","modRollIdx","RollOnModRolls","CanScourItem","ScourItem","CanTransmutationItem","GetTransmutationActionInfo","TransmutationItem","CanAlterationItem","GetAlterationActionInfo","AlterationItem","CanAugmentationItem","GetAugmentationActionInfo","AugmentationItem","CanRegalItem","GetRegalActionInfo","RegalItem","CanAlchemyItem","GetAlchemyActionInfo","AlchemyItem","CanChaosItem","GetChaosActionInfo","ChaosItem","CanExaltedItem","GetExaltedActionInfo","ExaltedItem","CanExaltedWithInfluenceItem","GetExaltedWithInfluenceActionInfo","ExaltedWithInfluenceItem","CanAnnulmentItem","AnnulmentItem","numAffixes","affixIdxToRemove","CanBlessedItem","BlessedItem","CanDivineItem","DivineItem","CanFossilItem","fossilTypes","fossilId","fossil","fossils","hasAllowedTag","allowedTag","forbiddenTag","GetWeightParametersForFossils","forcedModLists","gildedFossilMods","negativeTagMultipliers","positiveTagMultipliers","corruptedEssenceChances","addsEnchant","negativeWeightMod","weightMultiplier","positiveWeightMod","GetRollsForFossil","mockItemState","forcedModList","name","essenceModIds","essenceId","essences","essence","corruptedEssenceChance","GetFossilActionInfo","FossilItem","NormalButton","disabled","enabled","CraftingButton","aria-label","itemTooltip","data-balloon-pos","data-balloon-nofocus","left","right","itemUrl","src","TheoryCrafterContext","modDatabase","ModGroups","TheoryCrafter","testMap","getActionInfoMap","actionMap","theoryCrafterContext","_mods","seedrandom","normalItemState","state","initState","initItemState","itemStateHistory","action","itemStateHistoryIdx","lastCommand","selectedBaseId","selectedBaseLevel","selectedFossils","selectedActionForModList","actionName","canUndoState","setState","canRerollAction","previousItemState","canPerformAction","performAction","canRedoState","index","newStateHistory","insertAndCutStateAt","splitAndTestAction","splitAction","splitLocationOverride","splitAndExecuteAction","result","insertAndCutState","e","target","baseItems","lastIndexOf","onChange","handleSelectedBaseChanged","Object","keys","k","handleSelectedBaseLevelChanged","handleBaseSelectButtonClicked","dropdownAction","buttonOnClick","getState","isEnabled","showDropDown","craftingButtons","currencyImage","console","log","itemArtSubPath","visual_identity","dds_file","extensionIdx","RenderCraftingButtonManual","checked","handleFossilSelectorClicked","isExpanded","newSet","delete","RenderBaseSelectList","RenderBaseSelectLevel","RenderBaseSelectButton","RenderFossilSelector","undoState","getUndoLabel","redoState","getRedoLabel","rerollAction","getRerollLabel","handleSortModsToggled","color","RenderCraftingButton","getActionInfoFunctionForModList","getAdditionalActionParametersForModList","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdd73ab4.chunk.js","sourcesContent":["export default class TranslationHelper {\r\n    static IndexHandlers = {\r\n        \"30%_of_value\": v => { return v * 0.3 },\r\n        \"60%_of_value\": v => { return v * 0.6 },\r\n        \"deciseconds_to_seconds\": v => { return v / 10 },\r\n        \"divide_by_one_hundred\": v => { return v / 100 },\r\n        \"divide_by_one_hundred_and_negate\": v => { return -v / 100 },\r\n        \"divide_by_one_hundred_2dp\": v => { return (v / 100).toFixed(2) },\r\n        \"milliseconds_to_seconds\": v => { return v / 1000 },\r\n        \"milliseconds_to_seconds_0dp\": v => { return (v / 1000).toFixed(0) },\r\n        \"milliseconds_to_seconds_1dp\": v => { return (v / 1000).toFixed(1) },\r\n        \"milliseconds_to_seconds_2dp\": v => { return (v / 1000).toFixed(2) },\r\n        \"milliseconds_to_seconds_2dp_if_required\": v => { return (v / 1000).toFixed(2) },\r\n        \"multiplicative_damage_modifier\": v => { return v + 100 },\r\n        \"multiplicative_permyriad_damage_modifier\": v => { return v / 100 + 100 },\r\n        \"negate\": v => { return -v },\r\n        \"old_leech_percent\": v => { return v / 5 },\r\n        \"old_leech_permyriad\": v => { return v / 500 },\r\n        \"per_minute_to_per_second\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_0dp\": v => { return (v / 60).toFixed(0) },\r\n        \"per_minute_to_per_second_1dp\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_2dp\": v => { return (v / 60).toFixed(2) },\r\n        \"per_minute_to_per_second_2dp_if_required\": v => { return (v / 60).toFixed(2) },\r\n        \"divide_by_two_0dp\": v => { return Math.floor(v / 2) },\r\n        \"divide_by_six\": v => { return v / 6 },\r\n        \"divide_by_ten_0dp\": v => { return Math.floor(v / 10) },\r\n        \"divide_by_twelve\": v => { return v / 12 },\r\n        \"divide_by_fifteen_0dp\": v => { return Math.floor(v / 15) },\r\n        \"divide_by_twenty_then_double_0dp\": v => { return Math.floor(v / 20) * 2 },\r\n        \"times_twenty\": v => { return v * 20 }\r\n    };\r\n\r\n    static stringformat = function(fmt) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        return fmt.replace(/{(\\d+)}/g, (match, number) => {\r\n            return args[0][number];\r\n        });\r\n    }\r\n\r\n    static ModTypeTranslationLineOverrides = {\r\n        \"DoubleModSellPrice1\" : [ \"Item sells for much more to vendors\", \"(3x Chaos Orbs)\" ],\r\n        \"DoubleModSellPrice2\" : [ \"Item sells for much more to vendors\", \"(Exalted Orb)\" ],\r\n        \"DoubleModSellPrice3\" : [ \"Item sells for much more to vendors\", \"(5x Orb of Alchemy)\" ],\r\n        \"DoubleModSellPrice4\" : [ \"Item sells for much more to vendors\", \"(3x Stacked Deck)\" ],\r\n        \"DoubleModSellPrice5\" : [ \"Item sells for much more to vendors\", \"(5x Wisdom / Alch / Chance / Transmute / Alt)\" ],\r\n        \"DoubleModSellPrice6\" : [ \"Item sells for much more to vendors\", \"(5x Albino Rhoa Feather)\" ],\r\n        \"DoubleModSellPrice7\" : [ \"Item sells for much more to vendors\", \"(1x Random Crafting Currency)\" ],\r\n        \"DoubleModSellPrice8\" : [ \"Item sells for much more to vendors\", \"(2x Mirror Shard)\" ],\r\n        \"DoubleModSellPrice9\" : [ \"Item sells for much more to vendors\", \"(5x Remnant of Corruption)\" ],\r\n    }\r\n\r\n    static GetTranslationLinesForMod = function(translationJson, mod, values = null) {\r\n        // End hacky mod translations\r\n        let consumedIdxs = new Set();\r\n        let translationLines = [];\r\n        for (let statIdx in mod[\"stats\"]) {\r\n            if (consumedIdxs.has(statIdx)) {\r\n                continue;\r\n            }\r\n            const statObj = mod[\"stats\"][statIdx];\r\n            const statId = statObj[\"id\"];\r\n            consumedIdxs.add(statIdx);\r\n\r\n            for (const translationIdx in translationJson) {\r\n                const translation = translationJson[translationIdx];\r\n                const translationStatIdx = translation[\"ids\"].findIndex((x => x === statId));\r\n                if (translationStatIdx >= 0) {\r\n                    let translationLine = {};\r\n                    translationLine[\"tidx\"] = translationIdx;\r\n                    const numStatsInTranslation = translation[\"ids\"].length;\r\n                    translationLine[\"mins\"] = Array(numStatsInTranslation).fill(0);\r\n                    translationLine[\"maxs\"] = Array(numStatsInTranslation).fill(0);\r\n                    if (values)\r\n                        translationLine[\"values\"] = Array(numStatsInTranslation).fill(0);\r\n\r\n                    translationLine[\"mins\"][translationStatIdx] = statObj[\"min\"];\r\n                    translationLine[\"maxs\"][translationStatIdx] = statObj[\"max\"];\r\n                    if (values)                    \r\n                        translationLine[\"values\"][translationStatIdx] = values[statIdx];\r\n\r\n                    for (let addlStatIdx in mod[\"stats\"]) {\r\n                        const addlStat = mod[\"stats\"][addlStatIdx];\r\n                        const addlStatId = addlStat[\"id\"];\r\n                        if (consumedIdxs.has(addlStatIdx)) {\r\n                            continue;\r\n                        }\r\n                        const addlStatTranslationIdx = translation[\"ids\"].findIndex((x => x === addlStatId));\r\n                        if (addlStatTranslationIdx > 0) {\r\n                            translationLine[\"mins\"][addlStatTranslationIdx] = addlStat[\"min\"];\r\n                            translationLine[\"maxs\"][addlStatTranslationIdx] = addlStat[\"max\"];\r\n                            if (values)                            \r\n                                translationLine[\"values\"][addlStatTranslationIdx] = values[addlStatIdx];\r\n\r\n                            consumedIdxs.add(addlStatIdx);\r\n                        }\r\n                    }\r\n                    translationLines.push(translationLine);\r\n                }\r\n            }\r\n        }\r\n        return translationLines;\r\n    }\r\n\r\n    static GetTranslationRuleForLine = function(translationJson, line) {\r\n        const translation = translationJson[line[\"tidx\"]][\"English\"];\r\n        for (const translationRule of translation) {\r\n            let conditionsFailed = false;\r\n            for (const statIdx in line[\"mins\"]) {\r\n                let condition = translationRule[\"condition\"][statIdx];\r\n                const value = line[\"mins\"][statIdx];\r\n                if (\"min\" in condition) {\r\n                    if (value < condition[\"min\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (\"max\" in condition) {\r\n                    if (value > condition[\"max\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!conditionsFailed) {\r\n                return translationRule;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static ApplyIndexHandlers = function(indexHandlers, value) {\r\n        for (const handler of indexHandlers) {\r\n            if (handler in this.IndexHandlers) {\r\n                value = this.IndexHandlers[handler](value)\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    static GetStringForTranslationRule = function(translationJson, rule, line, stringReplacementForValues = null) {\r\n        const translation = translationJson[line[\"tidx\"]];\r\n        let replacementStrings = Array(translation[\"ids\"].length);\r\n        for (const statIdx in translation[\"ids\"]) {\r\n            let replacementMin = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"mins\"][statIdx]);\r\n            let replacementMax = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"maxs\"][statIdx]);\r\n            let replacementValue = null;\r\n            if (\"values\" in line) {\r\n                replacementValue = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"values\"][statIdx]);\r\n            }\r\n\r\n            let replacementCombined = \"\";\r\n            if (replacementMin === replacementMax) {\r\n                if (stringReplacementForValues) {\r\n                    replacementCombined = stringReplacementForValues;\r\n                }\r\n                else {\r\n                    replacementCombined = replacementMin;\r\n                }\r\n            }\r\n            else {\r\n                if (stringReplacementForValues) {\r\n                    replacementMin = stringReplacementForValues;\r\n                    replacementMax = stringReplacementForValues;\r\n                    if (replacementValue) {\r\n                        replacementValue = stringReplacementForValues;\r\n                    }\r\n                }\r\n\r\n                replacementCombined = \"(\" + replacementMin + \"-\" + replacementMax + \")\";\r\n                if (replacementValue) {\r\n                    replacementCombined = replacementValue + replacementCombined;\r\n                }\r\n            }\r\n            replacementStrings[statIdx] = rule[\"format\"][statIdx].replace(\"#\", replacementCombined);\r\n        }\r\n        return this.stringformat(rule[\"string\"], replacementStrings);\r\n    }\r\n\r\n    static GetStringsForTranslationLines = function(translationJson, translationLines, stringReplacementForValues = null) {\r\n        let strings = [];\r\n        for (const lineIdx in translationLines) {\r\n            const translationRule = this.GetTranslationRuleForLine(translationJson, translationLines[lineIdx]);\r\n            if (translationRule) {\r\n                strings = strings.concat(this.GetStringForTranslationRule(translationJson, translationRule, translationLines[lineIdx], stringReplacementForValues).split(\"\\n\"));\r\n            }\r\n        }\r\n        return strings;\r\n    }\r\n\r\n    static TranslateMod = function(translationJson, mod, values = null) {\r\n        // Hacky mod translations go here!\r\n        if (mod.type in this.ModTypeTranslationLineOverrides) {\r\n            return [...this.ModTypeTranslationLineOverrides[mod.type]];\r\n        }\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, values);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines);\r\n    }\r\n\r\n    static TranslateModForGroup = function(translationJson, mod) {\r\n        // Hacky mod translations go here!\r\n        if (mod.type in this.ModTypeTranslationLineOverrides) {\r\n            return [...this.ModTypeTranslationLineOverrides[mod.type]];\r\n        }                \r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, null);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines, \"x\");\r\n    }    \r\n}","const RarePrefixes = [\r\n    \"Agony\", \"Apocalypse\", \"Armageddon\", \"Beast\", \"Behemoth\", \"Blight\", \"Blood\", \"Bramble\", \"Brimstone\", \"Brood\", \"Carrion\", \"Cataclysm\", \"Chimeric\", \"Corpse\", \"Corruption\", \"Damnation\", \"Death\", \"Demon\", \"Dire\", \"Dragon\", \"Dread\", \"Doom\", \"Dusk\", \"Eagle\", \"Empyrean\", \"Fate\", \"Foe\", \"Gale\", \"Ghoul\", \"Gloom\", \"Glyph\", \"Golem\", \"Grim\", \"Hate\", \"Havoc\", \"Honour\", \"Horror\", \"Hypnotic\", \"Kraken\", \"Loath\", \"Maelstrom\", \"Mind\", \"Miracle\", \"Morbid\", \"Oblivion\", \"Onslaught\", \"Pain\", \"Pandemonium\", \"Phoenix\", \"Plague\", \"Rage\", \"Rapture\", \"Rune\", \"Skull\", \"Sol\", \"Soul\", \"Sorrow\", \"Spirit\", \"Storm\", \"Tempest\", \"Torment\", \"Vengeance\", \"Victory\", \"Viper\", \"Vortex\", \"Woe\", \"Wrath\"\r\n];\r\n\r\nconst RareSuffixes = {\r\n    \"One Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"Two Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"One Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Two Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Sceptre\" : [\"Bane\", \"Blow\", \"Breaker\", \"Call\", \"Chant\", \"Crack\", \"Crusher\", \"Cry\", \"Gnarl\", \"Grinder\", \"Knell\", \"Ram\", \"Roar\", \"Smasher\", \"Song\", \"Spell\", \"Star\", \"Weaver\" ],\r\n    \"Staff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"FishingRod\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"Warstaff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Thrusting One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\",\"Stinger\", \"Thirst\" ],\r\n    \"Two Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Rune Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Claw\" : [\"Bane\", \"Bite\", \"Edge\", \"Fang\", \"Fist\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Roar\", \"Scratch\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Talons\", \"Thirst\" ],\r\n    \"Bow\" : [\"Arch\", \"Bane\", \"Barrage\", \"Blast\", \"Branch\", \"Breeze\", \"Fletch\", \"Guide\", \"Horn\", \"Mark\", \"Nock\", \"Rain\", \"Reach\", \"Siege\", \"Song\", \"Stinger\", \"Strike\", \"Thirst\", \"Thunder\", \"Twine\", \"Volley\", \"Wind\", \"Wing\" ],\r\n    \"Wand\" : [\"Bane\", \"Barb\", \"Bite\", \"Branch\", \"Call\", \"Chant\", \"Charm\", \"Cry\", \"Edge\", \"Gnarl\", \"Goad\", \"Needle\", \"Scratch\", \"Song\", \"Spell\", \"Spire\", \"Thirst\", \"Weaver\" ],\r\n\r\n    // Armor\r\n    \"Body Armour\" : [\"Carapace\", \"Cloak\", \"Coat\", \"Curtain\", \"Guardian\", \"Hide\", \"Jack\", \"Keep\", \"Mantle\", \"Pelt\", \"Salvation\", \"Sanctuary\", \"Shell\", \"Shelter\", \"Shroud\", \"Skin\", \"Suit\", \"Veil\", \"Ward\", \"Wrap\" ],\r\n    \"Helmet\" : [\"Brow\", \"Corona\", \"Cowl\", \"Crest\", \"Crown\", \"Dome\", \"Glance\", \"Guardian\", \"Halo\", \"Horn\", \"Keep\", \"Peak\", \"Salvation\", \"Shelter\", \"Star\", \"Veil\", \"Visage\", \"Visor\", \"Ward\" ],\r\n    \"Gloves\" : [\"Caress\", \"Claw\", \"Clutches\", \"Fingers\", \"Fist\", \"Grasp\", \"Grip\", \"Hand\", \"Hold\", \"Knuckle\", \"Mitts\", \"Nails\", \"Palm\", \"Paw\", \"Talons\", \"Touch\", \"Vise\" ],\r\n    \"Boots\" : [\"Dash\", \"Goad\", \"Hoof\", \"League\", \"March\", \"Pace\", \"Road\", \"Slippers\", \"Sole\", \"Span\", \"Spark\", \"Spur\", \"Stride\", \"Track\", \"Trail\", \"Tread\", \"Urge\" ],\r\n    // These share the 'Shield' item class, have to search for the 'focus' tag on the item\r\n    \"_Spirit Shield\" : [\"Ancient\", \"Anthem\", \"Call\", \"Chant\", \"Charm\", \"Emblem\", \"Guard\", \"Mark\", \"Pith\", \"Sanctuary\", \"Song\", \"Spell\", \"Star\", \"Ward\", \"Weaver\", \"Wish\" ],\r\n    \"_Other Shield\" : [\"Aegis\", \"Badge\", \"Barrier\", \"Bastion\", \"Bulwark\", \"Duty\", \"Emblem\", \"Fend\", \"Guard\", \"Mark\", \"Refuge\", \"Rock\", \"Rook\", \"Sanctuary\", \"Span\", \"Tower\", \"Watch\", \"Wing\" ],\r\n\r\n    // Accessories\r\n    \"Amulet\" : [\"Beads\", \"Braid\", \"Charm\", \"Choker\", \"Clasp\", \"Collar\", \"Idol\", \"Gorget\", \"Heart\", \"Locket\", \"Medallion\", \"Noose\", \"Pendant\", \"Rosary\", \"Scarab\", \"Talisman\", \"Torc\" ],\r\n    \"Ring\" : [\"Band\", \"Circle\", \"Coil\", \"Eye\", \"Finger\", \"Grasp\", \"Grip\", \"Gyre\", \"Hold\", \"Knot\", \"Knuckle\", \"Loop\", \"Nail\", \"Spiral\", \"Turn\", \"Twirl\", \"Whorl\" ],\r\n    \"Belt\" : [\"Bind\", \"Bond\", \"Buckle\", \"Clasp\", \"Cord\", \"Girdle\", \"Harness\", \"Lash\", \"Leash\", \"Lock\", \"Locket\", \"Shackle\", \"Snare\", \"Strap\", \"Tether\", \"Thread\", \"Trap\", \"Twine\" ],\r\n    \"Quiver\" : [\"Arrow\", \"Barb\", \"Bite\", \"Bolt\", \"Brand\", \"Dart\", \"Flight\", \"Hail\", \"Impaler\", \"Nails\", \"Needle\", \"Quill\", \"Rod\", \"Shot\", \"Skewer\", \"Spear\", \"Spike\", \"Spire\", \"Stinger\" ],\r\n\r\n    // No source for this! Just pulling some random names off poe.trade\r\n    \"Jewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n    \"AbyssJewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n};\r\n\r\nexport function GenerateRareName(itemData, rng) {\r\n    const prefixIdx = Math.floor(rng() * RarePrefixes.length);\r\n    const prefix = RarePrefixes[prefixIdx];\r\n    let suffixPool = [];\r\n    if (itemData[\"item_class\"] === \"Shield\") {\r\n        if (itemData[\"tags\"].includes(\"focus\")) {\r\n            suffixPool = RareSuffixes[\"_Spirit Shield\"];\r\n        }\r\n        else {\r\n            suffixPool = RareSuffixes[\"_Other Shield\"];\r\n        }\r\n    }\r\n    else {\r\n        suffixPool = RareSuffixes[itemData[\"item_class\"]];\r\n    }\r\n    const suffixIdx = Math.floor(rng() * suffixPool.length);\r\n    const suffix = suffixPool[suffixIdx];\r\n    return prefix + \" \" + suffix;\r\n}\r\n\r\nexport default { GenerateRareName };","// export class ModGroupTree {\r\n//     constructor() {\r\n//         this.domains = {};\r\n//     }\r\n\r\n//     add(modId, domain, group, type, positiveWeightTags, zeroWeightTags) {\r\n//         // { domains : { <domain_str> : <groupset> } }\r\n//         // <groupset> = { <group_str> : <typeset> }\r\n//         // <typeset>  = { <type_str> : { positiveTags : <tagset>, zeroTags : <tagset> } }\r\n//         // <tagset>   = { <tag_str> : [ <modId> ... ] }\r\n//         if (!(domain in this.domains)) {\r\n//             this.domains[domain] = {};\r\n//         }\r\n//         let groupSet = this.domains[domain];\r\n//         if (!(group in groupSet)) {\r\n//             groupSet[group] = {};\r\n//         }\r\n//         let typeSet = groupSet[group];\r\n//         if (!(type in typeSet)) {\r\n//             typeSet[type] = { positiveTags : {}, zeroTags: {} };\r\n//         }\r\n//         let positiveTagSet = typeSet[type].positiveTags;\r\n//         let zeroTagSet = typeSet[type].zeroTags;\r\n//         for (let tag of positiveWeightTags) {\r\n//             if (!(tag in positiveTagSet)) {\r\n//                 positiveTagSet[tag] = [];\r\n//             }\r\n//             positiveTagSet[tag].push(modId);\r\n//         }\r\n//         for (let tag of zeroWeightTags) {\r\n//             if (!(tag in zeroTagSet)) {\r\n//                 zeroTagSet[tag] = [];\r\n//             }\r\n//             zeroTagSet[tag].push(modId);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export class ModGroupSet {\r\n//     constructor() { \r\n//         this.groupSets = {};\r\n//     }\r\n\r\n//     add(modId, domain, group, type) {\r\n//         const key = domain + \"|\" + group + \"|\" + type;\r\n//         if (!(key in this.groupSets)) {\r\n//             this.groupSets[key] = [ modId ];\r\n//         }\r\n//         else {\r\n//             this.groupSets[key].push(modId);\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport class InfluenceLookupTables {\r\n    constructor() {\r\n        this.influenceToTags = {};\r\n    }\r\n\r\n    add(influence, tag) {\r\n        if (!(influence in this.influenceToTags)) {\r\n            this.influenceToTags[influence] = [];\r\n        }\r\n        if (!this.influenceToTags[influence].includes(tag)) {\r\n            this.influenceToTags[influence].push(tag);\r\n        }\r\n    }\r\n\r\n    get(influence) {\r\n        return this.influenceToTags[influence];\r\n    }\r\n}\r\n\r\nexport class ModLookupTables {\r\n    constructor() {\r\n        this.domainTable = {};\r\n        this.groupedModTable = {};\r\n        this.statLineIndices = {};\r\n        this.tags = {};\r\n        this.source = {};\r\n    }\r\n\r\n    add(modId, domain, group, type, source, statLineIndices, tags) {\r\n        this.addToDomainTable(modId, domain);\r\n        this.addToGroupedModTable(modId, domain, group, type, statLineIndices);\r\n        this.addStatLineIndices(modId, statLineIndices);\r\n        this.addTags(modId, tags);\r\n        this.addSource(modId, source);\r\n    }\r\n\r\n    addStatLineIndices(modId, statLineIndices)\r\n    {\r\n        this.statLineIndices[modId] = statLineIndices;\r\n    }\r\n\r\n    addTags(modId, tags) \r\n    {\r\n        this.tags[modId] = tags;\r\n    }\r\n\r\n    addSource(modId, source)\r\n    {\r\n        this.source[modId] = source;\r\n    }\r\n\r\n    addToDomainTable(modId, domain) {\r\n        if (!(domain in this.domainTable)) {\r\n            this.domainTable[domain] = [modId];\r\n        }\r\n        else {\r\n            this.domainTable[domain].push(modId);\r\n        }\r\n    }\r\n\r\n    addToGroupedModTable(modId, domain, group, type, statIndices) {\r\n        const key = this.getGroupedTableKey(domain, group, type, statIndices);\r\n        if (!(key in this.groupedModTable)) {\r\n            this.groupedModTable[key] = [ modId ];\r\n        }\r\n        else {\r\n            this.groupedModTable[key].push(modId);\r\n        }\r\n    }\r\n\r\n    getDomainTable(domain) {\r\n        return this.domainTable[domain];\r\n    }\r\n\r\n    getGroupedTable(domain, group, type, statIndices) {\r\n        return this.groupedModTable[this.getGroupedTableKey(domain, group, type, statIndices)];\r\n    }\r\n\r\n    getGroupedTableKey(domain, group, type, statIndices) {\r\n        return domain + \"|\" + group + \"|\" + type + \"|\" + statIndices.join(\"|\");\r\n    }\r\n\r\n    getGroupedTableKeyForMod(modId, modData) {\r\n        return this.getGroupedTableKey(modData[\"domain\"], modData[\"group\"], modData[\"type\"], this.getStatLineIndices(modId));\r\n    }\r\n\r\n    getStatLineIndices(modId) {\r\n        return this.statLineIndices[modId];\r\n    }\r\n\r\n    getTags(modId) {\r\n        return this.tags[modId];\r\n    }\r\n\r\n    getSource(modId) {\r\n        return this.source[modId];\r\n    }\r\n}\r\n\r\n// export class ModGroup {\r\n//     constructor(domain, group, type, positiveWeightTags, zeroWeightTags) {\r\n//         this.domain = domain;\r\n//         this.group = group;\r\n//         this.type = type;\r\n//         this.positiveWeightTags = new Set(positiveWeightTags);\r\n//         this.zeroWeightTags = new Set(zeroWeightTags);\r\n\r\n//         this.modIds = [];\r\n//     }\r\n\r\n//     equivalent(other) {\r\n//         return (other.domain == this.domain\r\n//             && other.group == this.group\r\n//             && other.type == this.type\r\n//             && this.setsCompatible(other.positiveWeightTags, this.positiveWeightTags)\r\n//             && this.setsCompatible(other.zeroWeightTags, this.zeroWeightTags)\r\n//         );\r\n//     }\r\n\r\n//     setsCompatible(a, b) {\r\n//         /*\r\n//         if (a.size !== b.size) {\r\n//             return false;\r\n//         }\r\n//         */\r\n//         for (const _a of a) {\r\n//             if (!b.has(_a)) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         for (const _b of b) {\r\n//             if (!a.has(_b)) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         return true;\r\n//     }\r\n// }\r\n\r\nexport function ParseModGroups(mods, stats, item_classes, mod_types) {\r\n    let knownInfluences = [\"crusader\", \"redeemer\", \"hunter\", \"warlord\", \"shaper\", \"elder\"];\r\n    let influenceLookupTables = new InfluenceLookupTables();\r\n    for (const itemClassId in item_classes) {\r\n        const itemClass = item_classes[itemClassId];\r\n        for (const influenceId of knownInfluences) {\r\n            const influenceTag = influenceId + \"_tag\";\r\n            if (influenceTag in itemClass && itemClass[influenceTag]) {\r\n                influenceLookupTables.add(influenceId, itemClass[influenceTag]);\r\n            }\r\n        }\r\n    }\r\n\r\n    let modLookupTables = new ModLookupTables();\r\n\r\n    let statKeyToIndex = {};\r\n    let idx = 0;\r\n    for (let statKey in stats) {\r\n        statKeyToIndex[statKey] = idx;\r\n        idx++;\r\n    }\r\n\r\n    for (const modId in mods) {\r\n        const mod = mods[modId];\r\n\r\n        let statIndices = [];\r\n        for (const stat of mod[\"stats\"]) {\r\n            statIndices.push(statKeyToIndex[stat.id]);\r\n        }\r\n\r\n        let modTags = [ ...mod_types[mod[\"type\"]][\"tags\"] ];\r\n\r\n        let source = \"\";\r\n        if (mod[\"domain\"] === \"delve\") {\r\n            source = \"delve\";\r\n        }\r\n        else if (mod[\"is_essence_only\"]) {\r\n            source = \"essence\";\r\n        }\r\n        else {\r\n            for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n                if (spawnWeight[\"weight\"] === 0) {\r\n                    continue;\r\n                }\r\n                for (const influenceId of knownInfluences) {\r\n                    const tagList = influenceLookupTables.get(influenceId);\r\n                    if (tagList.includes(spawnWeight[\"tag\"])) {\r\n                        source = influenceId;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        modLookupTables.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"], source, statIndices, modTags);\r\n\r\n        // // Filter mods from unaccepted domains\r\n        // if (!validModDomains.has(mod[\"domain\"])) {\r\n        //     continue;\r\n        // }\r\n\r\n        // if (!validModGenerationTypes.has(mod[\"generation_type\"])) {\r\n        //     continue;\r\n        // }\r\n        \r\n        // let positiveWeightTags = [];\r\n        // let zeroWeightTags = [];\r\n        // for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n        //     if (spawnWeight[\"weight\"] > 0) {\r\n        //         positiveWeightTags.push(spawnWeight[\"tag\"]);\r\n        //     }\r\n        //     else {\r\n        //         zeroWeightTags.push(spawnWeight[\"tag\"]);\r\n        //     }\r\n        // }\r\n\r\n        // // Filter un-rollable mods\r\n        // if (positiveWeightTags.length == 0) {\r\n        //     continue;\r\n        // }\r\n\r\n        // modGroupTree.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"], positiveWeightTags, zeroWeightTags);\r\n        // modGroupSet.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"]);\r\n\r\n        // let candidateModGroup = new ModGroup(mod[\"domain\"], mod[\"group\"], mod[\"type\"], positiveWeightTags, zeroWeightTags);\r\n        // let existingModGroup = null;\r\n        // for (let testExistingModGroup of modGroups) {\r\n        //     if (testExistingModGroup.equivalent(candidateModGroup)) {\r\n        //         existingModGroup = testExistingModGroup;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // if (existingModGroup === null) {\r\n        //     candidateModGroup.modIds.push(modId);\r\n        //     modGroups.push(candidateModGroup);\r\n        // }\r\n        // else {\r\n        //     existingModGroup.modIds.push(modId);\r\n        // }\r\n    }\r\n\r\n    // for (const modGroup of modGroups) {\r\n    //     console.log(\"{\" + modGroup.domain + \" \" + modGroup.group + \" \" + modGroup.type + \" +\" + modGroup.positiveWeightTags + \" -\" + modGroup.zeroWeightTags + \"} : \" + modGroup.modIds.length);\r\n    //     for (const modId of modGroup.modIds) {\r\n    //         console.log(\" - \" + modId);\r\n    //     }\r\n    // }\r\n    return modLookupTables;\r\n}\r\n\r\nexport default { ParseModGroups };","import React from 'react';\r\nimport './App.css';\r\nimport TranslationHelper from './Translation.js';\r\nimport seedrandom from 'seedrandom';\r\nimport RareItemNames from './RareItemnames.js';\r\nimport ModGroups from './ModGroups.js';\r\nimport 'balloon-css';\r\n\r\nimport base_items from './data/base_items.json';\r\nimport item_classes from './data/item_classes.json';\r\nimport fossils from './data/fossils.json';\r\nimport _mods from './data/mods.json';\r\nimport mod_types from './data/mod_types.json';\r\nimport stat_translations from './data/stat_translations.json';\r\nimport stats from './data/stats.json'\r\nimport essences from './data/essences.json'\r\n\r\nfunction randRange(rng, minInclusive, maxInclusive) {\r\n  return Math.floor(rng.quick() * (maxInclusive - minInclusive + 1)) + minInclusive;\r\n}\r\n\r\nfunction PropertyLine (props) {\r\n  let replacementIdx = 0;\r\n  let replacementSpans = props.values.map((x) => <span className=\"property\" key={replacementIdx++}>{x}</span>);\r\n  const lineSplit = props.line.split(/{}/g);\r\n  let output = [];\r\n  for (let i = 0; i < lineSplit.length - 1; ++i) {\r\n    output.push(lineSplit[i]);\r\n    output.push(replacementSpans[i]);\r\n  }\r\n  output.push(lineSplit[lineSplit.length - 1]);\r\n  return <div className=\"propertyLine\">{output}</div>;\r\n}\r\n\r\nfunction TipLine (props) {\r\n  return <div className=\"tipLine\">{props.line}</div>\r\n}\r\n\r\nfunction ModLine (props) {\r\n  let className = \"modLine\";\r\n  if (props.additionalClassName) {\r\n    className = className + \" \" + props.additionalClassName;\r\n  }\r\n  return <div className={className}>{props.line}</div>\r\n}\r\n\r\nfunction ItemNameLine (props) {\r\n  return [props.topLine && <div className=\"itemName\" key=\"itemName_top\">{props.topLine}</div>, props.bottomLine && <div className=\"itemName\" key=\"itemName_bottom\">{props.bottomLine}</div>];\r\n}\r\n\r\nfunction ItemHeader (props) {\r\n  const double = props.generatedName.length > 0 && props.itemTypeName.length > 0;\r\n  const leftSymbolClass = props.influences.length > 0 ? props.influences[0] : \"\";\r\n  const rightSymbolClass = props.influences.length > 1 ? props.influences[1] : leftSymbolClass;\r\n  return  <div className={\"header-border \" + (double ? \"double\" : \"single\")}>\r\n            <span className={\"l symbol \" + leftSymbolClass}></span>\r\n            <ItemNameLine topLine={props.generatedName} bottomLine={props.itemTypeName} key=\"nameLine\"/>\r\n            <span className={\"r symbol \" + rightSymbolClass}></span>\r\n          </div>\r\n  ;\r\n}\r\n\r\nclass CraftedItem extends React.Component {\r\n  getItemTypeName() {\r\n    return base_items[this.props.itemState.baseItemId][\"name\"];\r\n  }\r\n\r\n  getTipLine(modInstance, generationType) {\r\n    const mod = this.props.context.mods[modInstance.id];\r\n    let line = \"\";\r\n    if (generationType === \"prefix\" || generationType === \"suffix\") {\r\n      line = generationType[0].toUpperCase() + generationType.slice(1) + \" Modifier \\\"\" + mod[\"name\"] + \"\\\"\" + (modInstance.tierCount > 0 ? (\" (Tier: \" + (modInstance.tier + 1) + \" [\" + (modInstance.tierCount - modInstance.tierCountAtItemLevel + 1) + \"-\" + modInstance.tierCount + \"])\") : \"\");\r\n    }\r\n    else if (generationType === \"unique\" || generationType === \"implicit\") {\r\n      line = generationType[0].toUpperCase() + generationType.slice(1) + \" Modifier\";\r\n    }\r\n    else if (generationType === \"enchantment\") {\r\n      line = \"Labyrinth Enchantment\";\r\n    }\r\n    return <TipLine line={line} key={modInstance.id + \"_tip\"}/>;\r\n  }\r\n\r\n  getStatLines(modInstance, additionalClassName) {\r\n    const mod = this.props.context.mods[modInstance.id];\r\n    const values = modInstance.values;\r\n    const translationStrings = TranslationHelper.TranslateMod(stat_translations, mod, values);    \r\n    return translationStrings.map((x, i) => <ModLine additionalClassName={additionalClassName} line={x} key={modInstance.id + \"_mod_\" + i}/>);\r\n  }\r\n\r\n  getEnchantmentLine(modInstance) {\r\n    const statLines = this.getStatLines(modInstance);\r\n    if (statLines.length > 0) {\r\n      return [this.getTipLine(modInstance, \"enchantment\"), this.getStatLines(modInstance, \"enchantment\")];\r\n    }    \r\n  }\r\n\r\n  getEnchantmentBoxes() {\r\n    let showMods = this.props.itemState.enchantments;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(\r\n      x => <div className=\"modBox enchantment\" key={x.id}>{this.getEnchantmentLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getImplicitLine(modInstance) {\r\n    const statLines = this.getStatLines(modInstance);\r\n    if (statLines.length > 0) {\r\n      return [this.getTipLine(modInstance, \"implicit\"), this.getStatLines(modInstance)];\r\n    }\r\n  }\r\n\r\n  getImplicitBoxes() {\r\n    let showMods = [...this.props.itemState.baseImplicits, ...this.props.itemState.gildedImplicits];\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(\r\n      x => <div className=\"modBox implicit\" key={x.id}>{this.getImplicitLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getAffixLine(modInstance) {\r\n    return [this.getTipLine(modInstance, this.props.context.mods[modInstance.id][\"generation_type\"]), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getAffixBoxes() {\r\n    let showMods = this.props.itemState.affixes;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(    \r\n      x => <div className=\"modBox\" key={x.id}>{this.getAffixLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getGroupsWithSeparators(groups) \r\n  {\r\n    let separatedGroups = [];\r\n    let separatoridx = 0;\r\n    for (const group of groups) {\r\n      if (group.length > 0) {\r\n        separatedGroups.push(<div className=\"separator\" key={\"sep_\" + separatoridx} />);\r\n        separatoridx++;\r\n        separatedGroups = separatedGroups.concat(group);\r\n      }\r\n    }\r\n    return separatedGroups;\r\n  }\r\n\r\n  render() {\r\n    return <div className={\"craftedItem \" + this.props.itemState.rarity}>\r\n      <div className=\"content-box\">\r\n        <ItemHeader itemTypeName={this.getItemTypeName()} generatedName={this.props.itemState.generatedName} influences={this.props.itemState.influences} />\r\n        <PropertyLine line=\"Item Level: {}\" values={[this.props.itemState.level]} />\r\n        { this.getGroupsWithSeparators([this.getEnchantmentBoxes(), this.getImplicitBoxes(), this.getAffixBoxes()]) }\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\nclass ModListGroupLine extends React.Component {\r\n  // eslint-disable-next-line no-unused-vars\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.collapsed !== nextProps.collapsed\r\n      || this.props.modWeight !== nextProps.modWeight\r\n      || this.props.prob !== nextProps.prob;\r\n  }  \r\n  render() {\r\n    let spanIdx = 0;\r\n    let nameLineElements = this.props.nameLines.map( (x) => <span key={spanIdx++}>{x}</span>);\r\n    for (let i = 1; i < nameLineElements.length; i += 2) {\r\n      nameLineElements.splice(i, 0, <br key={\"br_\" + i}/>);\r\n    }\r\n\r\n    let tierClass = \"modTierContents\";\r\n    if (this.props.tierContents.length > 0) {\r\n      const affixLetter = this.props.tierContents[0];\r\n      if (affixLetter === \"p\") {\r\n        tierClass = tierClass + \" prefix\";\r\n      }\r\n      else if (affixLetter === \"s\") {\r\n        tierClass = tierClass + \" suffix\";\r\n      }\r\n    }\r\n\r\n    const probClass = \"modProb \" + this.props.probabilityClass;\r\n\r\n    return <div className=\"modGroupLine\" onClick={this.props.onGroupClicked}>\r\n      <div className=\"modTier\" key=\"modTier\">\r\n        { this.props.collapsed ? \"▶\" : \"▼\" }\r\n      </div>\r\n      <div className={tierClass} key=\"modTierContents\">\r\n        { this.props.tierContents }\r\n      </div>\r\n      <div className=\"modName\" key=\"modName\">\r\n        { nameLineElements }\r\n      </div>\r\n      <div className=\"modWeight\" key=\"modWeight\">\r\n        { this.props.weight }\r\n      </div>\r\n      <div className={probClass} key=\"modProb\">\r\n        { this.props.prob }\r\n      </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass ModListModLine extends React.Component {\r\n  // eslint-disable-next-line no-unused-vars\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.modTier !== nextProps.modTier\r\n      || this.props.modWeight !== nextProps.modWeight\r\n      || this.props.prob !== nextProps.prob;\r\n  }  \r\n  render() {\r\n    let spanIdx = 0;\r\n    let nameLineElements = this.props.nameLines.map( (x) => <span key={spanIdx++}>{x}</span>);\r\n    for (let i = 1; i < nameLineElements.length; i += 2) {\r\n      nameLineElements.splice(i, 0, <br key={\"br_\" + i}/>);\r\n    }\r\n\r\n    let tierClass = \"modTier\";\r\n    if (this.props.tierString.length > 0) {\r\n      const affixLetter = this.props.tierString[0];\r\n      if (affixLetter === \"p\") {\r\n        tierClass = tierClass + \" prefix\";\r\n      }\r\n      else if (affixLetter === \"s\") {\r\n        tierClass = tierClass + \" suffix\";\r\n      }\r\n    }\r\n\r\n    return <div className=\"modLine\">\r\n      <div className=\"requiredLevel\" key=\"modLevel\">\r\n        { this.props.requiredLevel }\r\n      </div>\r\n      <div className={tierClass} key=\"modTier\">\r\n        { this.props.tierString }\r\n      </div>\r\n      <div className=\"modName\" key=\"modName\">\r\n        { nameLineElements }\r\n      </div>\r\n      <div className=\"modWeight\" key=\"modWeight\">\r\n        { this.props.weight }\r\n      </div>\r\n      <div className=\"modProb\" key=\"modProb\">\r\n        { this.props.prob }\r\n      </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass ModGroup extends React.Component {\r\n  renderModsInModGroup() {\r\n    return this.props.modAndWeightGroup.map((x) => {\r\n      const modData = this.props.context.mods[x.modId];\r\n      const modWeight = x.weight;\r\n      const modName = TranslationHelper.TranslateMod(stat_translations, modData);\r\n      const modTierInfo = GetTierForMod(this.props.itemState, x.modId, this.props.context);\r\n      return <ModListModLine lineClass=\"modLine\" context={this.props.context} requiredLevel={modData[\"required_level\"]} tierString={modData[\"generation_type\"].slice(0, 1) + (modTierInfo[0] + 1)} nameLines={modName} weight={modWeight} prob={(modWeight / this.props.totalWeight).toLocaleString(undefined, {style: 'percent', minimumFractionDigits: 2})} key={x.modId} />\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const groupWeight = this.props.modAndWeightGroup.reduce((total, value) => { return total + value.weight }, 0);\r\n    const groupName = this.props.groupName;\r\n    let minTier = 1000;\r\n    let maxTier = 0;\r\n    for (const modAndWeight of this.props.modAndWeightGroup) {\r\n      const modId = modAndWeight.modId;\r\n      const tierInfoForMod = GetTierForMod(this.props.itemState, modId, this.props.context);\r\n      const tierForMod = tierInfoForMod[0];\r\n      minTier = Math.min(minTier, tierForMod + 1);\r\n      maxTier = Math.max(maxTier, tierForMod + 1);\r\n    }\r\n    const modData = this.props.context.mods[this.props.modAndWeightGroup[0].modId];\r\n    const tierContentsString = (minTier === maxTier) ?\r\n      TranslationHelper.stringformat(\"{0}{1}\", [modData[\"generation_type\"].slice(0, 1), minTier])\r\n    : TranslationHelper.stringformat(\"{0}{1}-{0}{2}\", [modData[\"generation_type\"].slice(0, 1), minTier, maxTier]);\r\n    const probability = groupWeight / this.props.totalWeight;\r\n    let probabilityClass = \"mid\";\r\n    if (probability < 0.02) {\r\n      probabilityClass = \"veryLow\";\r\n    }\r\n    else if (probability < 0.05) {\r\n      probabilityClass = \"low\";\r\n    }\r\n    else if (probability < 0.10) {\r\n      probabilityClass = \"mid\";\r\n    }\r\n    else if (probability < 0.25) {\r\n      probabilityClass = \"midHigh\";\r\n    }\r\n    else if (probability < 1.0) {\r\n      probabilityClass = \"high\";\r\n    }\r\n    else {\r\n      probabilityClass = \"guaranteed\";\r\n    }\r\n    const elementList = [<ModListGroupLine tierContents={tierContentsString} collapsed={this.props.collapsed} onGroupClicked={() => this.props.onGroupClicked(this.props.groupKey)} lineClass=\"modGroupLine\" context={this.props.context} nameLines={groupName} weight={groupWeight} probabilityClass={probabilityClass} prob={(probability).toLocaleString(undefined, {style: 'percent', minimumFractionDigits: 2})} key={groupName} />];\r\n    if (!this.props.collapsed) {\r\n      elementList.push(...this.renderModsInModGroup(this.props.modAndWeightGroup, this.props.totalWeight));\r\n    }\r\n    let modGroupClassName = \"modGroup\";\r\n    if (this.props.groupSource) {\r\n      modGroupClassName = modGroupClassName + \" \" + this.props.groupSource;\r\n    }\r\n    return <div className={modGroupClassName} key={this.props.groupKey}>\r\n      {\r\n        elementList\r\n      }\r\n      </div>      \r\n  }\r\n}\r\n\r\nclass ModList extends React.Component {\r\n  render() {\r\n\r\n    const actionInfo = this.props.getActionInfoFunction(this.props.itemState, this.props.context, ...this.props.getActionInfoAdditionalParameters);\r\n    const modRollGroups = GetModRollGroupsForAction(this.props.itemState, actionInfo, this.props.context);\r\n\r\n    let modRolls = [];\r\n\r\n    for (let modsAndWeights of modRollGroups) {\r\n      let modGroups = [];\r\n      modsAndWeights.sort((a, b) => { return ModIdComparer(a.modId, b.modId, this.props.context) });\r\n      const totalWeight = modsAndWeights.reduce( (total, value) => { return total + value.weight }, 0);\r\n      let currentGroupIdx = modGroups.length - 1;\r\n      let currentGroupTableKey = \"\";\r\n      for (let modIdx = 0; modIdx < modsAndWeights.length; ++modIdx) {\r\n        const modId = modsAndWeights[modIdx].modId;\r\n        const groupedTableKey = this.props.context.modLookupTables.getGroupedTableKeyForMod(modId, this.props.context.mods[modId]);\r\n        if (groupedTableKey !== currentGroupTableKey) {\r\n          currentGroupIdx++;\r\n          currentGroupTableKey = groupedTableKey;\r\n          const groupName = TranslationHelper.TranslateModForGroup(stat_translations, this.props.context.mods[modId]);\r\n          const groupSource = this.props.context.modLookupTables.getSource(modId);\r\n          modGroups.push({groupName: groupName, groupSource: groupSource, groupKey: modId + \"|\" + groupedTableKey, totalWeight: totalWeight, modsAndWeights: []});\r\n        }\r\n        modGroups[currentGroupIdx].modsAndWeights.push(modsAndWeights[modIdx]);\r\n      }\r\n      modRolls.push(modGroups);\r\n    }\r\n\r\n    let modRollIndex = 0;\r\n\r\n    return <div className=\"modList\">\r\n      {\r\n        modRolls.map((modRoll) => \r\n          <div className=\"modRoll\" key={actionInfo.rolls[modRollIndex].label}>\r\n            {\r\n              [ \r\n                <div className=\"modRollLabelLine\" key=\"modRollLabelLine\"><div className=\"modRollLabel\">{ actionInfo.rolls[modRollIndex++].label }</div></div>,\r\n                modRoll.map((modAndWeightGroup) => \r\n                  <ModGroup \r\n                    groupSource={modAndWeightGroup.groupSource} \r\n                    groupName={modAndWeightGroup.groupName} \r\n                    onGroupClicked={this.props.onGroupClicked} \r\n                    modAndWeightGroup={modAndWeightGroup.modsAndWeights} \r\n                    groupKey={modAndWeightGroup.groupKey} \r\n                    totalWeight={modAndWeightGroup.totalWeight} \r\n                    itemState={this.props.itemState} \r\n                    context={this.props.context} \r\n                    collapsed={!this.props.expandedGroups.has(modAndWeightGroup.groupKey)} \r\n                    key={modAndWeightGroup.groupKey}\r\n                  />\r\n              )\r\n              ]\r\n            }\r\n          </div>\r\n        )\r\n        // modGroups.map((modAndWeightGroup) => <ModGroup groupSource={modAndWeightGroup.groupSource} groupName={modAndWeightGroup.groupName} onGroupClicked={this.props.onGroupClicked} modAndWeightGroup={modAndWeightGroup.modsAndWeights} groupKey={modAndWeightGroup.groupKey} totalWeight={modAndWeightGroup.totalWeight} itemState={this.props.itemState} context={this.props.context} collapsed={!this.props.expandedGroups.has(modAndWeightGroup.groupKey)} key={modAndWeightGroup.groupKey}/>)\r\n      }\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nfunction CanBaseItemHaveRarity(baseItemId, rarity) {\r\n  const baseItem = base_items[baseItemId];\r\n  if (baseItem[\"domain\"] === \"flask\") {\r\n    return rarity !== \"rare\";\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetSpawnWeightForMod(modId, tags, context) {\r\n  const mod = context.mods[modId];\r\n  for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n    if (tags.includes(spawnWeight[\"tag\"])) {\r\n      return spawnWeight[\"weight\"];\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetPrefixCount(itemState, context) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = context.mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"prefix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetSuffixCount(itemState, context) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = context.mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"suffix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetAffixCount(itemState, context) {\r\n  return GetPrefixCount(itemState, context) + GetSuffixCount(itemState, context);\r\n}\r\n\r\nfunction GetPrefixLimitForRarity(baseItemId, rarity) {\r\n  if (rarity === \"normal\") {\r\n    return 0;\r\n  }\r\n  if (rarity === \"magic\") {\r\n    return 1;\r\n  }\r\n  if (rarity === \"rare\" || rarity === \"unique\") {\r\n    const baseItem = base_items[baseItemId];\r\n    if (baseItem[\"domain\"] === \"misc\" || baseItem[\"domain\"] === \"abyss_jewel\") {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetSuffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetAffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity) + GetSuffixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction GetPrefixLimit(itemState) {\r\n  return GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction GetSuffixLimit(itemState) {\r\n  return GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetAffixLimit(itemState) {\r\n  return GetAffixLimitForRarity(itemState.baseItemId, itemState.rarity); \r\n}\r\n\r\nfunction GetValidModsAndWeightsForItem(itemState, context, extendedParameters) {\r\n  let validMods = [];\r\n\r\n  const tags = GetItemTags(itemState, context);\r\n\r\n  const rarity = (\"rarityOverride\" in extendedParameters) ? extendedParameters.rarityOverride : itemState.rarity;\r\n  const ignoreAffixLimits = (\"ignoreAffixLimits\" in extendedParameters) ? extendedParameters.ignoreAffixLimits : false;\r\n  const ignoreAffixTypes = (\"ignoreAffixTypes\" in extendedParameters) ? extendedParameters.ignoreAffixTypes : false;\r\n  const forceAffixTypes = (\"forceAffixTypes\" in extendedParameters) ? extendedParameters.forceAffixTypes : null;\r\n  const requiredPositiveWeightTag = (\"requiredPositiveWeightTag\" in extendedParameters) ? extendedParameters.requiredPositiveWeightTag : null;\r\n  const negativeWeightMultipliers = (\"negativeWeightMultipliers\" in extendedParameters) ? extendedParameters.negativeWeightMultipliers : null;\r\n  const positiveWeightMultipliers = (\"positiveWeightMultipliers\" in extendedParameters) ? extendedParameters.positiveWeightMultipliers : null;\r\n  const ignoreExistingGroups = (\"ignoreExistingGroups\" in extendedParameters) ? extendedParameters.ignoreExistingGroups : false;\r\n  const ignoreSpawnWeight = (\"ignoreSpawnWeight\" in extendedParameters) ? extendedParameters.ignoreSpawnWeight : false;\r\n  const ignoreRequiredLevel = (\"ignoreRequiredLevel\" in extendedParameters) ? extendedParameters.ignoreRequiredLevel : false;\r\n  const addedMods = (\"addedMods\" in extendedParameters) ? extendedParameters.addedMods : null;\r\n  const forcedModIds = (\"forcedModIds\" in extendedParameters) ? extendedParameters.forcedModIds : null;\r\n\r\n  const hasPrefixSlots = ignoreAffixLimits || (GetPrefixLimitForRarity(itemState.baseItemId, rarity) > GetPrefixCount(itemState, context));\r\n  const hasSuffixSlots = ignoreAffixLimits || (GetSuffixLimitForRarity(itemState.baseItemId, rarity) > GetSuffixCount(itemState, context));\r\n\r\n  let modIds = [];\r\n  if (forcedModIds) {\r\n    modIds = [...forcedModIds];\r\n  }\r\n  else {\r\n    modIds = context.modLookupTables.getDomainTable(base_items[itemState.baseItemId][\"domain\"]);\r\n    if (addedMods) {\r\n      modIds = [...modIds, ...addedMods];\r\n    }\r\n  }\r\n\r\n  let existingModGroups = new Set();\r\n  if (!ignoreExistingGroups)\r\n  {\r\n    for (const affix of itemState.affixes) {\r\n      const existingMod = context.mods[affix.id];\r\n      existingModGroups.add(existingMod[\"group\"]);\r\n    }\r\n  }\r\n\r\n  for (const modId of modIds) {\r\n    const mod = context.mods[modId];\r\n\r\n    if (requiredPositiveWeightTag) {\r\n      if (!(mod[\"spawn_weights\"].find(x => x[\"tag\"] === requiredPositiveWeightTag && x[\"weight\"] > 0))) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (!ignoreRequiredLevel) {\r\n      if (mod[\"required_level\"] > itemState.level) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (!ignoreAffixTypes) {\r\n      if (forceAffixTypes) {\r\n        if (!forceAffixTypes.includes(mod[\"generation_type\"])) {\r\n          continue;\r\n        }\r\n      }\r\n      else \r\n      {\r\n        if ((mod[\"generation_type\"] === \"prefix\")) {\r\n          if(!hasPrefixSlots) {\r\n            continue;\r\n          }\r\n        }\r\n        else if (mod[\"generation_type\"] === \"suffix\") {\r\n          if (!hasSuffixSlots) {\r\n            continue;\r\n          }\r\n        }\r\n        else {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n \r\n    if (!ignoreExistingGroups) {\r\n      const modGroup = mod[\"group\"];\r\n      if (modGroup && modGroup !== \"\") {\r\n        if (existingModGroups.has(modGroup)) {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    let spawnWeight = GetSpawnWeightForMod(modId, tags, context);\r\n    if (!ignoreSpawnWeight && spawnWeight <= 0) {\r\n      continue;\r\n    }\r\n\r\n    if (negativeWeightMultipliers) {\r\n      const modTags = context.modLookupTables.getTags(modId);\r\n      for (const modTag of modTags) {\r\n        if (modTag in negativeWeightMultipliers) {\r\n          spawnWeight = spawnWeight * negativeWeightMultipliers[modTag];\r\n        }\r\n      }\r\n\r\n      if (!ignoreSpawnWeight && spawnWeight <= 0) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (positiveWeightMultipliers) {\r\n      //   NOTE - It's not clear to me how the game handles multiple applicable positive weight multipliers\r\n      //\r\n      // For example, if you apply both Aberrant (+chaos:10x) and Serrated (+attack:10x) on the AddedChaosSuffix\r\n      // mod (attack, chaos), is the total multiplication 10 * 10 = 100x? Or 10 + 10 = 20x?\r\n      //\r\n      // It's a little more conservative, but I'm going with the additive option here until proven otherwise.\r\n\r\n      const modTags = context.modLookupTables.getTags(modId);\r\n\r\n      // Additive method\r\n      let totalPositiveWeightMultiplier = 0;\r\n      for (const modTag of modTags) {\r\n        if (modTag in positiveWeightMultipliers) {\r\n          totalPositiveWeightMultiplier = totalPositiveWeightMultiplier + positiveWeightMultipliers[modTag];\r\n        }\r\n      }\r\n\r\n      /*\r\n      // Multiplicative method\r\n      let totalPositiveWeightMultiplier = 1;\r\n      for (const modTag of modTags) {\r\n        if (modTag in positiveWeightMultipliers) {\r\n          totalPositiveWeightMultiplier = totalPositiveWeightMultiplier * positiveWeightMultipliers[modTag];\r\n        }\r\n      }\r\n      */\r\n\r\n      if (totalPositiveWeightMultiplier > 0) {\r\n        spawnWeight = spawnWeight * totalPositiveWeightMultiplier;\r\n      }\r\n    }\r\n    \r\n    validMods.push({modId: modId, weight: spawnWeight});\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction CreateWeightedModPool(modsAndWeights) {\r\n  let modPool = {\r\n    totalWeight : 0,\r\n    mods : []\r\n  }\r\n\r\n  for (const modAndWeight of modsAndWeights) {\r\n    let modWeight = modAndWeight.weight;\r\n    modPool.mods.push({\r\n      id : modAndWeight.modId,\r\n      weight : modWeight\r\n    });\r\n    modPool.totalWeight += modWeight;\r\n  }\r\n\r\n  return modPool;\r\n}\r\n\r\nfunction PickModFromWeightedModPool(modPool, context) {\r\n  const randRoll = randRange(context.rng, 0, modPool.totalWeight - 1);\r\n  let weightAccum = 0;\r\n\r\n  for (const mod of modPool.mods) {\r\n    const modEndWeight = weightAccum + mod.weight;\r\n    if (randRoll < modEndWeight) {\r\n      return mod.id;\r\n    }\r\n    weightAccum = modEndWeight;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction GetInfluenceTag(baseItemId, influence) {\r\n  const baseItem = base_items[baseItemId];\r\n  const baseItemClass = baseItem[\"item_class\"];\r\n  if (baseItemClass in item_classes) {\r\n    const influenceTagId = influence + \"_tag\";\r\n    if (influenceTagId in item_classes[baseItemClass]) {\r\n      const influenceTag = item_classes[baseItemClass][influenceTagId];\r\n      if (influenceTag) {\r\n        return influenceTag;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetAddedTags(modId, context) {\r\n  return context.mods[modId][\"adds_tags\"];\r\n}\r\n\r\nfunction GetBaseItemTags (itemState, context) {\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  let tags = [];\r\n  tags = tags.concat(baseItem[\"tags\"]);\r\n  for (const influence of itemState.influences) {\r\n    const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n    if (influenceTag) {\r\n      tags.push(influenceTag);\r\n    }\r\n  }\r\n  for (const implicit of itemState.baseImplicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id, context));\r\n  }\r\n  for (const implicit of itemState.gildedImplicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id, context));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction GetItemTags(itemState, context) {\r\n  let tags = GetBaseItemTags(itemState, context);\r\n  for (const affix of itemState.affixes) {\r\n    tags = tags.concat(GetAddedTags(affix.id, context));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction RollModValues(modId, rollsLucky, context) {\r\n  let statRolls = [];\r\n  const mod = context.mods[modId];\r\n  for (const stat of mod[\"stats\"]) {\r\n    if (rollsLucky) {\r\n      const rollOne = randRange(context.rng, stat[\"min\"], stat[\"max\"]);\r\n      const rollTwo = randRange(context.rng, stat[\"min\"], stat[\"max\"]);\r\n      statRolls.push(Math.max(rollOne, rollTwo));\r\n    }\r\n    else {\r\n      statRolls.push(randRange(context.rng, stat[\"min\"], stat[\"max\"]));\r\n    }\r\n  }\r\n  return statRolls;\r\n}\r\n\r\nfunction GetTierForMod(itemState, modId, context) {\r\n  const mod = context.mods[modId];\r\n  if (mod[\"is_essence_only\"]) {\r\n    return [0, 1, 1]\r\n  }\r\n\r\n  if (mod[\"generation_type\"] === \"unique\") {\r\n    return [0, 1, 1]\r\n  }\r\n\r\n  let modTier = 0;\r\n  let modCount = 1;\r\n  let modCountAtItemLevel = 1;\r\n  const modLevel = mod[\"required_level\"];\r\n  const baseItemTags = GetBaseItemTags(itemState, context);\r\n  const otherModIds = context.modLookupTables.getGroupedTable(mod[\"domain\"], mod[\"group\"], mod[\"type\"], context.modLookupTables.getStatLineIndices(modId));\r\n  for (const otherModId of otherModIds) {\r\n    if (otherModId === modId) {\r\n      continue;\r\n    }\r\n\r\n    const otherMod = context.mods[otherModId];\r\n    if (otherMod[\"is_essence_only\"]) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(otherModId, baseItemTags, context) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    modCount++;\r\n\r\n    if (otherMod[\"required_level\"] <= itemState.level) {\r\n      modCountAtItemLevel++;\r\n    }\r\n\r\n    if (otherMod[\"required_level\"] > modLevel) {\r\n      modTier++;\r\n    }\r\n  }\r\n\r\n  return [modTier, modCount, modCountAtItemLevel];\r\n}\r\n\r\nfunction CreateRolledMod(itemState, modId, rollsLucky, context) {\r\n  const tierValues = GetTierForMod(itemState, modId, context);\r\n  return {\r\n    id : modId,\r\n    values : RollModValues(modId, rollsLucky, context),\r\n    tier : tierValues[0],\r\n    tierCount : tierValues[1],\r\n    tierCountAtItemLevel : tierValues[2]\r\n  }  \r\n}\r\n\r\nfunction RollRareName(itemState, rng) {\r\n  const itemData = base_items[itemState.baseItemId];\r\n  return RareItemNames.GenerateRareName(itemData, rng);\r\n}\r\n\r\nfunction RollMagicAffixCount(itemState, rng) {\r\n  return randRange(rng, 1, 2);\r\n}\r\n\r\nfunction RollRareAffixCount(baseItemId, rng) {\r\n  const maxAffixCount = GetAffixLimitForRarity(baseItemId, \"rare\");\r\n  if (maxAffixCount === 6) {\r\n    // Number of mods from data mined note (source: https://www.reddit.com/r/pathofexile/comments/amm2tg/tool_poecraftingshenanigans_a_crafting_simulator/)\r\n    let modCount = 4;\r\n    if (randRange(rng, 0, 2) === 0) {\r\n      // Roughly 33% chance to get 5 or 6\r\n      modCount++;\r\n      if (randRange(rng, 0, 2) === 0) {\r\n        // Roughly 33% * 33% chance to get 6\r\n        modCount++;\r\n      }\r\n    }\r\n    return modCount;\r\n  }\r\n  else if (maxAffixCount === 4) {\r\n    // Number of mods from data mined note (source: reddit, https://www.reddit.com/r/pathofexile/comments/8fxnlu/chance_of_getting_specific_number_of_mods_via/)\r\n    // \"for jewels: 65/35\"\r\n    let modCount = 3;\r\n    if (randRange(rng, 0, 2) === 0) {\r\n      // Roughly 33% chance to get 4\r\n      modCount++;\r\n    }\r\n    return modCount;\r\n  }\r\n  else if (maxAffixCount > 0) {\r\n    // Unexpected situation, roll pure random!\r\n    return randRange(rng, 1, maxAffixCount);\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction cloneMods(modArray) {\r\n  let newArray = Array(modArray.length);\r\n  for (const oldModIdx in modArray) {\r\n    newArray[oldModIdx] = { ...modArray[oldModIdx], values : [ ...modArray[oldModIdx].values ]};\r\n  }\r\n  return newArray;\r\n}\r\n\r\nfunction cloneItemState(itemState) {\r\n  return { \r\n    ...itemState, \r\n    influences : itemState.influences.slice(),\r\n    enchantments : cloneMods(itemState.enchantments),\r\n    baseImplicits : cloneMods(itemState.baseImplicits), \r\n    gildedImplicits : cloneMods(itemState.gildedImplicits),\r\n    corruptions : cloneMods(itemState.corruptions), \r\n    affixes : cloneMods(itemState.affixes) \r\n  };\r\n}\r\n\r\nfunction CreateItem(baseItemId, level, context) {\r\n  let itemState = {\r\n    generatedName : \"\",\r\n    baseItemId : baseItemId,\r\n    level : level,\r\n    rarity : \"normal\",\r\n    corrupted : false,\r\n    quality : 0,\r\n    influences : [],\r\n    enchantments : [],\r\n    baseImplicits : [],\r\n    gildedImplicits : [],\r\n    corruptions : [],\r\n    affixes : []\r\n  }  \r\n\r\n  // Add and roll implicits\r\n  const baseItem = base_items[baseItemId];\r\n  for (const implicitId of baseItem[\"implicits\"]) {\r\n    itemState.baseImplicits.push(CreateRolledMod(itemState, implicitId, false, context));\r\n  }\r\n\r\n  return itemState;\r\n}\r\n\r\nfunction PickRandomModFromListAndWeights(modsAndWeights, context) {\r\n  const weightedModPool = CreateWeightedModPool(modsAndWeights, context);\r\n  return PickModFromWeightedModPool(weightedModPool, context);\r\n}\r\n\r\nconst generationTypeOrder = {\r\n  \"unique\": 0,\r\n  \"prefix\": 1,\r\n  \"suffix\": 2,\r\n};\r\n\r\nconst sourceOrder = {\r\n  \"delve\" : 0,\r\n  \"essence\" : 1,\r\n  \"shaper\" : 2,\r\n  \"elder\" : 3,\r\n  \"crusader\" : 4,\r\n  \"hunter\" : 5,\r\n  \"redeemer\" : 6,\r\n  \"warlord\" : 7,\r\n  \"\" : 100,\r\n}\r\n\r\nfunction ModIdComparer (a, b, context) {\r\n  const modA = context.mods[a];\r\n  const modB = context.mods[b];\r\n\r\n  const modAGenerationType = modA[\"generation_type\"];\r\n  const modBGenerationType = modB[\"generation_type\"];\r\n  if (modAGenerationType !== modBGenerationType) {\r\n    if (modAGenerationType in generationTypeOrder && modBGenerationType in generationTypeOrder) {\r\n      return generationTypeOrder[modAGenerationType] - generationTypeOrder[modBGenerationType];\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const modASource = context.modLookupTables.getSource(a);\r\n  const modBSource = context.modLookupTables.getSource(b);\r\n  if (modASource !== modBSource) {\r\n    return sourceOrder[modASource] - sourceOrder[modBSource];\r\n  }\r\n\r\n  const aStatIndices = context.modLookupTables.getStatLineIndices(a);\r\n  const bStatIndices = context.modLookupTables.getStatLineIndices(b);\r\n  const aNumStats = aStatIndices.length;\r\n  const bNumStats = bStatIndices.length;\r\n  let statIdx = 0;\r\n  while (statIdx < aNumStats && statIdx < bNumStats) {\r\n    if (aStatIndices[statIdx] !== bStatIndices[statIdx]) {\r\n      return aStatIndices[statIdx] - bStatIndices[statIdx];\r\n    }\r\n    ++statIdx;\r\n  }\r\n  if (aNumStats !== bNumStats) {\r\n    return aNumStats - bNumStats;\r\n  }\r\n\r\n  const modARequiredLevel = modA[\"required_level\"];\r\n  const modBRequiredLevel = modB[\"required_level\"];\r\n  if (modARequiredLevel !== modBRequiredLevel) {\r\n    return -(modARequiredLevel - modBRequiredLevel);\r\n  }\r\n\r\n  return 0;  \r\n}\r\n\r\nfunction ModComparer (a, b, context) {\r\n  return ModIdComparer(a.id, b.id, context);\r\n}\r\n\r\nfunction SortMods(modList, context) {\r\n  let sortedList = cloneMods(modList);\r\n  sortedList.sort((a, b) => { return ModComparer(a, b, context) });\r\n  return sortedList;\r\n}\r\n\r\nfunction CanAddInfluenceToItem(itemState, influence) {\r\n  return GetInfluenceTag(itemState.baseItemId, influence) != null;\r\n}\r\n\r\nfunction AddInfluenceToItem(itemState, influence) {\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newState = cloneItemState(itemState);\r\n  newState.influences.push(influence);\r\n  return [true, newState];\r\n}\r\n\r\nconst AffixCountRule = {\r\n  RandomMagicAffixCount : \"magic\",\r\n  RandomRareAffixCount : \"rare\",\r\n  Exact : \"exact\",\r\n}\r\n\r\nconst ActionInfo = {\r\n  setRarity : null,\r\n  clearAffixes : false,\r\n  generateNewName : false,\r\n  addInfluences : [],\r\n  affixCountRule : AffixCountRule.Exact,\r\n  affixCount : 0,\r\n  rolls : []\r\n}\r\n\r\nconst ModRollInfo = {\r\n  weightParameters : {},\r\n  modType : \"affix\",\r\n  rollSelectionChance : 1.0,\r\n  rollsLucky : false,\r\n  forceWeights : -1,\r\n  fillRemainingAffixRolls : false,\r\n  label : \"Affix Pool\",\r\n}\r\n\r\nfunction GetModRollGroupsForAction(itemState, actionInfo, context) {\r\n  let newItemState = cloneItemState(itemState);\r\n  if (actionInfo.clearAffixes) {\r\n    newItemState.affixes = [];\r\n  }\r\n  if (actionInfo.setRarity) {\r\n    newItemState.rarity = actionInfo.setRarity;\r\n  }\r\n  if (actionInfo.generateNewName) {\r\n    newItemState.generatedName = RollRareName(itemState, context.rng);\r\n  }\r\n\r\n  for (const influence of actionInfo.addInfluences) {\r\n    [ , newItemState] = AddInfluenceToItem(newItemState, influence);\r\n  }\r\n\r\n  let modRollGroups = [];\r\n  for (const modRoll of actionInfo.rolls) {\r\n    const modsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, modRoll.weightParameters);\r\n    if (modRoll.forceWeights >= 0) {\r\n      for (let modAndWeight of modsAndWeights) {\r\n        modAndWeight.weight = modRoll.forceWeights;\r\n      }\r\n    }    \r\n    modRollGroups.push(modsAndWeights);\r\n  }\r\n  return modRollGroups;\r\n}\r\n\r\nfunction RollOnModRolls(itemState, modRolls, affixRollCount, context) {\r\n  let addedMods = 0;\r\n  let rolledAffixes = 0;\r\n  let modRollIdx = 0;\r\n  let newItemState = cloneItemState(itemState);\r\n  while (modRollIdx < modRolls.length) {\r\n    const modRoll = modRolls[modRollIdx];\r\n\r\n    if (modRoll.rollSelectionChance < 1.0) {\r\n      if (context.rng.quick() >= modRoll.rollSelectionChance) {\r\n        modRollIdx++;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (modRoll.modType === \"affix\" && rolledAffixes >= affixRollCount) {\r\n      modRollIdx++;\r\n      continue;\r\n    }\r\n\r\n    const modsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, modRoll.weightParameters);\r\n    if (modRoll.forceWeights >= 0) {\r\n      for (let modAndWeight of modsAndWeights) {\r\n        modAndWeight.weight = modRoll.forceWeights;\r\n      }\r\n    }\r\n    const modId = PickRandomModFromListAndWeights(modsAndWeights, context);\r\n    if (modId) {\r\n      const mod = CreateRolledMod(newItemState, modId, modRoll.rollsLucky, context);\r\n      if (mod) {\r\n        newItemState = cloneItemState(newItemState);\r\n        switch (modRoll.modType) {\r\n          case \"affix\":\r\n            newItemState.affixes.push(mod);\r\n            break;\r\n          case \"gildedImplicit\":\r\n            newItemState.gildedImplicits = [mod];\r\n            break;\r\n          case \"enchantment\":\r\n            newItemState.enchantments = [mod];\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        addedMods++;\r\n      }\r\n    }    \r\n    \r\n    if (modRoll.modType === \"affix\") {\r\n      rolledAffixes++;\r\n    }\r\n\r\n    if (modRoll.modType === \"affix\" && modRoll.fillRemainingAffixRolls) {\r\n      continue;\r\n    }\r\n\r\n    modRollIdx++;\r\n    continue;\r\n  }\r\n\r\n  if (addedMods === 0) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction TryApplyAction(itemState, actionInfo, context) {\r\n  let newItemState = cloneItemState(itemState);\r\n  if (actionInfo.clearAffixes) {\r\n    newItemState.affixes = [];\r\n  }\r\n  if (actionInfo.setRarity) {\r\n    newItemState.rarity = actionInfo.setRarity;\r\n  }\r\n  if (actionInfo.generateNewName) {\r\n    newItemState.generatedName = RollRareName(itemState, context.rng);\r\n  }\r\n\r\n  for (const influence of actionInfo.addInfluences) {\r\n    let [success, postInfluenceItemState] = AddInfluenceToItem(newItemState, influence);\r\n    if (!success) {\r\n      return [false, itemState];\r\n    }\r\n    newItemState = postInfluenceItemState;\r\n  }\r\n\r\n  let affixCount = 0;\r\n  switch (actionInfo.affixCountRule) {\r\n    case AffixCountRule.RandomMagicAffixCount:\r\n      affixCount = RollMagicAffixCount(itemState.baseItemId, context.rng);\r\n      break;\r\n    case AffixCountRule.RandomRareAffixCount:\r\n      affixCount = RollRareAffixCount(itemState.baseItemId, context.rng);\r\n      break;\r\n    case AffixCountRule.Exact:\r\n      affixCount = actionInfo.affixCount;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return RollOnModRolls(newItemState, actionInfo.rolls, affixCount, context);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanScourItem(itemState, context) {\r\n  if (itemState.rarity === \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ScourItem(itemState, context) {\r\n  if (!CanScourItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, { ...cloneItemState(itemState), generatedName : \"\", rarity : \"normal\", affixes : [] }];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanTransmutationItem(itemState, context) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"magic\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetTransmutationActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    setRarity : \"magic\",\r\n    affixCountRule : AffixCountRule.RandomMagicAffixCount,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\", fillRemainingAffixRolls : true }],\r\n  };\r\n}\r\n\r\nfunction TransmutationItem(itemState, context) {\r\n  if (!CanTransmutationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetTransmutationActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanAlterationItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetAlterationActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    clearAffixes : true,\r\n    affixCountRule : AffixCountRule.RandomMagicAffixCount,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\", fillRemainingAffixRolls : true }],\r\n  };\r\n}\r\n\r\nfunction AlterationItem(itemState, context) {\r\n  if (!CanAlterationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetAlterationActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\nfunction CanAugmentationItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetAugmentationActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    affixCountRule : AffixCountRule.Exact,\r\n    affixCount : 1,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\" }],\r\n  };\r\n}\r\n\r\nfunction AugmentationItem(itemState, context) {\r\n  if (!CanAugmentationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetAugmentationActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanRegalItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetRegalActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    setRarity : \"rare\",\r\n    generateNewName : true,\r\n    affixCountRule : AffixCountRule.Exact,\r\n    affixCount : 1,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\" }],\r\n  };\r\n}\r\n\r\nfunction RegalItem(itemState, context) {\r\n  if (!CanRegalItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetRegalActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanAlchemyItem(itemState, context) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetAlchemyActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    setRarity : \"rare\",\r\n    generateNewName : true,\r\n    affixCountRule : AffixCountRule.RandomRareAffixCount,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\", fillRemainingAffixRolls : true, }],\r\n  };\r\n}\r\n\r\nfunction AlchemyItem(itemState, context) {\r\n  if (!CanAlchemyItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetAlchemyActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanChaosItem(itemState, context) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetChaosActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    generateNewName : true,\r\n    clearAffixes : true,\r\n    affixCountRule : AffixCountRule.RandomRareAffixCount,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\", fillRemainingAffixRolls : true, }],\r\n  };\r\n}\r\n\r\nfunction ChaosItem(itemState, context) {\r\n  if (!CanChaosItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetChaosActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\nfunction CanExaltedItem(itemState, context) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction GetExaltedActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    affixCount : 1,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\" }],\r\n  };\r\n}\r\n\r\nfunction ExaltedItem(itemState, context) {\r\n  if (!CanExaltedItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetExaltedActionInfo(itemState, context);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\nfunction CanExaltedWithInfluenceItem(itemState, context, influence) {\r\n  if (itemState.influences.length > 0) {\r\n    return false;\r\n  }\r\n  if (!CanExaltedItem(itemState, context)) {\r\n    return false;\r\n  }\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsAndWeightsForItem(newItemState, context, { requiredPositiveWeightTag : influenceTag });\r\n  if (validMods.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetExaltedWithInfluenceActionInfo(itemState, context, influence) {\r\n  const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n  return { ...ActionInfo,\r\n    clearAffixes : false,\r\n    generateNewName : false,\r\n    addInfluences : [influence],\r\n    affixCountRule : AffixCountRule.Exact,\r\n    affixCount : 1,\r\n    rolls : [{ ...ModRollInfo, modType : \"affix\", weightParameters : { requiredPositiveWeightTag : influenceTag } }],\r\n  };\r\n}\r\n\r\nfunction ExaltedWithInfluenceItem(itemState, context, influence) {\r\n  if (!CanExaltedWithInfluenceItem(itemState, context, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetExaltedWithInfluenceActionInfo(itemState, context, influence);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\nfunction CanAnnulmentItem(itemState, context) {\r\n  if (itemState.rarity === \"normal\" || itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AnnulmentItem(itemState, context) {\r\n  if (!CanAnnulmentItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  const numAffixes = GetAffixCount(newItemState, context);\r\n  const affixIdxToRemove = randRange(context.rng, 0, numAffixes - 1);\r\n  newItemState.affixes.splice(affixIdxToRemove, 1);\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanBlessedItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.baseImplicits.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction BlessedItem(itemState, context) {\r\n  if (!CanBlessedItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let implicit of newItemState.baseImplicits) {\r\n    implicit.values = RollModValues(implicit.id, false, context);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanDivineItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.affixes.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction DivineItem(itemState, context) {\r\n  if (!CanDivineItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let affix of newItemState.affixes) {\r\n    affix.values = RollModValues(affix.id, false, context);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanFossilItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  if (base_items[itemState.baseItemId][\"domain\"] === \"flask\") {\r\n    return false;\r\n  }\r\n\r\n  const fossilTypes = Array.prototype.slice.call(arguments, 2);\r\n  if (fossilTypes.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  for (const fossilId of fossilTypes) {\r\n    const fossil = fossils[fossilId];\r\n\r\n    if (fossil[\"allowed_tags\"].length > 0) {\r\n      const baseItem = base_items[itemState.baseItemId];\r\n      let hasAllowedTag = false;\r\n      for (const allowedTag of fossil[\"allowed_tags\"]) {\r\n        if (baseItem[\"tags\"].includes(allowedTag)) {\r\n          hasAllowedTag = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!hasAllowedTag) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (fossil[\"forbidden_tags\"].length > 0) {\r\n      const baseItem = base_items[itemState.baseItemId];\r\n      for (const forbiddenTag of fossil[\"allowed_tags\"]) {\r\n        if (baseItem[\"tags\"].includes(forbiddenTag)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetWeightParametersForFossils(fossilTypes) {\r\n  let addedMods = [];\r\n  let forcedModLists = [];\r\n  let gildedFossilMods = [];\r\n  let negativeTagMultipliers = {};\r\n  let positiveTagMultipliers = {};\r\n  let corruptedEssenceChances = [];\r\n  let rollsLucky = false;\r\n  let addsEnchant = false;\r\n\r\n  for (const fossilId of fossilTypes) {\r\n    const fossil = fossils[fossilId];\r\n    addedMods = [ ...addedMods, ...fossil[\"added_mods\"] ];\r\n    for (const negativeWeightMod of fossil[\"negative_mod_weights\"]) {\r\n      const tag = negativeWeightMod[\"tag\"];\r\n      const weightMultiplier = negativeWeightMod[\"weight\"] / 100.0;\r\n      if (tag in negativeTagMultipliers) {\r\n        negativeTagMultipliers[tag] = negativeTagMultipliers[tag] * weightMultiplier;\r\n      }\r\n      else {\r\n        negativeTagMultipliers[tag] = weightMultiplier;\r\n      }\r\n    }\r\n    for (const positiveWeightMod of fossil[\"positive_mod_weights\"]) {\r\n      const tag = positiveWeightMod[\"tag\"];\r\n      const weightMultiplier = positiveWeightMod[\"weight\"] / 100.0;\r\n      if (tag in positiveTagMultipliers) {\r\n        positiveTagMultipliers[tag] = positiveTagMultipliers[tag] + weightMultiplier;\r\n      }\r\n      else {\r\n        positiveTagMultipliers[tag] = weightMultiplier;\r\n      }\r\n    }\r\n    if (fossil[\"forced_mods\"].length > 0) {\r\n      forcedModLists = [ ...forcedModLists, { modIds : [...fossil[\"forced_mods\"]], fossilId: fossilId }];\r\n    }\r\n    if (fossil[\"sell_price_mods\"].length > 0) {\r\n      gildedFossilMods = [ ...gildedFossilMods, ...fossil[\"sell_price_mods\"]];\r\n    }\r\n    if (fossil[\"corrupted_essence_chance\"] > 0) {\r\n      corruptedEssenceChances.push(fossil[\"corrupted_essence_chance\"]);\r\n    }\r\n    if (fossil[\"enchants\"]) {\r\n      addsEnchant = true;\r\n    }\r\n    rollsLucky = rollsLucky || fossil[\"rolls_lucky\"];\r\n  }\r\n\r\n  return {\r\n    negativeWeightMultipliers : negativeTagMultipliers,\r\n    positiveWeightMultipliers : positiveTagMultipliers,\r\n    addedMods : addedMods,\r\n    forcedModLists : forcedModLists,\r\n    gildedFossilMods : gildedFossilMods,\r\n    rollsLucky : rollsLucky,\r\n    corruptedEssenceChances : corruptedEssenceChances,\r\n    addsEnchant : addsEnchant,\r\n  }\r\n}\r\n\r\nfunction GetRollsForFossil(itemState, context) {\r\n  if (!CanFossilItem(...arguments)) {\r\n    return [];\r\n  }\r\n\r\n  let modRolls = [];\r\n\r\n  const fossilTypes = Array.prototype.slice.call(arguments, 2);\r\n  const weightParameters = GetWeightParametersForFossils(fossilTypes);\r\n  let mockItemState = { ...cloneItemState(itemState), rarity : \"rare\", affixes : [] };  \r\n\r\n  if (weightParameters.gildedFossilMods.length > 0) {\r\n    modRolls.push({...ModRollInfo,\r\n      weightParameters : { forcedModIds : weightParameters.gildedFossilMods, ignoreAffixTypes : true },\r\n      rollsLucky : weightParameters.rollsLucky, \r\n      modType : \"gildedImplicit\",\r\n      label : \"Gilded Fossil\",\r\n    });\r\n  }\r\n\r\n  if (weightParameters.addsEnchant) {\r\n    modRolls.push({...ModRollInfo,\r\n      weightParameters : { forceAffixTypes : [\"enchantment\"], ignoreExistingGroups : true },\r\n      rollsLucky : weightParameters.rollsLucky,         \r\n      modType : \"enchantment\",\r\n      label : \"Enchanted Fossil\",\r\n    })\r\n  }\r\n\r\n  for (const forcedModList of weightParameters.forcedModLists) {\r\n    modRolls.push({...ModRollInfo, \r\n      weightParameters : { ...weightParameters, forcedModIds : forcedModList.modIds },\r\n      rollsLucky : weightParameters.rollsLucky,           \r\n      modType : \"affix\",\r\n      label : fossils[forcedModList.fossilId].name,\r\n    });\r\n  }\r\n\r\n  if (weightParameters.corruptedEssenceChances.length > 0) {\r\n    let essenceModIds = [];\r\n    const itemClass = base_items[mockItemState.baseItemId][\"item_class\"];\r\n    for (const essenceId in essences) {\r\n      const essence = essences[essenceId];\r\n      if (essence[\"type\"][\"is_corruption_only\"]) {\r\n        if (itemClass in essence[\"mods\"]) {\r\n          essenceModIds.push(essence[\"mods\"][itemClass]);\r\n        }\r\n      }\r\n    }    \r\n\r\n    for (const corruptedEssenceChance of weightParameters.corruptedEssenceChances) {\r\n      modRolls.push({...ModRollInfo, \r\n        weightParameters : { ignoreAffixLimits : true, ignoreSpawnWeight : true, forcedModIds : [...essenceModIds] },\r\n        rollSelectionChance : (corruptedEssenceChance / 100.0),\r\n        forceWeights : 100,\r\n        rollsLucky : weightParameters.rollsLucky,           \r\n        modType : \"affix\",\r\n        label : corruptedEssenceChance === 100 ? \"Glyphic Fossil (100% Chance)\" : \"Tangled Fossil (10% Chance)\"\r\n      });\r\n    }\r\n  }\r\n\r\n  modRolls.push({...ModRollInfo, \r\n    weightParameters : weightParameters,\r\n    rollsLucky : weightParameters.rollsLucky,           \r\n    modType : \"affix\", \r\n    fillRemainingAffixRolls : true\r\n  });\r\n\r\n  return modRolls;\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction GetFossilActionInfo(itemState, context) {\r\n  return { ...ActionInfo,\r\n    setRarity : \"rare\",\r\n    clearAffixes : true,\r\n    generateNewName : true,\r\n    affixCountRule : AffixCountRule.RandomRareAffixCount,\r\n    rolls : GetRollsForFossil(...arguments) \r\n  };\r\n}\r\n\r\nfunction FossilItem(itemState, context) {\r\n  if (!CanFossilItem(...arguments)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const actionInfo = GetFossilActionInfo(...arguments);\r\n  return TryApplyAction(itemState, actionInfo, context);\r\n}\r\n\r\nfunction NormalButton(props) {\r\n  return <button className=\"button\" onClick={props.onClick} disabled={!props.enabled}>{props.label}</button>;  \r\n}\r\n\r\nfunction CraftingButton(props) {\r\n  return <div className=\"craftingButtonContainer\">\r\n          <button className=\"craftingButton\" onClick={props.onClick} disabled={!props.enabled} aria-label={props.itemTooltip} data-balloon-pos=\"up\" data-balloon-nofocus left={props.left} right={props.right}>\r\n          { \r\n            props.itemUrl ? \r\n              <div className=\"label\">\r\n                <img src={props.itemUrl}></img>\r\n              </div> \r\n              : \r\n              <div className=\"label\">\r\n                {props.label}\r\n              </div>\r\n          }\r\n          </button>\r\n        </div>;\r\n}\r\n\r\nclass TheoryCrafterContext {\r\n  constructor(modDatabase, rng) {\r\n    this.mods = modDatabase;\r\n    this.modLookupTables = ModGroups.ParseModGroups(modDatabase, stats, item_classes, mod_types);\r\n    this.rng = rng;\r\n  }\r\n}\r\n\r\nclass TheoryCrafter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.testMap = {\r\n      \"scour\" : CanScourItem,\r\n      \"transmute\" : CanTransmutationItem,\r\n      \"alt\" : CanAlterationItem,\r\n      \"aug\" : CanAugmentationItem,\r\n      \"regal\" : CanRegalItem,\r\n      \"alch\" : CanAlchemyItem,\r\n      \"chaos\" : CanChaosItem,\r\n      \"exalt\" : CanExaltedItem,\r\n      \"exalt_inf\" : CanExaltedWithInfluenceItem,\r\n      \"annul\" : CanAnnulmentItem,\r\n      \"bless\" : CanBlessedItem,\r\n      \"divine\" : CanDivineItem,\r\n      \"fossil\" : CanFossilItem,\r\n    }\r\n\r\n    this.getActionInfoMap = {\r\n      \"scour\" : null,\r\n      \"transmute\" : GetTransmutationActionInfo,\r\n      \"alt\" : GetAlterationActionInfo,\r\n      \"aug\" : GetAugmentationActionInfo,\r\n      \"regal\" : GetRegalActionInfo,\r\n      \"alch\" : GetAlchemyActionInfo,\r\n      \"chaos\" : GetChaosActionInfo,\r\n      \"exalt\" : GetExaltedActionInfo,\r\n      \"exalt_inf\" : GetExaltedWithInfluenceActionInfo,\r\n      \"annul\" : null,\r\n      \"bless\" : null,\r\n      \"divine\" : null,\r\n      \"fossil\" : GetFossilActionInfo,\r\n    }\r\n\r\n    this.actionMap = {\r\n      \"scour\" : ScourItem,\r\n      \"transmute\" : TransmutationItem,\r\n      \"alt\" : AlterationItem,\r\n      \"aug\" : AugmentationItem,\r\n      \"regal\" : RegalItem,\r\n      \"alch\" : AlchemyItem,\r\n      \"chaos\" : ChaosItem,\r\n      \"exalt\" : ExaltedItem,\r\n      \"exalt_inf\" : ExaltedWithInfluenceItem,\r\n      \"annul\" : AnnulmentItem,\r\n      \"bless\" : BlessedItem,\r\n      \"divine\" : DivineItem,\r\n      \"fossil\" : FossilItem,\r\n    }\r\n\r\n    this.theoryCrafterContext = new TheoryCrafterContext(_mods, seedrandom());\r\n\r\n    const normalItemState = CreateItem(\"Metadata/Items/Armours/Boots/BootsAtlas1\", 100, this.theoryCrafterContext);\r\n    this.state = this.initState(normalItemState);\r\n  }\r\n\r\n  initState(initItemState) {\r\n    return {\r\n      itemStateHistory : [ { itemState: initItemState, action : \"\" } ],\r\n      itemStateHistoryIdx : 0,\r\n      lastCommand : \"\",\r\n      selectedBaseId : initItemState.baseItemId,\r\n      selectedBaseLevel : initItemState.level,\r\n      sortMods : false,\r\n      selectedFossils : [],\r\n      selectedActionForModList : \"\",\r\n      expandedGroups : new Set(),\r\n    };\r\n  }\r\n\r\n  pushState(newState, actionName) {\r\n    return { ...this.state, itemStateHistory : [ ...this.state.itemStateHistory, { itemState: newState, action : actionName } ] };\r\n  }\r\n\r\n  getState() {\r\n    return this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState;\r\n  }\r\n\r\n  canUndoState() {\r\n    return this.state.itemStateHistoryIdx > 0;\r\n  }\r\n\r\n  getUndoLabel() {\r\n    if (!this.canUndoState()) {\r\n      return \"Undo\";\r\n    }\r\n    return \"Undo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  undoState() {\r\n    if (this.state.itemStateHistoryIdx > 0)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx - 1 });\r\n    }\r\n  }\r\n\r\n  canRerollAction() {\r\n    return (this.state.itemStateHistory[this.state.itemStateHistoryIdx].action !== \"\") \r\n      && (this.state.itemStateHistoryIdx > 0);\r\n  }\r\n\r\n  getRerollLabel() {\r\n    if (!this.canRerollAction()) {\r\n      return \"Reroll Action\";\r\n    }\r\n    return \"Reroll \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  rerollAction() {\r\n    if (!this.canRerollAction()) {\r\n      return;\r\n    }\r\n    const action = this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n    const previousItemState = this.state.itemStateHistory[this.state.itemStateHistoryIdx - 1].itemState;\r\n    const canPerformAction = this.canPerformAction(action, previousItemState);\r\n    if (!canPerformAction) {\r\n      return;\r\n    }\r\n    this.performAction(action, previousItemState, this.state.itemStateHistoryIdx);\r\n  }\r\n\r\n  canRedoState() {\r\n    return this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1;\r\n  }\r\n\r\n  getRedoLabel() {\r\n    if (!this.canRedoState()) {\r\n      return \"Redo\";\r\n    }\r\n    return \"Redo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx + 1].action;\r\n  }\r\n\r\n  redoState() {\r\n    if (this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx + 1 });\r\n    }\r\n  }\r\n\r\n  insertAndCutStateAt(newState, actionName, index) {\r\n    const newStateHistory = this.state.itemStateHistory.slice(0, index);\r\n    newStateHistory.push( { itemState: newState, action : actionName } );\r\n    return { ...this.state, itemStateHistory : newStateHistory, itemStateHistoryIdx : index };    \r\n  }\r\n\r\n  insertAndCutState(newState, actionName) {\r\n    return this.insertAndCutStateAt(newState, actionName, this.state.itemStateHistoryIdx + 1);\r\n  }\r\n\r\n  canPerformAction(actionName, itemState) {\r\n    return this.splitAndTestAction(actionName, itemState);\r\n  }\r\n\r\n  splitAndTestAction(actionName, itemState) {\r\n    const splitAction = actionName.split(\" \");\r\n    return this.testMap[splitAction[0]](itemState, this.theoryCrafterContext, ...(splitAction.slice(1)));\r\n  }\r\n\r\n  performAction(actionName, itemState, splitLocationOverride = null) {\r\n    return this.splitAndExecuteAction(actionName, itemState, splitLocationOverride);\r\n  }\r\n\r\n  splitAndExecuteAction(actionName, itemState, splitLocationOverride = null) {\r\n    const splitAction = actionName.split(\" \");\r\n    const result = this.actionMap[splitAction[0]](itemState, this.theoryCrafterContext, ...(splitAction.slice(1)));\r\n    if (result[0]) {\r\n      if (splitLocationOverride) {\r\n        this.setState(this.insertAndCutStateAt(result[1], actionName, splitLocationOverride));\r\n      }\r\n      else {\r\n        this.setState(this.insertAndCutState(result[1], actionName));\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSelectedBaseChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseId : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectList() {\r\n    const baseItems = {}\r\n    for (const baseItemId in base_items) {\r\n      if (base_items[baseItemId][\"release_state\"] === \"released\") {\r\n        const domain = base_items[baseItemId][\"domain\"];\r\n        if (domain === \"item\" || domain === \"flask\" || domain === \"abyss_jewel\" || domain === \"misc\") {\r\n          baseItems[baseItemId] = baseItemId.slice(baseItemId.lastIndexOf('/') + 1);\r\n        }\r\n      }\r\n    }\r\n    return <select value={this.state.selectedBaseId} onChange={(x) => this.handleSelectedBaseChanged(x)} key=\"baseItemSelector\">\r\n      { Object.keys(baseItems).map( (k) => <option value={k} key={k}>{baseItems[k]}</option> ) }\r\n    </select>;\r\n  }\r\n\r\n  handleSelectedBaseLevelChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseLevel : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectLevel() {\r\n    return <input value={this.state.selectedBaseLevel} onChange={(x) => this.handleSelectedBaseLevelChanged(x)} key=\"baseItemLevelInput\"/>;\r\n  }\r\n\r\n  handleBaseSelectButtonClicked() {\r\n    const normalItemState = CreateItem(this.state.selectedBaseId, this.state.selectedBaseLevel, this.theoryCrafterContext);\r\n    this.setState({ ...this.initState(normalItemState), sortMods: this.state.sortMods });\r\n  }\r\n\r\n  RenderBaseSelectButton() {\r\n    return <button onClick={() => this.handleBaseSelectButtonClicked()} key=\"baseItemCreateButton\">Create New Item</button>;\r\n  }\r\n\r\n  RenderCraftingButtonManual(actionName, label, itemUrl, itemTooltip, dropdownAction = null) {\r\n    const buttonOnClick = () => this.performAction(actionName, this.getState());\r\n    const isEnabled = this.canPerformAction(actionName, this.getState());\r\n    const showDropDown = dropdownAction !== null;\r\n\r\n    const craftingButtons = [<CraftingButton \r\n      itemUrl={itemUrl}\r\n      itemTooltip={itemTooltip}\r\n      onClick={buttonOnClick} \r\n      enabled={isEnabled} \r\n      label={label} \r\n      key={actionName} \r\n      left={showDropDown ? \"true\" : \"false\"}\r\n    />]\r\n    if (showDropDown) {\r\n      craftingButtons.push(\r\n        <CraftingButton\r\n          onClick={dropdownAction} \r\n          enabled={true}\r\n          label=\"▼\"\r\n          key={actionName + \"_dropdown\"}\r\n          right=\"true\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return craftingButtons;\r\n  }\r\n\r\n  RenderCraftingButton(actionName, label, currencyImage, dropdownAction = null) {\r\n    const buttonOnClick = () => this.performAction(actionName, this.getState());\r\n    const isEnabled = this.canPerformAction(actionName, this.getState());\r\n\r\n    const baseItem = base_items[currencyImage];\r\n    if (!baseItem) {\r\n      console.log(\"No base item for \" + currencyImage + \" (label: \" + label + \")\");\r\n      return NormalButton({onClick : buttonOnClick, disabled: !isEnabled, label: label});\r\n    }\r\n  \r\n    let itemArtSubPath = baseItem.visual_identity.dds_file;\r\n    if (!itemArtSubPath) {\r\n      console.log(\"No item art for \" + currencyImage + \" (label: \" + label + \")\");\r\n      return NormalButton({onClick : buttonOnClick, disabled: !isEnabled, label: label});\r\n    }\r\n  \r\n    let itemTooltip = baseItem.name;\r\n  \r\n    const extensionIdx = itemArtSubPath.lastIndexOf('.');\r\n    if (extensionIdx >= 0) {\r\n      itemArtSubPath = itemArtSubPath.slice(0, extensionIdx);\r\n    }\r\n  \r\n    const itemUrl = \"https://web.poecdn.com/image/\" + itemArtSubPath + \".png\";\r\n\r\n    return this.RenderCraftingButtonManual(actionName, label, itemUrl, itemTooltip, dropdownAction);\r\n  }\r\n\r\n  RenderFossilSelector(fossilId, label) {\r\n    const checked = this.state.selectedFossils.includes(fossilId);\r\n    const enabled = this.state.selectedFossils.length < 4 || checked;\r\n    return <NormalButton onClick={ () => this.handleFossilSelectorClicked(fossilId) } enabled={enabled} key={fossilId} label={(checked ? \"☒\" : \"☐\") + \" \" + label + \" Fossil\"} />\r\n  }\r\n\r\n  handleFossilSelectorClicked(fossilId) {\r\n    const idx = this.state.selectedFossils.findIndex((x) => { return x === fossilId });\r\n    let newState = null;\r\n    if (idx >= 0) {\r\n      newState = { ...this.state };\r\n      newState.selectedFossils.splice(idx, 1);\r\n    }\r\n    else {\r\n      newState = { ...this.state, selectedFossils : [...this.state.selectedFossils, fossilId] };\r\n    }\r\n    // TODO: Delete this when user can manually select action for mod list\r\n    if (newState.selectedFossils.length > 0 && CanFossilItem(this.getState(), this.context, ...newState.selectedFossils)) {\r\n      newState.selectedActionForModList = \"fossil\";\r\n    }\r\n    else {\r\n      newState.selectedActionForModList = \"\";\r\n    }\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleSortModsToggled(e) {\r\n    this.setState( {...this.state, sortMods : e.target.checked} );\r\n  }\r\n\r\n  getActionInfoFunctionForModList() {\r\n    if (this.state.selectedActionForModList === \"\") {\r\n      const rarity = this.getState().rarity;\r\n      if (rarity === \"normal\") {\r\n        return this.getActionInfoMap[\"transmute\"];\r\n      }\r\n      if (rarity === \"magic\") {\r\n        return this.getActionInfoMap[\"regal\"];\r\n      }\r\n      if (rarity === \"rare\") {\r\n        return this.getActionInfoMap[\"exalt\"];\r\n      }\r\n      return this.getActionInfoMap[\"exalt\"];\r\n    }\r\n    return this.getActionInfoMap[this.state.selectedActionForModList];\r\n  }\r\n\r\n  getAdditionalActionParametersForModList() {\r\n    if (this.state.selectedActionForModList === \"fossil\") {\r\n      return [...this.state.selectedFossils];\r\n    }\r\n    // TODO: Add essences here!\r\n    return [];\r\n  }\r\n\r\n  rollTest() {\r\n    let itemState = cloneItemState(this.getState());\r\n    for (let i = 0; i < 100; ++i) {\r\n      itemState = ScourItem(itemState, this.theoryCrafterContext)[1];\r\n      itemState = TransmutationItem(itemState, this.theoryCrafterContext)[1];\r\n    }\r\n    this.setState(this.insertAndCutState(itemState, \"scour\"));\r\n  }\r\n\r\n  onGroupClicked(groupKey) {\r\n    const isExpanded = this.state.expandedGroups.has(groupKey);\r\n    let newSet = new Set(this.state.expandedGroups);\r\n    if (isExpanded) {\r\n      newSet.delete(groupKey);\r\n    }\r\n    else {\r\n      newSet.add(groupKey);\r\n    }\r\n    this.setState({ ...this.state, expandedGroups : newSet });\r\n  }\r\n\r\n  render() {\r\n    return [\r\n        // <div key=\"space\">\r\n        //   &nbsp;\r\n        // </div>,\r\n        // <div className=\"craftingButtonContainer\" key=\"buttonTest\">\r\n        //   &nbsp;\r\n        //   <button className=\"craftingButton\">\r\n        //     <div className=\"label\">\r\n        //       <img src={CurrencyImages[\"CurrencyVaal.png\"]}></img>\r\n        //     </div>\r\n        //   </button>\r\n        //   &nbsp;\r\n        //   <button className=\"craftingButton left\">\r\n        //     <div className=\"label\">\r\n        //       <img src={CurrencyImages[\"CurrencyModValues.png\"]}></img>\r\n        //     </div>\r\n        //   </button>\r\n        //   <button className=\"craftingButton right\">\r\n        //     <div className=\"label\">\r\n        //     ▼\r\n        //     </div>\r\n        //   </button>          \r\n        //   &nbsp;\r\n        //   <button className=\"craftingButton left\" disabled>\r\n        //     <div className=\"label\">\r\n        //       <img src={CurrencyImages[\"CurrencyRerollRare.png\"]}></img>\r\n        //     </div>\r\n        //   </button>\r\n        //   <button className=\"craftingButton right\" disabled>\r\n        //     <div className=\"label\">\r\n        //     ▼\r\n        //     </div>\r\n        //   </button>                    \r\n        // </div>,\r\n        // <div key=\"space2\">\r\n        //   &nbsp;\r\n        // </div>,\r\n        <div key=\"baseSelection\">\r\n          { [\r\n            this.RenderBaseSelectList(),\r\n            this.RenderBaseSelectLevel(),\r\n            this.RenderBaseSelectButton(),\r\n          ] }\r\n        </div>,\r\n        <div key=\"fossilSelectors\">\r\n          { [\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingAbyss\", \"Hollow\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingAttackMods\", \"Serrated\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingBleedPoison\", \"Corroded\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingCasterMods\", \"Aetheric\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingChaos\", \"Aberrant\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingCold\", \"Frigid\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingCorruptEssence\", \"Glyphic\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingDefences\", \"Dense\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingElemental\", \"Prismatic\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingEnchant\", \"Enchanted\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingFire\", \"Scorched\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingGemLevel\", \"Faceted\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingLife\", \"Pristine\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingLightning\", \"Metallic\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingLuckyModRolls\", \"Sanctified\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingMana\", \"Lucent\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingMinionsAuras\", \"Bound\"),\r\n//            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingMirror\", \"Fractured\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingPhysical\", \"Jagged\"),\r\n//            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingQuality\", \"Perfect\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingRandom\", \"Tangled\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingSellPrice\", \"Gilded\"),\r\n//            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingSockets\", \"Encrusted\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingSpeed\", \"Shuddering\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingVaal\", \"Bloodstained\"),\r\n          ] }\r\n        </div>,\r\n        <div key=\"undoDiv\"><NormalButton onClick={ () => this.undoState() } enabled={ this.canUndoState() } label={ this.getUndoLabel() } key=\"undo\" /></div>,\r\n        <div key=\"redoDiv\"><NormalButton onClick={ () => this.redoState() } enabled={ this.canRedoState() } label={ this.getRedoLabel() } key=\"redo\" /></div>,\r\n        <div key=\"rerollDiv\"><NormalButton onClick={ () => this.rerollAction() } enabled={ this.canRerollAction() } label={ this.getRerollLabel() } key=\"undo\" /></div>,\r\n//        <div key=\"rollTest\"><CraftingButton onClick={ () => this.rollTest() } enabled={ true } label=\"Roll 100000\" /></div>,\r\n        <div key=\"sortMods\"><input type=\"checkbox\" onChange={(e) => this.handleSortModsToggled(e)} checked={this.state.sortMods} /><span style={{color: 'white'}}>Sort Mods</span></div>,\r\n        <div className=\"yetAnotherContainer\" key=\"yetAnotherContainer\">\r\n        <div className=\"everythingContainer\" key=\"everythingContainer\">\r\n        <div className=\"itemAndModListContainer\" key=\"itemAndModListContainer\">\r\n          {[\r\n            <div className=\"craftedItemContainer\" key=\"craftedItemContainer\">\r\n              <div className=\"craftingButtonSection\" key=\"craftingButtonSection\">\r\n                <div className=\"craftingButtonLine\" key=\"craftingButtonLine1\">\r\n                { [\r\n                  this.RenderCraftingButton(\"transmute\", \"Transmutation\", \"Metadata/Items/Currency/CurrencyUpgradeToMagic\"),\r\n                  this.RenderCraftingButton(\"aug\", \"Augmentation\", \"Metadata/Items/Currency/CurrencyAddModToMagic\"),\r\n                  this.RenderCraftingButton(\"alt\", \"Alteration\", \"Metadata/Items/Currency/CurrencyRerollMagic\"),\r\n                  this.RenderCraftingButton(\"regal\", \"Regal\", \"Metadata/Items/Currency/CurrencyUpgradeMagicToRare\"),\r\n                  this.RenderCraftingButton(\"alch\", \"Alchemy\", \"Metadata/Items/Currency/CurrencyUpgradeToRare\"),\r\n                  this.RenderCraftingButton(\"chaos\", \"Chaos\", \"Metadata/Items/Currency/CurrencyRerollRare\"),\r\n                  this.RenderCraftingButton(\"exalt\", \"Exalted\", \"Metadata/Items/Currency/CurrencyAddModToRare\"),\r\n                  this.RenderCraftingButtonManual([\"fossil\", ...this.state.selectedFossils].join(\" \"), \"Fossil\", \"https://web.poecdn.com/image/Art/2DItems/Currency/Delve/Reroll2x2C.png\", \"Fossil\", () => {})\r\n                ] }\r\n                </div>\r\n                <div className=\"craftingButtonLine\" key=\"craftingButtonLine2\">\r\n                { [\r\n                  this.RenderCraftingButton(\"scour\", \"Scour\", \"Metadata/Items/Currency/CurrencyConvertToNormal\"),\r\n                  this.RenderCraftingButton(\"annul\", \"Annulment\", \"Metadata/Items/Currency/CurrencyRemoveMod\"),\r\n                  this.RenderCraftingButton(\"bless\", \"Blessed\", \"Metadata/Items/Currency/CurrencyRerollImplicit\"),\r\n                  this.RenderCraftingButton(\"divine\", \"Divine\", \"Metadata/Items/Currency/CurrencyModValues\"),\r\n                  this.RenderCraftingButton(\"exalt_inf crusader\", \"Crusader Exalt\", \"Metadata/Items/AtlasExiles/AddModToRareCrusader\"),\r\n                  this.RenderCraftingButton(\"exalt_inf hunter\", \"Hunter Exalt\", \"Metadata/Items/AtlasExiles/AddModToRareHunter\"),\r\n                  this.RenderCraftingButton(\"exalt_inf redeemer\", \"Redeemer Exalt\", \"Metadata/Items/AtlasExiles/AddModToRareRedeemer\"),\r\n                  this.RenderCraftingButton(\"exalt_inf warlord\", \"Warlord Exalt\", \"Metadata/Items/AtlasExiles/AddModToRareWarlord\"),                      \r\n                ] }\r\n                </div>\r\n              </div>\r\n              <CraftedItem \r\n                itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } \r\n                context={this.theoryCrafterContext} \r\n                sortMods={this.state.sortMods} \r\n                key=\"craftedItem\" \r\n              />\r\n            </div>,\r\n            <div className=\"modListContainer\" key=\"modListContainer\">\r\n              <ModList \r\n                expandedGroups={this.state.expandedGroups} \r\n                onGroupClicked={(groupKey) => this.onGroupClicked(groupKey)} \r\n                getActionInfoFunction={this.getActionInfoFunctionForModList()}\r\n                getActionInfoAdditionalParameters={this.getAdditionalActionParametersForModList()}\r\n                fossilTypes={this.state.selectedFossils} \r\n                itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } \r\n                context={this.theoryCrafterContext} \r\n                key=\"modList\"\r\n              />\r\n            </div>\r\n          ]}\r\n        </div>\r\n        </div>\r\n        </div>\r\n    ]\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <TheoryCrafter />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}