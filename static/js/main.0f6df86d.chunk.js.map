{"version":3,"sources":["Translation.js","RareItemnames.js","ModGroups.js","App.js","serviceWorker.js","index.js"],"names":["TranslationHelper","IndexHandlers","v","toFixed","Math","floor","stringformat","fmt","args","Array","prototype","slice","call","arguments","replace","match","number","GetTranslationLinesForMod","translationJson","mod","values","consumedIdxs","Set","translationLines","statIdx","has","statObj","statId","translationIdx","add","translation","translationStatIdx","findIndex","x","translationLine","numStatsInTranslation","length","fill","addlStatIdx","addlStat","addlStatId","addlStatTranslationIdx","push","GetTranslationRuleForLine","line","translationRule","conditionsFailed","condition","value","ApplyIndexHandlers","indexHandlers","handler","this","GetStringForTranslationRule","rule","replacementStrings","replacementMin","replacementMax","replacementValue","replacementCombined","GetStringsForTranslationLines","strings","lineIdx","concat","split","TranslateMod","RarePrefixes","RareSuffixes","GenerateRareName","itemData","rng","prefixIdx","suffixPool","includes","ModLookupTables","domainTable","groupedModTable","firstStatLine","modId","domain","group","type","addToDomainTable","addToGroupedModTable","statLineIdx","key","getGroupedTableKey","ParseModGroups","mods","stats","modLookupTables","statKeys","Object","keys","firstStatIdx","firstStatId","addFirstStatLine","randRange","minInclusive","maxInclusive","quick","PropertyLine","props","replacementIdx","replacementSpans","map","className","lineSplit","output","i","TipLine","ModLine","ItemNameLine","topLine","bottomLine","ItemHeader","double","generatedName","itemTypeName","leftSymbolClass","influences","rightSymbolClass","CraftedItem","base_items","itemState","baseItemId","modInstance","generationType","context","id","toUpperCase","tierCount","tier","tierCountAtItemLevel","stat_translations","getStatLines","getTipLine","showMods","implicits","sortMods","SortMods","getImplicitLine","affixes","getAffixLine","groups","separatedGroups","separatoridx","rarity","getItemTypeName","level","getGroupsWithSeparators","getImplicitBoxes","getAffixBoxes","React","Component","ModListLine","spanIdx","nameLineElements","nameLines","splice","tierString","weight","prob","ModList","modList","GetValidModsAndWeightsForItem","sort","a","b","ModIdComparer","modData","modWeight","modName","modTierInfo","GetTierForMod","CanBaseItemHaveRarity","GetSpawnWeightForMod","tags","spawnWeight","GetPrefixCount","existingAffixCount","GetSuffixCount","GetAffixCount","GetPrefixLimitForRarity","baseItem","GetSuffixLimitForRarity","GetAffixLimitForRarity","GetAffixLimit","CanModBeAddedToItem","hasPrefixSlots","hasSuffixSlots","existingModGroups","modGroup","rarityOverride","GetItemTags","validMods","affix","existingMod","modIds","getDomainTable","GetValidModsAndWeightsForItemWithPositiveWeightTag","tag","find","GetInfluenceTag","influence","baseItemClass","item_classes","influenceTagId","influenceTag","GetAddedTags","GetBaseItemTags","implicit","RollModValues","statRolls","stat","modTier","modCount","modCountAtItemLevel","modLevel","baseItemTags","otherModIds","getGroupedTable","otherModId","otherMod","CreateRolledMod","tierValues","RollRareName","RareItemNames","RollRareAffixCount","maxAffixCount","randInt","cloneMods","modArray","newArray","oldModIdx","cloneItemState","corruptions","CreateItem","corrupted","quality","implicitId","AddRandomModFromListAndWeights","modsAndWeights","newItemState","modPool","randRoll","totalWeight","weightAccum","modEndWeight","PickModFromWeightedModPool","modAndWeight","CreateWeightedModPool","AddRandomMod","generationTypeOrder","modA","modB","modAGenerationType","modBGenerationType","modAFirstStatIdx","getFirstStatLine","modBFirstStartIdx","modARequiredLevel","modBRequiredLevel","sortedList","ModComparer","CanAddInfluenceToItem","AddInfluenceToItem","newState","CanScourItem","ScourItem","CanTransmutationItem","TransmutationItem","numMods","CanAlterationItem","AlterationItem","CanAugmentationItem","AugmentationItem","result","CanRegalItem","RegalItem","CanAlchemyItem","AlchemyItem","CanChaosItem","ChaosItem","CanExaltedItem","ExaltedItem","CanExaltedWithInfluenceItem","ExaltedWithInfluenceItem","CanAnnulmentItem","AnnulmentItem","numAffixes","affixIdxToRemove","CanBlessedItem","BlessedItem","CanDivineItem","DivineItem","CraftingButton","onClick","disabled","enabled","label","TheoryCrafterContext","modDatabase","ModGroups","TheoryCrafter","testMap","actionMap","theoryCrafterContext","_mods","seedrandom","normalItemState","state","initState","initItemState","itemStateHistory","action","itemStateHistoryIdx","lastCommand","selectedBaseId","selectedBaseLevel","actionName","canUndoState","setState","canRerollAction","previousItemState","insertAndCutStateAt","canRedoState","index","newStateHistory","getState","insertAndCutState","e","target","baseItems","lastIndexOf","onChange","handleSelectedBaseChanged","k","handleSelectedBaseLevelChanged","handleBaseSelectButtonClicked","performAction","canPerformAction","checked","RenderBaseSelectList","RenderBaseSelectLevel","RenderBaseSelectButton","RenderCraftingButton","undoState","getUndoLabel","redoState","getRedoLabel","rerollAction","getRerollLabel","rollTest","handleSortModsToggled","style","color","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4xpqUAAqBA,G,yCAAAA,EACVC,cAAgB,CACnB,eAAgB,SAAAC,GAAO,MAAW,GAAJA,GAC9B,eAAgB,SAAAA,GAAO,MAAW,GAAJA,GAC9B,uBAA0B,SAAAA,GAAO,OAAOA,EAAI,IAC5C,sBAAyB,SAAAA,GAAO,OAAOA,EAAI,KAC3C,iCAAoC,SAAAA,GAAO,OAAQA,EAAI,KACvD,0BAA6B,SAAAA,GAAO,OAAQA,EAAI,KAAKC,QAAQ,IAC7D,wBAA2B,SAAAD,GAAO,OAAOA,EAAI,KAC7C,4BAA+B,SAAAA,GAAO,OAAQA,EAAI,KAAMC,QAAQ,IAChE,4BAA+B,SAAAD,GAAO,OAAQA,EAAI,KAAMC,QAAQ,IAChE,4BAA+B,SAAAD,GAAO,OAAQA,EAAI,KAAMC,QAAQ,IAChE,wCAA2C,SAAAD,GAAO,OAAQA,EAAI,KAAMC,QAAQ,IAC5E,+BAAkC,SAAAD,GAAO,OAAOA,EAAI,KACpD,yCAA4C,SAAAA,GAAO,OAAOA,EAAI,IAAM,KACpE,OAAU,SAAAA,GAAO,OAAQA,GACzB,kBAAqB,SAAAA,GAAO,OAAOA,EAAI,GACvC,oBAAuB,SAAAA,GAAO,OAAOA,EAAI,KACzC,yBAA4B,SAAAA,GAAO,OAAQA,EAAI,IAAIC,QAAQ,IAC3D,6BAAgC,SAAAD,GAAO,OAAQA,EAAI,IAAIC,QAAQ,IAC/D,6BAAgC,SAAAD,GAAO,OAAQA,EAAI,IAAIC,QAAQ,IAC/D,6BAAgC,SAAAD,GAAO,OAAQA,EAAI,IAAIC,QAAQ,IAC/D,yCAA4C,SAAAD,GAAO,OAAQA,EAAI,IAAIC,QAAQ,IAC3E,kBAAqB,SAAAD,GAAO,OAAOE,KAAKC,MAAMH,EAAI,IAClD,cAAiB,SAAAA,GAAO,OAAOA,EAAI,GACnC,kBAAqB,SAAAA,GAAO,OAAOE,KAAKC,MAAMH,EAAI,KAClD,iBAAoB,SAAAA,GAAO,OAAOA,EAAI,IACtC,sBAAyB,SAAAA,GAAO,OAAOE,KAAKC,MAAMH,EAAI,KACtD,iCAAoC,SAAAA,GAAO,OAA4B,EAArBE,KAAKC,MAAMH,EAAI,KACjE,aAAgB,SAAAA,GAAO,OAAW,GAAJA,IA7BjBF,EAgCVM,aAAe,SAASC,GAC3B,IAAMC,EAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GACnD,OAAON,EAAIO,QAAQ,YAAY,SAACC,EAAOC,GACnC,OAAOR,EAAK,GAAGQ,OAnCNhB,EAuCViB,0BAA4B,SAASC,EAAiBC,GAAqB,IAAhBC,EAAe,uDAAN,KACnEC,EAAe,IAAIC,IACnBC,EAAmB,GAFsD,WAGpEC,GACL,GAAIH,EAAaI,IAAID,GACjB,iBAEJ,IAAME,EAAUP,EAAG,MAAUK,GACvBG,EAASD,EAAO,GAGtB,IAAK,IAAME,KAFXP,EAAaQ,IAAIL,GAEYN,EAAiB,CAC1C,IAAMY,EAAcZ,EAAgBU,GAC9BG,EAAqBD,EAAW,IAAQE,WAAW,SAAAC,GAAC,OAAIA,IAAMN,KACpE,GAAII,GAAsB,EAAG,CACzB,IAAIG,EAAkB,GACtBA,EAAe,KAAWN,EAC1B,IAAMO,EAAwBL,EAAW,IAAQM,OACjDF,EAAe,KAAWzB,MAAM0B,GAAuBE,KAAK,GAC5DH,EAAe,KAAWzB,MAAM0B,GAAuBE,KAAK,GACxDjB,IACAc,EAAe,OAAazB,MAAM0B,GAAuBE,KAAK,IAElEH,EAAe,KAASH,GAAsBL,EAAO,IACrDQ,EAAe,KAASH,GAAsBL,EAAO,IACjDN,IACAc,EAAe,OAAWH,GAAsBX,EAAOI,IAZlC,eAchBc,GACL,IAAMC,EAAWpB,EAAG,MAAUmB,GACxBE,EAAaD,EAAQ,GAC3B,GAAIlB,EAAaI,IAAIa,GACjB,iBAEJ,IAAMG,EAAyBX,EAAW,IAAQE,WAAW,SAAAC,GAAC,OAAIA,IAAMO,KACpEC,EAAyB,IACzBP,EAAe,KAASO,GAA0BF,EAAQ,IAC1DL,EAAe,KAASO,GAA0BF,EAAQ,IACtDnB,IACAc,EAAe,OAAWO,GAA0BrB,EAAOkB,IAE/DjB,EAAaQ,IAAIS,KAbzB,IAAK,IAAIA,KAAenB,EAAG,MAAW,EAA7BmB,GAgBTf,EAAiBmB,KAAKR,MAzClC,IAAK,IAAIV,KAAWL,EAAG,MAAW,EAAzBK,GA6CT,OAAOD,GAvFMvB,EA0FV2C,0BAA4B,SAASzB,EAAiB0B,GACzD,IAAMd,EAAcZ,EAAgB0B,EAAI,MAApB,QAD2C,uBAE/D,YAA8Bd,EAA9B,+CAA2C,CAAC,IAAjCe,EAAgC,QACnCC,GAAmB,EACvB,IAAK,IAAMtB,KAAWoB,EAAI,KAAU,CAChC,IAAIG,EAAYF,EAAe,UAAcrB,GACvCwB,EAAQJ,EAAI,KAASpB,GAC3B,GAAI,QAASuB,GACLC,EAAQD,EAAS,IAAS,CAC1BD,GAAmB,EACnB,MAGR,GAAI,QAASC,GACLC,EAAQD,EAAS,IAAS,CAC1BD,GAAmB,EACnB,OAIZ,IAAKA,EACD,OAAOD,GArBgD,kFAwB/D,OAAO,MAlHM7C,EAqHViD,mBAAqB,SAASC,EAAeF,GAAQ,IAAD,uBACvD,YAAsBE,EAAtB,+CAAqC,CAAC,IAA3BC,EAA0B,QACjCH,EAAQI,KAAKnD,cAAckD,GAASH,IAFe,kFAIvD,OAAOA,GAzHMhD,EA4HVqD,4BAA8B,SAASnC,EAAiBoC,EAAMV,GACjE,IAAMd,EAAcZ,EAAgB0B,EAAI,MACpCW,EAAqB9C,MAAMqB,EAAW,IAAQM,QAClD,IAAK,IAAMZ,KAAWM,EAAW,IAAS,CACtC,IAAM0B,EAAiBJ,KAAKH,mBAAmBK,EAAI,eAAmB9B,GAAUoB,EAAI,KAASpB,IACvFiC,EAAiBL,KAAKH,mBAAmBK,EAAI,eAAmB9B,GAAUoB,EAAI,KAASpB,IACzFkC,EAAmB,KACnB,WAAYd,IACZc,EAAmBN,KAAKH,mBAAmBK,EAAI,eAAmB9B,GAAUoB,EAAI,OAAWpB,KAG/F,IAAImC,EAAsB,GACtBH,IAAmBC,EACnBE,EAAsBH,GAGtBG,EAAsB,IAAMH,EAAiB,IAAMC,EAAiB,IAChEC,IACAC,EAAsBD,EAAmBC,IAGjDJ,EAAmB/B,GAAW8B,EAAI,OAAW9B,GAASV,QAAQ,IAAK6C,GAEvE,OAAOP,KAAK9C,aAAagD,EAAI,OAAYC,IAnJ5BvD,EAsJV4D,8BAAgC,SAAS1C,EAAiBK,GAC7D,IAAIsC,EAAU,GACd,IAAK,IAAMC,KAAWvC,EAAkB,CACpC,IAAMsB,EAAkBO,KAAKT,0BAA0BzB,EAAiBK,EAAiBuC,IACrFjB,IACAgB,EAAUA,EAAQE,OAAOX,KAAKC,4BAA4BnC,EAAiB2B,EAAiBtB,EAAiBuC,IAAUE,MAAM,QAGrI,OAAOH,GA9JM7D,EAiKViE,aAAe,SAAS/C,EAAiBC,GAAqB,IAAhBC,EAAe,uDAAN,KACpDG,EAAmB6B,KAAKnC,0BAA0BC,EAAiBC,EAAKC,GAC9E,OAAOgC,KAAKQ,8BAA8B1C,EAAiBK,I,qBCnK7D2C,EAAe,CACjB,QAAS,aAAc,aAAc,QAAS,WAAY,SAAU,QAAS,UAAW,YAAa,QAAS,UAAW,YAAa,WAAY,SAAU,aAAc,YAAa,QAAS,QAAS,OAAQ,SAAU,QAAS,OAAQ,OAAQ,QAAS,WAAY,OAAQ,MAAO,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,QAAS,SAAU,SAAU,WAAY,SAAU,QAAS,YAAa,OAAQ,UAAW,SAAU,WAAY,YAAa,OAAQ,cAAe,UAAW,SAAU,OAAQ,UAAW,OAAQ,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,UAAW,UAAW,YAAa,UAAW,QAAS,SAAU,MAAO,SAGrpBC,EAAe,CACjB,eAAiB,CAAC,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,OAAQ,SAAU,OAAQ,UAAW,SAAU,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,WAAY,UAC/K,eAAiB,CAAC,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,OAAQ,SAAU,OAAQ,UAAW,SAAU,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,WAAY,UAC/K,gBAAkB,CAAC,OAAQ,SAAU,QAAS,OAAQ,QAAS,QAAS,UAAW,QAAS,QAAS,UAAW,UAAW,QAAS,UAAW,MAAO,OAAQ,OAAQ,UAAW,UAAW,OAAQ,WAAY,SAChN,gBAAkB,CAAC,OAAQ,SAAU,QAAS,OAAQ,QAAS,QAAS,UAAW,QAAS,QAAS,UAAW,UAAW,QAAS,UAAW,MAAO,OAAQ,OAAQ,UAAW,UAAW,OAAQ,WAAY,SAChN,QAAY,CAAC,OAAQ,OAAQ,UAAW,OAAQ,QAAS,QAAS,UAAW,MAAO,QAAS,UAAW,QAAS,MAAO,OAAQ,UAAW,OAAQ,QAAS,OAAQ,UACpK,MAAU,CAAC,OAAQ,OAAQ,SAAU,OAAQ,QAAS,MAAO,QAAS,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,UAC1J,WAAe,CAAC,OAAQ,OAAQ,SAAU,OAAQ,QAAS,MAAO,QAAS,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,UAC/J,SAAa,CAAC,OAAQ,OAAQ,SAAU,OAAQ,QAAS,MAAO,QAAS,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,UAC7J,iBAAmB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,MAAO,UAAW,UAAW,QAAS,SAAU,SAAU,OAAQ,QAAS,SAAU,UAAW,UACtN,2BAA6B,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,MAAO,UAAW,UAAW,QAAS,SAAU,SAAU,OAAQ,QAAS,SAAS,UAAW,UAC/N,iBAAmB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,MAAO,UAAW,UAAW,QAAS,SAAU,SAAU,OAAQ,QAAS,SAAU,UAAW,UACtN,OAAW,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,UAAW,QAAS,SAAU,SAAU,OAAQ,QAAS,UAAW,UAC/L,cAAgB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,UAAW,QAAS,SAAU,SAAU,OAAQ,QAAS,UAAW,UACpM,KAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,OAAQ,UAAW,SAAU,SAAU,OAAQ,QAAS,UAAW,SAAU,UACjL,IAAQ,CAAC,OAAQ,OAAQ,UAAW,QAAS,SAAU,SAAU,SAAU,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,OAAQ,UAAW,SAAU,SAAU,UAAW,QAAS,SAAU,OAAQ,QACnN,KAAS,CAAC,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,QAAS,QAAS,MAAO,OAAQ,QAAS,OAAQ,SAAU,UAAW,OAAQ,QAAS,QAAS,SAAU,UAG/J,cAAgB,CAAC,WAAY,QAAS,OAAQ,UAAW,WAAY,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,YAAa,YAAa,QAAS,UAAW,SAAU,OAAQ,OAAQ,OAAQ,OAAQ,QACvM,OAAW,CAAC,OAAQ,SAAU,OAAQ,QAAS,QAAS,OAAQ,SAAU,WAAY,OAAQ,OAAQ,OAAQ,OAAQ,YAAa,UAAW,OAAQ,OAAQ,SAAU,QAAS,QACjL,OAAW,CAAC,SAAU,OAAQ,WAAY,UAAW,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,UAAW,QAAS,QAAS,OAAQ,MAAO,SAAU,QAAS,QAC7J,MAAU,CAAC,OAAQ,OAAQ,OAAQ,SAAU,QAAS,OAAQ,OAAQ,WAAY,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,QAAS,QAAS,QAExJ,iBAAmB,CAAC,UAAW,SAAU,OAAQ,QAAS,QAAS,SAAU,QAAS,OAAQ,OAAQ,YAAa,OAAQ,QAAS,OAAQ,OAAQ,SAAU,QAC9J,gBAAkB,CAAC,QAAS,QAAS,UAAW,UAAW,UAAW,OAAQ,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,OAAQ,YAAa,OAAQ,QAAS,QAAS,QAGlL,OAAW,CAAC,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,OAAQ,SAAU,QAAS,SAAU,YAAa,QAAS,UAAW,SAAU,SAAU,WAAY,QAC1K,KAAS,CAAC,OAAQ,SAAU,OAAQ,MAAO,SAAU,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,OAAQ,OAAQ,SAAU,OAAQ,QAAS,SACpJ,KAAS,CAAC,OAAQ,OAAQ,SAAU,QAAS,OAAQ,SAAU,UAAW,OAAQ,QAAS,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,SAAU,OAAQ,SACtK,OAAW,CAAC,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,SAAU,OAAQ,UAAW,QAAS,SAAU,QAAS,MAAO,OAAQ,SAAU,QAAS,QAAS,QAAS,WAG3K,MAAU,CAAC,QAAS,QAAS,QAAS,MAAO,WAAY,QAAS,OAAQ,UAAW,MAAO,OAAQ,UAAW,QAAS,QAAS,OAAQ,SAAU,QAAS,UAAW,MAAO,SAAU,OAAQ,WAAY,QAAS,QAAS,OAAQ,OAAQ,UAAW,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,QAAS,UAAW,SACzU,WAAe,CAAC,QAAS,QAAS,QAAS,MAAO,WAAY,QAAS,OAAQ,UAAW,MAAO,OAAQ,UAAW,QAAS,QAAS,OAAQ,SAAU,QAAS,UAAW,MAAO,SAAU,OAAQ,WAAY,QAAS,QAAS,OAAQ,OAAQ,UAAW,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,QAAS,UAAW,UAuBnU,OAAEC,iBApBV,SAA0BC,EAAUC,GACvC,IAAMC,EAAYnE,KAAKC,MAAMiE,IAAQJ,EAAa9B,QAE9CoC,EAAa,GAcjB,OAfeN,EAAaK,GAeZ,KAXRC,EAFuB,WAA3BH,EAAQ,WACJA,EAAQ,KAASI,SAAS,SACbN,EAAa,kBAGbA,EAAa,iBAIjBA,EAAaE,EAAQ,aAEpBjE,KAAKC,MAAMiE,IAAQE,EAAWpC,WCHvCsC,EAAb,WACI,aAAe,oBACXtB,KAAKuB,YAAc,GACnBvB,KAAKwB,gBAAkB,GACvBxB,KAAKyB,cAAgB,GAJ7B,gDAOQC,EAAOC,EAAQC,EAAOC,GACtB7B,KAAK8B,iBAAiBJ,EAAOC,GAC7B3B,KAAK+B,qBAAqBL,EAAOC,EAAQC,EAAOC,KATxD,uCAYqBH,EAAOM,GAEpBhC,KAAKyB,cAAcC,GAASM,IAdpC,uCAiBqBN,EAAOC,GACdA,KAAU3B,KAAKuB,YAIjBvB,KAAKuB,YAAYI,GAAQrC,KAAKoC,GAH9B1B,KAAKuB,YAAYI,GAAU,CAACD,KAnBxC,2CA0ByBA,EAAOC,EAAQC,EAAOC,GACvC,IAAMI,EAAMjC,KAAKkC,mBAAmBP,EAAQC,EAAOC,GAC7CI,KAAOjC,KAAKwB,gBAIdxB,KAAKwB,gBAAgBS,GAAK3C,KAAKoC,GAH/B1B,KAAKwB,gBAAgBS,GAAO,CAAEP,KA7B1C,qCAoCmBC,GACX,OAAO3B,KAAKuB,YAAYI,KArChC,sCAwCoBA,EAAQC,EAAOC,GAC3B,OAAO7B,KAAKwB,gBAAgBxB,KAAKkC,mBAAmBP,EAAQC,EAAOC,MAzC3E,yCA4CuBF,EAAQC,EAAOC,GAC9B,OAAOF,EAAS,IAAMC,EAAQ,IAAMC,IA7C5C,uCAgDqBH,GACb,OAAO1B,KAAKyB,cAAcC,OAjDlC,KA2Ke,OAAES,eA9EV,SAAwBC,EAAMC,GACjC,IAAIC,EAAkB,IAAIhB,EAEpBiB,EAAWC,OAAOC,KAAKJ,GAE7B,IAAK,IAAMX,KAASU,EAAM,CACtB,IAAMrE,EAAMqE,EAAKV,GAEjBY,EAAgB7D,IAAIiD,EAAO3D,EAAG,OAAYA,EAAG,MAAWA,EAAG,MAE3D,IAAI2E,GAAgB,EACdC,EAAc5E,EAAG,MAAUiB,OAAS,EAAIjB,EAAG,MAAU,GAAb,GAAwB,GACtE,GAAI4E,EAAY3D,OAAS,EACvB,IAAK,IAAIZ,EAAU,EAAGA,EAAUmE,EAASvD,SAAUZ,EAAS,CAE1D,GADgBmE,EAASnE,KACTuE,EAAa,CACzBD,EAAetE,EACjB,OAKNkE,EAAgBM,iBAAiBlB,EAAOgB,GAqD5C,OAAOJ,I,uCClNX,SAASO,EAAU3B,EAAK4B,EAAcC,GACpC,OAAO/F,KAAKC,MAAMiE,EAAI8B,SAAWD,EAAeD,EAAe,IAAMA,EAGvE,SAASG,EAAcC,GAKrB,IAJA,IAAIC,EAAiB,EACjBC,EAAmBF,EAAMlF,OAAOqF,KAAI,SAACxE,GAAD,OAAO,0BAAMyE,UAAU,WAAWrB,IAAKkB,KAAmBtE,MAC5F0E,EAAYL,EAAM1D,KAAKoB,MAAM,OAC/B4C,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAUvE,OAAS,IAAKyE,EAC1CD,EAAOlE,KAAKiE,EAAUE,IACtBD,EAAOlE,KAAK8D,EAAiBK,IAG/B,OADAD,EAAOlE,KAAKiE,EAAUA,EAAUvE,OAAS,IAClC,yBAAKsE,UAAU,gBAAgBE,GAGxC,SAASE,EAASR,GAChB,OAAO,yBAAKI,UAAU,WAAWJ,EAAM1D,MAGzC,SAASmE,EAAST,GAChB,OAAO,yBAAKI,UAAU,WAAWJ,EAAM1D,MAGzC,SAASoE,EAAcV,GACrB,MAAO,CAACA,EAAMW,SAAW,yBAAKP,UAAU,WAAWrB,IAAI,gBAAgBiB,EAAMW,SAAgBX,EAAMY,YAAc,yBAAKR,UAAU,WAAWrB,IAAI,mBAAmBiB,EAAMY,aAG1K,SAASC,EAAYb,GACnB,IAAMc,EAASd,EAAMe,cAAcjF,OAAS,GAAKkE,EAAMgB,aAAalF,OAAS,EACvEmF,EAAkBjB,EAAMkB,WAAWpF,OAAS,EAAIkE,EAAMkB,WAAW,GAAK,GACtEC,EAAmBnB,EAAMkB,WAAWpF,OAAS,EAAIkE,EAAMkB,WAAW,GAAKD,EAC7E,OAAQ,yBAAKb,UAAW,kBAAoBU,EAAS,SAAW,WACtD,0BAAMV,UAAW,YAAca,IAC/B,kBAACP,EAAD,CAAcC,QAASX,EAAMe,cAAeH,WAAYZ,EAAMgB,aAAcjC,IAAI,aAChF,0BAAMqB,UAAW,YAAce,K,IAKrCC,E,0LAEF,OAAOC,EAAWvE,KAAKkD,MAAMsB,UAAUC,YAAhC,O,iCAGEC,EAAaC,GACtB,IAAM5G,EAAMiC,KAAKkD,MAAM0B,QAAQxC,KAAKsC,EAAYG,IAC5CrF,EAAO,GAOX,MANuB,WAAnBmF,GAAkD,WAAnBA,EACjCnF,EAAOmF,EAAe,GAAGG,cAAgBH,EAAepH,MAAM,GAAK,cAAiBQ,EAAG,KAAW,KAAQ2G,EAAYK,UAAY,EAAK,YAAcL,EAAYM,KAAO,GAAK,MAAQN,EAAYK,UAAYL,EAAYO,qBAAuB,GAAK,IAAMP,EAAYK,UAAY,KAAQ,IAEjQ,WAAnBJ,GAAkD,aAAnBA,IACtCnF,EAAOmF,EAAe,GAAGG,cAAgBH,EAAepH,MAAM,GAAK,aAE9D,kBAACmG,EAAD,CAASlE,KAAMA,EAAMyC,IAAKyC,EAAYG,GAAK,W,mCAGvCH,GACX,IAAM3G,EAAMiC,KAAKkD,MAAM0B,QAAQxC,KAAKsC,EAAYG,IAC1C7G,EAAS0G,EAAY1G,OAE3B,OAD2BpB,EAAkBiE,aAAaqE,EAAmBnH,EAAKC,GACxDqF,KAAI,SAACxE,EAAG4E,GAAJ,OAAU,kBAACE,EAAD,CAASnE,KAAMX,EAAGoD,IAAKyC,EAAYG,GAAK,QAAUpB,S,sCAG5EiB,GAEd,GADkB1E,KAAKmF,aAAaT,GACtB1F,OAAS,EACrB,MAAO,CAACgB,KAAKoF,WAAWV,EAAa,YAAa1E,KAAKmF,aAAaT,M,yCAIpD,IAAD,OACbW,EAAWrF,KAAKkD,MAAMsB,UAAUc,UAIpC,OAHItF,KAAKkD,MAAMqC,WACbF,EAAWG,GAASH,EAAUrF,KAAKkD,MAAM0B,UAEpCS,EAAShC,KACd,SAAAxE,GAAC,OAAI,yBAAKyE,UAAU,kBAAkBrB,IAAKpD,EAAEgG,IAAK,EAAKY,gBAAgB5G,S,mCAI9D6F,GACX,MAAO,CAAC1E,KAAKoF,WAAWV,EAAa1E,KAAKkD,MAAM0B,QAAQxC,KAAKsC,EAAYG,IAApC,iBAA6D7E,KAAKmF,aAAaT,M,sCAGrG,IAAD,OACVW,EAAWrF,KAAKkD,MAAMsB,UAAUkB,QAIpC,OAHI1F,KAAKkD,MAAMqC,WACbF,EAAWG,GAASH,EAAUrF,KAAKkD,MAAM0B,UAEpCS,EAAShC,KACd,SAAAxE,GAAC,OAAI,yBAAKyE,UAAU,SAASrB,IAAKpD,EAAEgG,IAAK,EAAKc,aAAa9G,S,8CAIvC+G,GAEtB,IAAIC,EAAkB,GAClBC,EAAe,EAFrB,uBAGE,YAAoBF,EAApB,+CAA4B,CAAC,IAAlBhE,EAAiB,QACtBA,EAAM5C,OAAS,IACjB6G,EAAgBvG,KAAK,yBAAKgE,UAAU,YAAYrB,IAAK,OAAS6D,KAC9DA,IACAD,EAAkBA,EAAgBlF,OAAOiB,KAP/C,kFAUE,OAAOiE,I,+BAIP,OAAO,yBAAKvC,UAAW,eAAiBtD,KAAKkD,MAAMsB,UAAUuB,QAC3D,yBAAKzC,UAAU,eACb,kBAACS,EAAD,CAAYG,aAAclE,KAAKgG,kBAAmB/B,cAAejE,KAAKkD,MAAMsB,UAAUP,cAAeG,WAAYpE,KAAKkD,MAAMsB,UAAUJ,aACtI,kBAACnB,EAAD,CAAczD,KAAK,iBAAiBxB,OAAQ,CAACgC,KAAKkD,MAAMsB,UAAUyB,SAChEjG,KAAKkG,wBAAwB,CAAClG,KAAKmG,mBAAoBnG,KAAKoG,wB,GA1E5CC,IAAMC,WAgFhC,SAASC,EAAYrD,GAGnB,IAFA,IAAIsD,EAAU,EACVC,EAAmBvD,EAAMwD,UAAUrD,KAAK,SAACxE,GAAD,OAAO,0BAAMoD,IAAKuE,KAAY3H,MACjE4E,EAAI,EAAGA,EAAIgD,EAAiBzH,OAAQyE,GAAK,EAChDgD,EAAiBE,OAAOlD,EAAG,EAAG,8BAEhC,OAAO,yBAAKH,UAAU,WACpB,yBAAKA,UAAU,WACXJ,EAAM0D,YAEV,yBAAKtD,UAAU,WACXmD,GAEJ,yBAAKnD,UAAU,aACXJ,EAAM2D,QAEV,yBAAKvD,UAAU,WACXJ,EAAM4D,O,IAKRC,E,iLACM,IAAD,OACDC,EAAUC,EAA8BjH,KAAKkD,MAAMsB,UAAWxE,KAAKkD,MAAM0B,QAAS,QAAQsC,MAAK,SAACC,EAAGC,GAAQ,OAAOC,GAAcF,EAAEzF,MAAO0F,EAAE1F,MAAO,EAAKwB,MAAM0B,YACnK,OAAO,yBAAKtB,UAAU,WACpB,yBAAKA,UAAU,YAEX0D,EAAQ3D,KAAI,SAACxE,GACX,IAAMyI,EAAU,EAAKpE,MAAM0B,QAAQxC,KAAKvD,EAAE6C,OACpC6F,EAAY1I,EAAEgI,OACdW,EAAU5K,EAAkBiE,aAAaqE,EAAmBoC,GAC5DG,EAAcC,GAAc,EAAKxE,MAAMsB,UAAW3F,EAAE6C,MAAO,EAAKwB,MAAM0B,SAC5E,OAAO,kBAAC2B,EAAD,CAAaK,WAAYU,EAAO,gBAAoB/J,MAAM,EAAG,IAAMkK,EAAY,GAAK,GAAIf,UAAWc,EAASX,OAAQU,EAAWT,KAAK,QAAQ7E,IAAKpD,EAAE6C,iB,GAXhJ2E,IAAMC,WAoB5B,SAASqB,EAAsBlD,EAAYsB,GAEzC,MAA2B,UADVxB,EAAWE,GAChB,QACQ,SAAXsB,EAKX,SAAS6B,EAAqBlG,EAAOmG,EAAMjD,GACzC,IAAM7G,EAAM6G,EAAQxC,KAAKV,GADyB,uBAElD,YAA0B3D,EAAG,cAA7B,+CAAgD,CAAC,IAAtC+J,EAAqC,QAC9C,GAAID,EAAKxG,SAASyG,EAAW,KAC3B,OAAOA,EAAW,QAJ4B,kFAOlD,OAAO,EAGT,SAASC,EAAevD,EAAWI,GAEjC,IADA,IAAIoD,EAAqB,EAChBvE,EAAI,EAAGA,EAAIe,EAAUkB,QAAQ1G,SAAUyE,EAAG,CAEhB,WADnBmB,EAAQxC,KAAKoC,EAAUkB,QAAQjC,GAAGoB,IACvC,iBACPmD,IAGJ,OAAOA,EAGT,SAASC,EAAezD,EAAWI,GAEjC,IADA,IAAIoD,EAAqB,EAChBvE,EAAI,EAAGA,EAAIe,EAAUkB,QAAQ1G,SAAUyE,EAAG,CAEhB,WADnBmB,EAAQxC,KAAKoC,EAAUkB,QAAQjC,GAAGoB,IACvC,iBACPmD,IAGJ,OAAOA,EAGT,SAASE,EAAc1D,EAAWI,GAChC,OAAOmD,EAAevD,EAAWI,GAAWqD,EAAezD,EAAWI,GAGxE,SAASuD,EAAwB1D,EAAYsB,GAC3C,GAAe,WAAXA,EACF,OAAO,EAET,GAAe,UAAXA,EACF,OAAO,EAET,GAAe,SAAXA,GAAgC,WAAXA,EAAqB,CAC5C,IAAMqC,EAAW7D,EAAWE,GAC5B,MAA2B,SAAvB2D,EAAQ,QAAgD,gBAAvBA,EAAQ,OACpC,EAEF,EAET,OAAO,EAGT,SAASC,EAAwB5D,EAAYsB,GAC3C,OAAOoC,EAAwB1D,EAAYsB,GAG7C,SAASuC,EAAuB7D,EAAYsB,GAC1C,OAAOoC,EAAwB1D,EAAYsB,GAAUsC,EAAwB5D,EAAYsB,GAW3F,SAASwC,EAAc/D,GACrB,OAAO8D,EAAuB9D,EAAUC,WAAYD,EAAUuB,QAGhE,SAASyC,EAAoB9G,EAAO8C,EAAWI,EAAS6D,EAAgBC,EAAgBC,GACtF,IAAM5K,EAAM6G,EAAQxC,KAAKV,GASzB,GAAI3D,EAAG,eAAqByG,EAAUyB,MACpC,OAAO,EAGT,GAAgC,WAA3BlI,EAAG,iBACN,IAAI0K,EACF,OAAO,MAGN,IAA+B,WAA3B1K,EAAG,gBAMV,OAAO,EALP,IAAK2K,EACH,OAAO,EAOX,IAAME,EAAW7K,EAAG,MACpB,OAAI6K,GAAyB,KAAbA,IACVD,EAAkBtK,IAAIuK,GAO9B,SAAS3B,EAA8BzC,EAAWI,GAA+B,IAAtBiE,EAAqB,uDAAJ,GACpEhB,EAAOiB,EAAYtE,EAAWI,GAChCmE,EAAY,GACVhD,EAA4B,KAAnB8C,EAAwBA,EAAiBrE,EAAUuB,OAC5D0C,EAAiBN,EAAwB3D,EAAUC,WAAYsB,GAAUgC,EAAevD,EAAWI,GACnG8D,EAAiBL,EAAwB7D,EAAUC,WAAYsB,GAAUkC,EAAezD,EAAWI,GACrG+D,EAAoB,IAAIzK,IANkD,uBAO9E,YAAoBsG,EAAUkB,QAA9B,+CAAuC,CAAC,IAA7BsD,EAA4B,QAC/BC,EAAcrE,EAAQxC,KAAK4G,EAAMnE,IACvC8D,EAAkBlK,IAAIwK,EAAW,QAT2C,kFAY9E,IAAMC,EAAStE,EAAQtC,gBAAgB6G,eAAe5E,EAAWC,EAAUC,YAArB,QAZwB,uBAa9E,YAAoByE,EAApB,+CAA4B,CAAC,IAAlBxH,EAAiB,QAC1B,GAAK8G,EAAoB9G,EAAO8C,EAAWI,EAAS6D,EAAgBC,EAAgBC,GAApF,CAIA,IAAMb,EAAcF,EAAqBlG,EAAOmG,EAAMjD,GAClDkD,GAAe,GAInBiB,EAAUzJ,KAAK,CAACoC,MAAOA,EAAOmF,OAAQiB,MAvBsC,kFAyB9E,OAAOiB,EAGT,SAASK,EAAmD5E,EAAW6E,EAAKzE,GAC1E,IAAMiD,EAAOiB,EAAYtE,EAAWI,GAChCmE,EAAY,GACVN,EAAiBN,EAAwB3D,EAAUC,WAAYD,EAAUuB,QAAUgC,EAAevD,EAAWI,GAC7G8D,EAAiBL,EAAwB7D,EAAUC,WAAYD,EAAUuB,QAAUkC,EAAezD,EAAWI,GAC/G+D,EAAoB,IAAIzK,IALuD,uBAMnF,YAAoBsG,EAAUkB,QAA9B,+CAAuC,CAAC,IAA7BsD,EAA4B,QAC/BC,EAAcrE,EAAQxC,KAAK4G,EAAMnE,IACvC8D,EAAkBlK,IAAIwK,EAAW,QARgD,kFAWnF,IAAK,IAAMvH,KAASkD,EAAQxC,KAAM,CAEhC,GADYwC,EAAQxC,KAAKV,GAChB,cAAkB4H,MAAK,SAAAzK,GAAC,OAAIA,EAAC,MAAYwK,GAAOxK,EAAC,OAAa,MAIlE2J,EAAoB9G,EAAO8C,EAAWI,EAAS6D,EAAgBC,EAAgBC,GAApF,CAIA,IAAMb,EAAcF,EAAqBlG,EAAOmG,EAAMjD,GAClDkD,GAAe,GAInBiB,EAAUzJ,KAAK,CAACoC,MAAOA,EAAOmF,OAAQiB,KAExC,OAAOiB,EAoCT,SAASQ,EAAgB9E,EAAY+E,GACnC,IACMC,EADWlF,EAAWE,GACE,WAC9B,GAAIgF,KAAiBC,EAAc,CACjC,IAAMC,EAAiBH,EAAY,OACnC,GAAIG,KAAkBD,EAAaD,GAAgB,CACjD,IAAMG,EAAeF,EAAaD,GAAeE,GACjD,GAAIC,EACF,OAAOA,GAIb,OAAO,KAGT,SAASC,EAAanI,EAAOkD,GAC3B,OAAOA,EAAQxC,KAAKV,GAAb,UAGT,SAASoI,EAAiBtF,EAAWI,GACnC,IAAMwD,EAAW7D,EAAWC,EAAUC,YAClCoD,EAAO,GACXA,EAAOA,EAAKlH,OAAOyH,EAAQ,MAHiB,2BAI5C,YAAwB5D,EAAUJ,WAAlC,+CAA8C,CAAC,IAApCoF,EAAmC,QACtCI,EAAeL,EAAgB/E,EAAUC,WAAY+E,GACvDI,GACF/B,EAAKvI,KAAKsK,IAP8B,6GAU5C,YAAuBpF,EAAUc,UAAjC,+CAA4C,CAAC,IAAlCyE,EAAiC,QAC1ClC,EAAOA,EAAKlH,OAAOkJ,EAAaE,EAASlF,GAAID,KAXH,kFAa5C,OAAOiD,EAGT,SAASiB,EAAYtE,EAAWI,GAC9B,IAAIiD,EAAOiC,EAAgBtF,EAAWI,GADC,uBAEvC,YAAoBJ,EAAUkB,QAA9B,+CAAuC,CAAC,IAA7BsD,EAA4B,QACrCnB,EAAOA,EAAKlH,OAAOkJ,EAAab,EAAMnE,GAAID,KAHL,kFAKvC,OAAOiD,EAGT,SAASmC,EAActI,EAAOkD,GAC5B,IAAIqF,EAAY,GACVlM,EAAM6G,EAAQxC,KAAKV,GAFY,uBAGrC,YAAmB3D,EAAG,MAAtB,+CAAiC,CAAC,IAAvBmM,EAAsB,QAC/BD,EAAU3K,KAAKuD,EAAU+B,EAAQ1D,IAAKgJ,EAAI,IAASA,EAAI,OAJpB,kFAMrC,OAAOD,EAGT,SAASvC,GAAclD,EAAW9C,EAAOkD,GACvC,IAAM7G,EAAM6G,EAAQxC,KAAKV,GACzB,GAAI3D,EAAG,gBACL,MAAO,CAAC,EAAG,GAGb,GAA+B,WAA3BA,EAAG,gBACL,MAAO,CAAC,EAAG,GAGb,IAAIoM,EAAU,EACVC,EAAW,EACXC,EAAsB,EACpBC,EAAWvM,EAAG,eACdwM,EAAeT,EAAgBtF,EAAWI,GAC1C4F,EAAc5F,EAAQtC,gBAAgBmI,gBAAgB1M,EAAG,OAAYA,EAAG,MAAWA,EAAG,MAf5C,uBAgBhD,YAAyByM,EAAzB,+CAAsC,CAAC,IAA5BE,EAA2B,QACpC,GAAIA,IAAehJ,EAAnB,CAGA,IAAMiJ,EAAW/F,EAAQxC,KAAKsI,GAC1BC,EAAQ,iBAGR/C,EAAqB8C,EAAYH,EAAc3F,IAAY,IAI/DwF,IAEIO,EAAQ,gBAAsBnG,EAAUyB,OAC1CoE,IAGEM,EAAQ,eAAqBL,GAC/BH,OAnC4C,kFAuChD,MAAO,CAACA,EAASC,EAAUC,GAG7B,SAASO,GAAgBpG,EAAW9C,EAAOkD,GACzC,IAAMiG,EAAanD,GAAclD,EAAW9C,EAAOkD,GACnD,MAAO,CACLC,GAAKnD,EACL1D,OAASgM,EAActI,EAAOkD,GAC9BI,KAAO6F,EAAW,GAClB9F,UAAY8F,EAAW,GACvB5F,qBAAuB4F,EAAW,IAItC,SAASC,GAAatG,EAAWtD,GAC/B,IAAMD,EAAWsD,EAAWC,EAAUC,YACtC,OAAOsG,EAAc/J,iBAAiBC,EAAUC,GAGlD,SAAS8J,GAAmBvG,EAAYvD,GACtC,IAAM+J,EAAgB3C,EAAuB7D,EAAY,QACzD,GAAsB,IAAlBwG,EAAqB,CAGvB,IAAMC,EAAUrI,EAAU3B,EAAK,EAAG,IAClC,OAAIgK,EAAU,EACL,EAELA,EAAU,GACL,EAEF,EAEJ,OAAsB,IAAlBD,EAGSpI,EAAU3B,EAAK,EAAG,IACpB,GACL,EAEF,EAEA+J,EAAgB,EAEhBpI,EAAU3B,EAAK,EAAG+J,GAEpB,EAGT,SAASE,GAAUC,GACjB,IAAIC,EAAWhO,MAAM+N,EAASpM,QAC9B,IAAK,IAAMsM,KAAaF,EACtBC,EAASC,GAAT,eAA2BF,EAASE,GAApC,CAAgDtN,OAAM,YAAQoN,EAASE,GAAWtN,UAEpF,OAAOqN,EAGT,SAASE,GAAe/G,GACtB,OAAO,eACFA,EADL,CAEEJ,WAAaI,EAAUJ,WAAW7G,QAClC+H,UAAY6F,GAAU3G,EAAUc,WAChCkG,YAAcL,GAAU3G,EAAUgH,aAClC9F,QAAUyF,GAAU3G,EAAUkB,WAIlC,SAAS+F,GAAWhH,EAAYwB,EAAOrB,GACrC,IAAIJ,EAAY,CACdP,cAAgB,GAChBQ,WAAaA,EACbwB,MAAQA,EACRF,OAAS,SACT2F,WAAY,EACZC,QAAU,EACVvH,WAAa,GACbkB,UAAY,GACZkG,YAAc,GACd9F,QAAU,IAIN0C,EAAW7D,EAAWE,GAfkB,uBAgB9C,YAAyB2D,EAAQ,UAAjC,+CAAgD,CAAC,IAAtCwD,EAAqC,QAC9CpH,EAAUc,UAAUhG,KAAKsL,GAAgBpG,EAAWoH,EAAYhH,KAjBpB,kFAoB9C,OAAOJ,EAGT,SAASqH,GAA+BrH,EAAWsH,EAAgBlH,GACjE,IAAImH,EAAeR,GAAe/G,GAE5B9C,EAvMR,SAAoCsK,EAASpH,GAC3C,IAAMqH,EAAWpJ,EAAU+B,EAAQ1D,IAAK,EAAG8K,EAAQE,YAAc,GAC7DC,EAAc,EAFkC,uBAIpD,YAAkBH,EAAQ5J,KAA1B,+CAAgC,CAAC,IAAtBrE,EAAqB,QACxBqO,EAAeD,EAAcpO,EAAI8I,OACvC,GAAIoF,EAAWG,EACb,OAAOrO,EAAI8G,GAEbsH,EAAcC,GAToC,kFAYpD,OAAO,KA2LOC,CAzNhB,SAA+BP,GAC7B,IAAIE,EAAU,CACZE,YAAc,EACd9J,KAAO,IAHoC,uBAM7C,YAA2B0J,EAA3B,+CAA2C,CAAC,IAAjCQ,EAAgC,QACrC/E,EAAY+E,EAAazF,OAC7BmF,EAAQ5J,KAAK9C,KAAK,CAChBuF,GAAKyH,EAAa5K,MAClBmF,OAASU,IAEXyE,EAAQE,aAAe3E,GAZoB,kFAe7C,OAAOyE,EAyMiBO,CAAsBT,GACYlH,GAC1D,OAAKlD,GAGLqK,EAAarG,QAAQpG,KAAKsL,GAAgBpG,EAAW9C,EAAOkD,IACrD,EAAC,EAAMmH,IAHL,EAAC,EAAOvH,GAMnB,SAASgI,GAAahI,EAAWI,GAG/B,OAAOiH,GAA+BrH,EADfyC,EADJsE,GAAe/G,GACiCI,GACFA,GAGnE,IAAM6H,GAAsB,CAC1B,OAAU,EACV,OAAU,EACV,OAAU,GAGZ,SAASpF,GAAeF,EAAGC,EAAGxC,GAC5B,IAAM8H,EAAO9H,EAAQxC,KAAK+E,GACpBwF,EAAO/H,EAAQxC,KAAKgF,GAEpBwF,EAAqBF,EAAI,gBACzBG,EAAqBF,EAAI,gBAC/B,GAAIC,IAAuBC,EACzB,OAAID,KAAsBH,IAAuBI,KAAsBJ,GAC9DA,GAAoBG,GAAsBH,GAAoBI,GAEhE,EAGT,IAAMC,EAAmBlI,EAAQtC,gBAAgByK,iBAAiB5F,GAC5D6F,EAAoBpI,EAAQtC,gBAAgByK,iBAAiB3F,GACnE,GAAI0F,IAAqBE,EACvB,OAAQF,EAAmBE,EAG7B,IAAMC,EAAoBP,EAAI,eACxBQ,EAAoBP,EAAI,eAC9B,OAAIM,IAAsBC,IACfD,EAAoBC,GAGxB,EAOT,SAAS1H,GAASwB,EAASpC,GACzB,IAAIuI,EAAahC,GAAUnE,GAE3B,OADAmG,EAAWjG,MAAK,SAACC,EAAGC,GAAQ,OAN9B,SAAsBD,EAAGC,EAAGxC,GAC1B,OAAOyC,GAAcF,EAAEtC,GAAIuC,EAAEvC,GAAID,GAKEwI,CAAYjG,EAAGC,EAAGxC,MAC9CuI,EAGT,SAASE,GAAsB7I,EAAWgF,GACxC,OAA2D,MAApDD,EAAgB/E,EAAUC,WAAY+E,GAG/C,SAAS8D,GAAmB9I,EAAWgF,GACrC,IAAK6D,GAAsB7I,EAAWgF,GACpC,MAAO,EAAC,EAAOhF,GAGjB,IAAI+I,EAAWhC,GAAe/G,GAE9B,OADA+I,EAASnJ,WAAW9E,KAAKkK,GAClB,EAAC,EAAM+D,GAIhB,SAASC,GAAahJ,EAAWI,GAC/B,MAAyB,WAArBJ,EAAUuB,SAGW,WAArBvB,EAAUuB,SAGVvB,EAAUkH,WAOhB,SAAS+B,GAAUjJ,EAAWI,GAC5B,OAAK4I,GAAahJ,GAGX,EAAC,EAAD,eAAY+G,GAAe/G,GAA3B,CAAuCP,cAAgB,GAAI8B,OAAS,SAAUL,QAAU,MAFtF,EAAC,EAAOlB,GAMnB,SAASkJ,GAAqBlJ,EAAWI,GACvC,MAAyB,WAArBJ,EAAUuB,UAGVvB,EAAUkH,aAGT/D,EAAsBnD,EAAUC,WAAY,UAOnD,SAASkJ,GAAkBnJ,EAAWI,GACpC,IAAK8I,GAAqBlJ,GACxB,MAAO,EAAC,EAAOA,GAKjB,IAFA,IAAIuH,EAAY,eAAQR,GAAe/G,GAAvB,CAAmCuB,OAAS,UACtD6H,EAAU/K,EAAU+B,EAAQ1D,IAAK,EAAG,GACjCuC,EAAI,EAAGA,EAAImK,IAAWnK,EAC7BsI,EAAeS,GAAaT,EAAcnH,GAAS,GAGrD,MAAO,EAAC,EAAMmH,GAIhB,SAAS8B,GAAkBrJ,EAAWI,GACpC,MAAyB,UAArBJ,EAAUuB,SAGVvB,EAAUkH,UAOhB,SAASoC,GAAetJ,EAAWI,GACjC,IAAKiJ,GAAkBrJ,GACrB,MAAO,CAAC,EAAGA,GAKb,IAFA,IAAIuH,EAAY,eAAQR,GAAe/G,GAAvB,CAAmCkB,QAAU,KACvDkI,EAAU/K,EAAU+B,EAAQ1D,IAAK,EAAG,GACjCuC,EAAI,EAAGA,EAAImK,IAAWnK,EAC7BsI,EAAeS,GAAaT,EAAcnH,GAAS,GAGrD,MAAO,EAAC,EAAMmH,GAGhB,SAASgC,GAAoBvJ,EAAWI,GACtC,MAAyB,UAArBJ,EAAUuB,UAGVvB,EAAUkH,aAGVxD,EAAc1D,EAAWI,IAAY2D,EAAc/D,KAOzD,SAASwJ,GAAiBxJ,EAAWI,GACnC,IAAKmJ,GAAoBvJ,EAAWI,GAClC,MAAO,EAAC,EAAOJ,GAF2B,MAKbgI,GAAahI,EAAWI,GALX,mBAKrCqJ,EALqC,KAK7BlC,EAL6B,KAM5C,OAAKkC,EAGE,EAAC,EAAMlC,GAFL,EAAC,EAAOvH,GAMnB,SAAS0J,GAAa1J,EAAWI,GAC/B,MAAyB,UAArBJ,EAAUuB,UAGVvB,EAAUkH,aAGT/D,EAAsBnD,EAAUC,WAAY,SAOnD,SAAS0J,GAAU3J,EAAWI,GAC5B,IAAKsJ,GAAa1J,GAChB,MAAO,EAAC,EAAOA,GAGjB,IALqC,EAMNgI,GADd,eAAQjB,GAAe/G,GAAvB,CAAmCuB,OAAS,OAAQ9B,cAAgB6G,GAAatG,EAAWI,EAAQ1D,OAC1D0D,GANtB,mBAM9BqJ,EAN8B,KAMtBlC,EANsB,KAOrC,OAAKkC,EAGE,EAAC,EAAMlC,GAFL,EAAC,EAAOvH,GAMnB,SAAS4J,GAAe5J,EAAWI,GACjC,MAAyB,WAArBJ,EAAUuB,UAGVvB,EAAUkH,aAGT/D,EAAsBnD,EAAUC,WAAY,SAOnD,SAAS4J,GAAY7J,EAAWI,GAC9B,IAAKwJ,GAAe5J,GAClB,MAAO,EAAC,EAAOA,GAKjB,IAFA,IAAIuH,EAAY,eAAQR,GAAe/G,GAAvB,CAAmCuB,OAAS,OAAQ9B,cAAgB6G,GAAatG,EAAWI,EAAQ1D,OAC9G0M,EAAU5C,GAAmBxG,EAAUC,WAAYG,EAAQ1D,KACxDuC,EAAI,EAAGA,EAAImK,IAAWnK,EAC7BsI,EAAeS,GAAaT,EAAcnH,GAAS,GAIrD,OAFAmH,EAAa9H,cAAgB6G,GAAatG,EAAWI,EAAQ1D,KAEtD,EAAC,EAAM6K,GAIhB,SAASuC,GAAa9J,EAAWI,GAC/B,MAAyB,SAArBJ,EAAUuB,SAGVvB,EAAUkH,UAOhB,SAAS6C,GAAU/J,EAAWI,GAC5B,IAAK0J,GAAa9J,GAChB,MAAO,EAAC,EAAOA,GAKjB,IAFA,IAAIuH,EAAY,eAAQR,GAAe/G,GAAvB,CAAmCkB,QAAU,GAAIzB,cAAgB6G,GAAatG,EAAWI,EAAQ1D,OAC3G0M,EAAU5C,GAAmBxG,EAAUC,WAAYG,EAAQ1D,KACxDuC,EAAI,EAAGA,EAAImK,IAAWnK,EAC7BsI,EAAeS,GAAaT,EAAcnH,GAAS,GAGrD,MAAO,EAAC,EAAMmH,GAGhB,SAASyC,GAAehK,EAAWI,GACjC,MAAyB,SAArBJ,EAAUuB,UAGVvB,EAAUkH,aAGVxD,EAAc1D,EAAWI,IAAY2D,EAAc/D,KAOzD,SAASiK,GAAYjK,EAAWI,GAC9B,IAAK4J,GAAehK,EAAWI,GAC7B,MAAO,EAAC,EAAOJ,GAFsB,MAKRgI,GAAahI,EAAWI,GALhB,mBAKhCqJ,EALgC,KAKxBlC,EALwB,KAMvC,OAAKkC,EAGE,EAAC,EAAMlC,GAFL,EAAC,EAAOvH,GAKnB,SAASkK,GAA4BlK,EAAWI,EAAS4E,GACvD,GAAIhF,EAAUJ,WAAWpF,OAAS,EAChC,OAAO,EAET,IAAKwP,GAAehK,EAAWI,GAC7B,OAAO,EAET,IAAKyI,GAAsB7I,EAAWgF,GACpC,OAAO,EARyD,MAW1C8D,GAAmB9I,EAAWgF,GAA9CuC,EAX0D,oBAclE,OAAyB,IADP3C,EAAmD2C,EADhDxC,EAAgBwC,EAAatH,WAAY+E,GACmC5E,GACnF5F,OAOhB,SAAS2P,GAAyBnK,EAAWI,EAAS4E,GACpD,IAAKkF,GAA4BlK,EAAWI,EAAS4E,GACnD,OAAO,EAFsD,MAKvC8D,GAAmB9I,EAAWgF,GAA9CuC,EALuD,oBAQ/D,OAAOF,GAA+BE,EADpB3C,EAAmD2C,EADhDxC,EAAgBwC,EAAatH,WAAY+E,GACmC5E,GAClCA,GAGjE,SAASgK,GAAiBpK,EAAWI,GACnC,MAAyB,WAArBJ,EAAUuB,QAA4C,WAArBvB,EAAUuB,UAG3CvB,EAAUkH,WAG4B,IAAtCxD,EAAc1D,EAAWI,IAO/B,SAASiK,GAAcrK,EAAWI,GAChC,IAAKgK,GAAiBpK,EAAWI,GAC/B,MAAO,EAAC,EAAOJ,GAGjB,IAAIuH,EAAeR,GAAe/G,GAC5BsK,EAAa5G,EAAc6D,EAAcnH,GACzCmK,EAAmBlM,EAAU+B,EAAQ1D,IAAK,EAAG4N,EAAa,GAEhE,OADA/C,EAAarG,QAAQiB,OAAOoI,EAAkB,GACvC,EAAC,EAAMhD,GAIhB,SAASiD,GAAexK,EAAWI,GACjC,OAAIJ,EAAUkH,WAGqB,IAA/BlH,EAAUc,UAAUtG,OAO1B,SAASiQ,GAAYzK,EAAWI,GAC9B,IAAKoK,GAAexK,GAClB,OAAO,EAGT,IAAIuH,EAAeR,GAAe/G,GALK,uBAMvC,YAAqBuH,EAAazG,UAAlC,+CAA6C,CAAC,IAArCyE,EAAoC,QAC3CA,EAAS/L,OAASgM,EAAcD,EAASlF,GAAID,IAPR,kFASvC,MAAO,EAAC,EAAMmH,GAIhB,SAASmD,GAAc1K,EAAWI,GAChC,OAAIJ,EAAUkH,WAGmB,IAA7BlH,EAAUkB,QAAQ1G,OAOxB,SAASmQ,GAAW3K,EAAWI,GAC7B,IAAKsK,GAAc1K,GACjB,OAAO,EAGT,IAAIuH,EAAeR,GAAe/G,GALI,uBAMtC,YAAkBuH,EAAarG,QAA/B,+CAAwC,CAAC,IAAhCsD,EAA+B,QACtCA,EAAMhL,OAASgM,EAAchB,EAAMnE,GAAID,IAPH,kFAStC,MAAO,EAAC,EAAMmH,GAGhB,SAASqD,GAAelM,GACtB,OAAO,4BAAQI,UAAU,SAAS+L,QAASnM,EAAMmM,QAASC,UAAWpM,EAAMqM,SAAUrM,EAAMsM,O,IAGvFC,GACJ,WAAYC,EAAaxO,GAAM,oBAC7BlB,KAAKoC,KAAOsN,EACZ1P,KAAKsC,gBAAkBqN,EAAUxN,eAAeuN,EAAarN,GAC7DrC,KAAKkB,IAAMA,GAIT0O,G,YACJ,WAAY1M,GAAQ,IAAD,uBACjB,4CAAMA,KAED2M,QAAU,CACb,MAAUrC,GACV,UAAcE,GACd,IAAQG,GACR,IAAQE,GACR,MAAUG,GACV,KAASE,GACT,MAAUE,GACV,MAAUE,GACV,eAAmB,SAAChK,EAAWI,GAAZ,OAAwB8J,GAA4BlK,EAAWI,EAAS,aAC3F,aAAiB,SAACJ,EAAWI,GAAZ,OAAwB8J,GAA4BlK,EAAWI,EAAS,WACzF,eAAmB,SAACJ,EAAWI,GAAZ,OAAwB8J,GAA4BlK,EAAWI,EAAS,aAC3F,cAAkB,SAACJ,EAAWI,GAAZ,OAAwB8J,GAA4BlK,EAAWI,EAAS,YAC1F,MAAUgK,GACV,MAAUI,GACV,OAAWE,IAGb,EAAKY,UAAY,CACf,MAAUrC,GACV,UAAcE,GACd,IAAQG,GACR,IAAQE,GACR,MAAUG,GACV,KAASE,GACT,MAAUE,GACV,MAAUE,GACV,eAAmB,SAACjK,EAAWI,GAAZ,OAAwB+J,GAAyBnK,EAAWI,EAAS,aACxF,aAAiB,SAACJ,EAAWI,GAAZ,OAAwB+J,GAAyBnK,EAAWI,EAAS,WACtF,eAAmB,SAACJ,EAAWI,GAAZ,OAAwB+J,GAAyBnK,EAAWI,EAAS,aACxF,cAAkB,SAACJ,EAAWI,GAAZ,OAAwB+J,GAAyBnK,EAAWI,EAAS,YACvF,MAAUiK,GACV,MAAUI,GACV,OAAWE,IAGb,EAAKY,qBAAuB,IAAIN,GAAqBO,EAAOC,OAE5D,IAAMC,EAAkBzE,GAAW,2CAA4C,IAAK,EAAKsE,sBAzCxE,OA0CjB,EAAKI,MAAQ,EAAKC,UAAUF,GA1CX,E,uEA6CTG,GACR,MAAO,CACLC,iBAAmB,CAAE,CAAE9L,UAAW6L,EAAeE,OAAS,KAC1DC,oBAAsB,EACtBC,YAAc,GACdC,eAAiBL,EAAc5L,WAC/BkM,kBAAoBN,EAAcpK,MAClCV,UAAW,K,gCAILgI,EAAUqD,GAClB,OAAO,eAAK5Q,KAAKmQ,MAAjB,CAAwBG,iBAAgB,sBAAQtQ,KAAKmQ,MAAMG,kBAAnB,CAAqC,CAAE9L,UAAW+I,EAAUgD,OAASK,S,iCAI7G,OAAO5Q,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBhM,Y,qCAInE,OAAOxE,KAAKmQ,MAAMK,oBAAsB,I,qCAIxC,OAAKxQ,KAAK6Q,eAGH,QAAU7Q,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBD,OAFpE,S,kCAMLvQ,KAAKmQ,MAAMK,oBAAsB,GAEnCxQ,KAAK8Q,SAAL,eAAmB9Q,KAAKmQ,MAAxB,CAA+BK,oBAAuBxQ,KAAKmQ,MAAMK,oBAAsB,O,wCAKzF,MAA+E,KAAvExQ,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBD,QAC9DvQ,KAAKmQ,MAAMK,oBAAsB,I,uCAIvC,OAAKxQ,KAAK+Q,kBAGH,UAAY/Q,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBD,OAFtE,kB,qCAMT,GAAKvQ,KAAK+Q,kBAAV,CAGA,IAAMR,EAASvQ,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBD,OACrES,EAAoBhR,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,oBAAsB,GAAGhM,UAE1F,GADyBxE,KAAK6P,QAAQU,GAAQS,EAAmBhR,KAAK+P,sBACtE,CAGA,IAAM9B,EAASjO,KAAK8P,UAAUS,GAAQS,EAAmBhR,KAAK+P,sBAC1D9B,EAAO,IACTjO,KAAK8Q,SAAS9Q,KAAKiR,oBAAoBhD,EAAO,GAAIsC,EAAQvQ,KAAKmQ,MAAMK,0B,qCAKvE,OAAOxQ,KAAKmQ,MAAMK,oBAAsBxQ,KAAKmQ,MAAMG,iBAAiBtR,OAAS,I,qCAI7E,OAAKgB,KAAKkR,eAGH,QAAUlR,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,oBAAsB,GAAGD,OAFxE,S,kCAMLvQ,KAAKmQ,MAAMK,oBAAsBxQ,KAAKmQ,MAAMG,iBAAiBtR,OAAS,GAExEgB,KAAK8Q,SAAL,eAAmB9Q,KAAKmQ,MAAxB,CAA+BK,oBAAuBxQ,KAAKmQ,MAAMK,oBAAsB,O,0CAIvEjD,EAAUqD,EAAYO,GACxC,IAAMC,EAAkBpR,KAAKmQ,MAAMG,iBAAiB/S,MAAM,EAAG4T,GAE7D,OADAC,EAAgB9R,KAAM,CAAEkF,UAAW+I,EAAUgD,OAASK,IAC/C,eAAK5Q,KAAKmQ,MAAjB,CAAwBG,iBAAmBc,EAAiBZ,oBAAsBW,M,wCAGlE5D,EAAUqD,GAC1B,OAAO5Q,KAAKiR,oBAAoB1D,EAAUqD,EAAY5Q,KAAKmQ,MAAMK,oBAAsB,K,uCAGxEI,GACf,OAAO5Q,KAAK6P,QAAQe,GAAY5Q,KAAKqR,WAAYrR,KAAK+P,wB,oCAG1Ca,GACZ,IAAM3C,EAASjO,KAAK8P,UAAUc,GAAY5Q,KAAKqR,WAAYrR,KAAK+P,sBAC5D9B,EAAO,IACTjO,KAAK8Q,SAAS9Q,KAAKsR,kBAAkBrD,EAAO,GAAI2C,M,gDAI1BW,GACxBvR,KAAK8Q,SAAL,eAAmB9Q,KAAKmQ,MAAxB,CAA+BO,eAAiBa,EAAEC,OAAO5R,W,6CAGnC,IAAD,OACf6R,EAAY,GAClB,IAAK,IAAMhN,KAAcF,EACvB,GAAgD,aAA5CA,EAAWE,GAAX,cAAwD,CAC1D,IAAM9C,EAAS4C,EAAWE,GAAX,OACA,SAAX9C,GAAgC,UAAXA,IACvB8P,EAAUhN,GAAcA,EAAWlH,MAAMkH,EAAWiN,YAAY,KAAO,IAI7E,OAAO,4BAAQ9R,MAAOI,KAAKmQ,MAAMO,eAAgBiB,SAAU,SAAC9S,GAAD,OAAO,EAAK+S,0BAA0B/S,IAAIoD,IAAI,oBACrGO,OAAOC,KAAKgP,GAAWpO,KAAK,SAACwO,GAAD,OAAO,4BAAQjS,MAAOiS,EAAG5P,IAAK4P,GAAIJ,EAAUI,U,qDAI/CN,GAC7BvR,KAAK8Q,SAAL,eAAmB9Q,KAAKmQ,MAAxB,CAA+BQ,kBAAoBY,EAAEC,OAAO5R,W,8CAGrC,IAAD,OACtB,OAAO,2BAAOA,MAAOI,KAAKmQ,MAAMQ,kBAAmBgB,SAAU,SAAC9S,GAAD,OAAO,EAAKiT,+BAA+BjT,IAAIoD,IAAI,yB,sDAIhH,IAAMiO,EAAkBzE,GAAWzL,KAAKmQ,MAAMO,eAAgB1Q,KAAKmQ,MAAMQ,kBAAmB3Q,KAAK+P,sBACjG/P,KAAK8Q,SAAL,eAAmB9Q,KAAKoQ,UAAUF,GAAlC,CAAoD3K,SAAUvF,KAAKmQ,MAAM5K,c,+CAGjD,IAAD,OACvB,OAAO,4BAAQ8J,QAAS,kBAAM,EAAK0C,iCAAiC9P,IAAI,wBAAjE,qB,2CAGY2O,EAAYpB,GAAQ,IAAD,OACtC,OAAO,kBAACJ,GAAD,CAAgBC,QAAU,kBAAM,EAAK2C,cAAcpB,IAAcrB,QAAUvP,KAAKiS,iBAAiBrB,GAAcpB,MAAOA,EAAOvN,IAAK2O,M,4CAGrHW,GACpBvR,KAAK8Q,SAAL,eAAmB9Q,KAAKmQ,MAAxB,CAA+B5K,SAAWgM,EAAEC,OAAOU,a,iCAKnD,IADA,IAAI1N,EAAY+G,GAAevL,KAAKqR,YAC3B5N,EAAI,EAAGA,EAAI,MAAOA,EAEzBe,EAAYmJ,GADZnJ,EAAYiJ,GAAUjJ,EAAWxE,KAAK+P,sBAAsB,GACnB/P,KAAK+P,sBAAsB,GAEtE/P,KAAK8Q,SAAS9Q,KAAKsR,kBAAkB9M,EAAW,Y,+BAGxC,IAAD,OACP,MAAO,CACH,yBAAKvC,IAAI,iBACL,CACAjC,KAAKmS,uBACLnS,KAAKoS,wBACLpS,KAAKqS,2BAGT,yBAAKpQ,IAAI,mBACL,CACAjC,KAAKsS,qBAAqB,QAAS,SACnCtS,KAAKsS,qBAAqB,YAAa,iBACvCtS,KAAKsS,qBAAqB,MAAO,gBACjCtS,KAAKsS,qBAAqB,MAAO,cACjCtS,KAAKsS,qBAAqB,QAAS,SACnCtS,KAAKsS,qBAAqB,OAAQ,WAClCtS,KAAKsS,qBAAqB,QAAS,SACnCtS,KAAKsS,qBAAqB,QAAS,WACnCtS,KAAKsS,qBAAqB,iBAAkB,kBAC5CtS,KAAKsS,qBAAqB,eAAgB,gBAC1CtS,KAAKsS,qBAAqB,iBAAkB,kBAC5CtS,KAAKsS,qBAAqB,gBAAiB,iBAC3CtS,KAAKsS,qBAAqB,QAAS,aACnCtS,KAAKsS,qBAAqB,QAAS,WACnCtS,KAAKsS,qBAAqB,SAAU,YAGxC,yBAAKrQ,IAAI,WAAU,kBAACmN,GAAD,CAAgBC,QAAU,kBAAM,EAAKkD,aAAchD,QAAUvP,KAAK6Q,eAAiBrB,MAAQxP,KAAKwS,eAAiBvQ,IAAI,UACxI,yBAAKA,IAAI,WAAU,kBAACmN,GAAD,CAAgBC,QAAU,kBAAM,EAAKoD,aAAclD,QAAUvP,KAAKkR,eAAiB1B,MAAQxP,KAAK0S,eAAiBzQ,IAAI,UACxI,yBAAKA,IAAI,aAAY,kBAACmN,GAAD,CAAgBC,QAAU,kBAAM,EAAKsD,gBAAiBpD,QAAUvP,KAAK+Q,kBAAoBvB,MAAQxP,KAAK4S,iBAAmB3Q,IAAI,UAClJ,yBAAKA,IAAI,YAAW,kBAACmN,GAAD,CAAgBC,QAAU,kBAAM,EAAKwD,YAAatD,SAAU,EAAOC,MAAM,iBAC7F,yBAAKvN,IAAI,YAAW,2BAAOJ,KAAK,WAAW8P,SAAU,SAACJ,GAAD,OAAO,EAAKuB,sBAAsBvB,IAAIW,QAASlS,KAAKmQ,MAAM5K,WAAY,0BAAMwN,MAAO,CAACC,MAAO,UAArB,cAC3H,kBAAC,EAAD,CAAaxO,UAAYxE,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBhM,UAAYI,QAAS5E,KAAK+P,qBAAsBxK,SAAUvF,KAAKmQ,MAAM5K,SAAUtD,IAAI,gBACxK,kBAAC,EAAD,CAASuC,UAAYxE,KAAKmQ,MAAMG,iBAAiBtQ,KAAKmQ,MAAMK,qBAAqBhM,UAAYI,QAAS5E,KAAK+P,qBAAsB9N,IAAI,iB,GA7OjHoE,IAAMC,WAsPnB2M,OAJf,WACE,OAAO,kBAAC,GAAD,OCnrCWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1V,MACvB,2DCZN2V,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f6df86d.chunk.js","sourcesContent":["export default class TranslationHelper {\r\n    static IndexHandlers = {\r\n        \"30%_of_value\": v => { return v * 0.3 },\r\n        \"60%_of_value\": v => { return v * 0.6 },\r\n        \"deciseconds_to_seconds\": v => { return v / 10 },\r\n        \"divide_by_one_hundred\": v => { return v / 100 },\r\n        \"divide_by_one_hundred_and_negate\": v => { return -v / 100 },\r\n        \"divide_by_one_hundred_2dp\": v => { return (v / 100).toFixed(2) },\r\n        \"milliseconds_to_seconds\": v => { return v / 1000 },\r\n        \"milliseconds_to_seconds_0dp\": v => { return (v / 1000).toFixed(0) },\r\n        \"milliseconds_to_seconds_1dp\": v => { return (v / 1000).toFixed(1) },\r\n        \"milliseconds_to_seconds_2dp\": v => { return (v / 1000).toFixed(2) },\r\n        \"milliseconds_to_seconds_2dp_if_required\": v => { return (v / 1000).toFixed(2) },\r\n        \"multiplicative_damage_modifier\": v => { return v + 100 },\r\n        \"multiplicative_permyriad_damage_modifier\": v => { return v / 100 + 100 },\r\n        \"negate\": v => { return -v },\r\n        \"old_leech_percent\": v => { return v / 5 },\r\n        \"old_leech_permyriad\": v => { return v / 500 },\r\n        \"per_minute_to_per_second\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_0dp\": v => { return (v / 60).toFixed(0) },\r\n        \"per_minute_to_per_second_1dp\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_2dp\": v => { return (v / 60).toFixed(2) },\r\n        \"per_minute_to_per_second_2dp_if_required\": v => { return (v / 60).toFixed(2) },\r\n        \"divide_by_two_0dp\": v => { return Math.floor(v / 2) },\r\n        \"divide_by_six\": v => { return v / 6 },\r\n        \"divide_by_ten_0dp\": v => { return Math.floor(v / 10) },\r\n        \"divide_by_twelve\": v => { return v / 12 },\r\n        \"divide_by_fifteen_0dp\": v => { return Math.floor(v / 15) },\r\n        \"divide_by_twenty_then_double_0dp\": v => { return Math.floor(v / 20) * 2 },\r\n        \"times_twenty\": v => { return v * 20 }\r\n    };\r\n\r\n    static stringformat = function(fmt) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        return fmt.replace(/{(\\d+)}/g, (match, number) => {\r\n            return args[0][number];\r\n        });\r\n    }\r\n\r\n    static GetTranslationLinesForMod = function(translationJson, mod, values = null) {\r\n        let consumedIdxs = new Set();\r\n        let translationLines = [];\r\n        for (let statIdx in mod[\"stats\"]) {\r\n            if (consumedIdxs.has(statIdx)) {\r\n                continue;\r\n            }\r\n            const statObj = mod[\"stats\"][statIdx];\r\n            const statId = statObj[\"id\"];\r\n            consumedIdxs.add(statIdx);\r\n\r\n            for (const translationIdx in translationJson) {\r\n                const translation = translationJson[translationIdx];\r\n                const translationStatIdx = translation[\"ids\"].findIndex((x => x === statId));\r\n                if (translationStatIdx >= 0) {\r\n                    let translationLine = {};\r\n                    translationLine[\"tidx\"] = translationIdx;\r\n                    const numStatsInTranslation = translation[\"ids\"].length;\r\n                    translationLine[\"mins\"] = Array(numStatsInTranslation).fill(0);\r\n                    translationLine[\"maxs\"] = Array(numStatsInTranslation).fill(0);\r\n                    if (values)\r\n                        translationLine[\"values\"] = Array(numStatsInTranslation).fill(0);\r\n\r\n                    translationLine[\"mins\"][translationStatIdx] = statObj[\"min\"];\r\n                    translationLine[\"maxs\"][translationStatIdx] = statObj[\"max\"];\r\n                    if (values)                    \r\n                        translationLine[\"values\"][translationStatIdx] = values[statIdx];\r\n\r\n                    for (let addlStatIdx in mod[\"stats\"]) {\r\n                        const addlStat = mod[\"stats\"][addlStatIdx];\r\n                        const addlStatId = addlStat[\"id\"];\r\n                        if (consumedIdxs.has(addlStatIdx)) {\r\n                            continue;\r\n                        }\r\n                        const addlStatTranslationIdx = translation[\"ids\"].findIndex((x => x === addlStatId));\r\n                        if (addlStatTranslationIdx > 0) {\r\n                            translationLine[\"mins\"][addlStatTranslationIdx] = addlStat[\"min\"];\r\n                            translationLine[\"maxs\"][addlStatTranslationIdx] = addlStat[\"max\"];\r\n                            if (values)                            \r\n                                translationLine[\"values\"][addlStatTranslationIdx] = values[addlStatIdx];\r\n\r\n                            consumedIdxs.add(addlStatIdx);\r\n                        }\r\n                    }\r\n                    translationLines.push(translationLine);\r\n                }\r\n            }\r\n        }\r\n        return translationLines;\r\n    }\r\n\r\n    static GetTranslationRuleForLine = function(translationJson, line) {\r\n        const translation = translationJson[line[\"tidx\"]][\"English\"];\r\n        for (const translationRule of translation) {\r\n            let conditionsFailed = false;\r\n            for (const statIdx in line[\"mins\"]) {\r\n                let condition = translationRule[\"condition\"][statIdx];\r\n                const value = line[\"mins\"][statIdx];\r\n                if (\"min\" in condition) {\r\n                    if (value < condition[\"min\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (\"max\" in condition) {\r\n                    if (value > condition[\"max\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!conditionsFailed) {\r\n                return translationRule;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static ApplyIndexHandlers = function(indexHandlers, value) {\r\n        for (const handler of indexHandlers) {\r\n            value = this.IndexHandlers[handler](value)\r\n        }\r\n        return value;\r\n    }\r\n\r\n    static GetStringForTranslationRule = function(translationJson, rule, line) {\r\n        const translation = translationJson[line[\"tidx\"]];\r\n        let replacementStrings = Array(translation[\"ids\"].length);\r\n        for (const statIdx in translation[\"ids\"]) {\r\n            const replacementMin = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"mins\"][statIdx]);\r\n            const replacementMax = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"maxs\"][statIdx]);\r\n            let replacementValue = null;\r\n            if (\"values\" in line) {\r\n                replacementValue = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"values\"][statIdx]);\r\n            }\r\n\r\n            let replacementCombined = \"\";\r\n            if (replacementMin === replacementMax) {\r\n                replacementCombined = replacementMin;\r\n            }\r\n            else {\r\n                replacementCombined = \"(\" + replacementMin + \"-\" + replacementMax + \")\";\r\n                if (replacementValue) {\r\n                    replacementCombined = replacementValue + replacementCombined;\r\n                }\r\n            }\r\n            replacementStrings[statIdx] = rule[\"format\"][statIdx].replace(\"#\", replacementCombined);\r\n        }\r\n        return this.stringformat(rule[\"string\"], replacementStrings);\r\n    }\r\n\r\n    static GetStringsForTranslationLines = function(translationJson, translationLines) {\r\n        let strings = [];\r\n        for (const lineIdx in translationLines) {\r\n            const translationRule = this.GetTranslationRuleForLine(translationJson, translationLines[lineIdx]);\r\n            if (translationRule) {\r\n                strings = strings.concat(this.GetStringForTranslationRule(translationJson, translationRule, translationLines[lineIdx]).split(\"\\n\"));\r\n            }\r\n        }\r\n        return strings;\r\n    }\r\n\r\n    static TranslateMod = function(translationJson, mod, values = null) {\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, values);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines);\r\n    }\r\n}","const RarePrefixes = [\r\n    \"Agony\", \"Apocalypse\", \"Armageddon\", \"Beast\", \"Behemoth\", \"Blight\", \"Blood\", \"Bramble\", \"Brimstone\", \"Brood\", \"Carrion\", \"Cataclysm\", \"Chimeric\", \"Corpse\", \"Corruption\", \"Damnation\", \"Death\", \"Demon\", \"Dire\", \"Dragon\", \"Dread\", \"Doom\", \"Dusk\", \"Eagle\", \"Empyrean\", \"Fate\", \"Foe\", \"Gale\", \"Ghoul\", \"Gloom\", \"Glyph\", \"Golem\", \"Grim\", \"Hate\", \"Havoc\", \"Honour\", \"Horror\", \"Hypnotic\", \"Kraken\", \"Loath\", \"Maelstrom\", \"Mind\", \"Miracle\", \"Morbid\", \"Oblivion\", \"Onslaught\", \"Pain\", \"Pandemonium\", \"Phoenix\", \"Plague\", \"Rage\", \"Rapture\", \"Rune\", \"Skull\", \"Sol\", \"Soul\", \"Sorrow\", \"Spirit\", \"Storm\", \"Tempest\", \"Torment\", \"Vengeance\", \"Victory\", \"Viper\", \"Vortex\", \"Woe\", \"Wrath\"\r\n];\r\n\r\nconst RareSuffixes = {\r\n    \"One Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"Two Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"One Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Two Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Sceptre\" : [\"Bane\", \"Blow\", \"Breaker\", \"Call\", \"Chant\", \"Crack\", \"Crusher\", \"Cry\", \"Gnarl\", \"Grinder\", \"Knell\", \"Ram\", \"Roar\", \"Smasher\", \"Song\", \"Spell\", \"Star\", \"Weaver\" ],\r\n    \"Staff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"FishingRod\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"Warstaff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Thrusting One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\",\"Stinger\", \"Thirst\" ],\r\n    \"Two Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Rune Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Claw\" : [\"Bane\", \"Bite\", \"Edge\", \"Fang\", \"Fist\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Roar\", \"Scratch\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Talons\", \"Thirst\" ],\r\n    \"Bow\" : [\"Arch\", \"Bane\", \"Barrage\", \"Blast\", \"Branch\", \"Breeze\", \"Fletch\", \"Guide\", \"Horn\", \"Mark\", \"Nock\", \"Rain\", \"Reach\", \"Siege\", \"Song\", \"Stinger\", \"Strike\", \"Thirst\", \"Thunder\", \"Twine\", \"Volley\", \"Wind\", \"Wing\" ],\r\n    \"Wand\" : [\"Bane\", \"Barb\", \"Bite\", \"Branch\", \"Call\", \"Chant\", \"Charm\", \"Cry\", \"Edge\", \"Gnarl\", \"Goad\", \"Needle\", \"Scratch\", \"Song\", \"Spell\", \"Spire\", \"Thirst\", \"Weaver\" ],\r\n\r\n    // Armor\r\n    \"Body Armour\" : [\"Carapace\", \"Cloak\", \"Coat\", \"Curtain\", \"Guardian\", \"Hide\", \"Jack\", \"Keep\", \"Mantle\", \"Pelt\", \"Salvation\", \"Sanctuary\", \"Shell\", \"Shelter\", \"Shroud\", \"Skin\", \"Suit\", \"Veil\", \"Ward\", \"Wrap\" ],\r\n    \"Helmet\" : [\"Brow\", \"Corona\", \"Cowl\", \"Crest\", \"Crown\", \"Dome\", \"Glance\", \"Guardian\", \"Halo\", \"Horn\", \"Keep\", \"Peak\", \"Salvation\", \"Shelter\", \"Star\", \"Veil\", \"Visage\", \"Visor\", \"Ward\" ],\r\n    \"Gloves\" : [\"Caress\", \"Claw\", \"Clutches\", \"Fingers\", \"Fist\", \"Grasp\", \"Grip\", \"Hand\", \"Hold\", \"Knuckle\", \"Mitts\", \"Nails\", \"Palm\", \"Paw\", \"Talons\", \"Touch\", \"Vise\" ],\r\n    \"Boots\" : [\"Dash\", \"Goad\", \"Hoof\", \"League\", \"March\", \"Pace\", \"Road\", \"Slippers\", \"Sole\", \"Span\", \"Spark\", \"Spur\", \"Stride\", \"Track\", \"Trail\", \"Tread\", \"Urge\" ],\r\n    // These share the 'Shield' item class, have to search for the 'focus' tag on the item\r\n    \"_Spirit Shield\" : [\"Ancient\", \"Anthem\", \"Call\", \"Chant\", \"Charm\", \"Emblem\", \"Guard\", \"Mark\", \"Pith\", \"Sanctuary\", \"Song\", \"Spell\", \"Star\", \"Ward\", \"Weaver\", \"Wish\" ],\r\n    \"_Other Shield\" : [\"Aegis\", \"Badge\", \"Barrier\", \"Bastion\", \"Bulwark\", \"Duty\", \"Emblem\", \"Fend\", \"Guard\", \"Mark\", \"Refuge\", \"Rock\", \"Rook\", \"Sanctuary\", \"Span\", \"Tower\", \"Watch\", \"Wing\" ],\r\n\r\n    // Accessories\r\n    \"Amulet\" : [\"Beads\", \"Braid\", \"Charm\", \"Choker\", \"Clasp\", \"Collar\", \"Idol\", \"Gorget\", \"Heart\", \"Locket\", \"Medallion\", \"Noose\", \"Pendant\", \"Rosary\", \"Scarab\", \"Talisman\", \"Torc\" ],\r\n    \"Ring\" : [\"Band\", \"Circle\", \"Coil\", \"Eye\", \"Finger\", \"Grasp\", \"Grip\", \"Gyre\", \"Hold\", \"Knot\", \"Knuckle\", \"Loop\", \"Nail\", \"Spiral\", \"Turn\", \"Twirl\", \"Whorl\" ],\r\n    \"Belt\" : [\"Bind\", \"Bond\", \"Buckle\", \"Clasp\", \"Cord\", \"Girdle\", \"Harness\", \"Lash\", \"Leash\", \"Lock\", \"Locket\", \"Shackle\", \"Snare\", \"Strap\", \"Tether\", \"Thread\", \"Trap\", \"Twine\" ],\r\n    \"Quiver\" : [\"Arrow\", \"Barb\", \"Bite\", \"Bolt\", \"Brand\", \"Dart\", \"Flight\", \"Hail\", \"Impaler\", \"Nails\", \"Needle\", \"Quill\", \"Rod\", \"Shot\", \"Skewer\", \"Spear\", \"Spike\", \"Spire\", \"Stinger\" ],\r\n\r\n    // No source for this! Just pulling some random names off poe.trade\r\n    \"Jewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n    \"AbyssJewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n};\r\n\r\nexport function GenerateRareName(itemData, rng) {\r\n    const prefixIdx = Math.floor(rng() * RarePrefixes.length);\r\n    const prefix = RarePrefixes[prefixIdx];\r\n    let suffixPool = [];\r\n    if (itemData[\"item_class\"] === \"Shield\") {\r\n        if (itemData[\"tags\"].includes(\"focus\")) {\r\n            suffixPool = RareSuffixes[\"_Spirit Shield\"];\r\n        }\r\n        else {\r\n            suffixPool = RareSuffixes[\"_Other Shield\"];\r\n        }\r\n    }\r\n    else {\r\n        suffixPool = RareSuffixes[itemData[\"item_class\"]];\r\n    }\r\n    const suffixIdx = Math.floor(rng() * suffixPool.length);\r\n    const suffix = suffixPool[suffixIdx];\r\n    return prefix + \" \" + suffix;\r\n}\r\n\r\nexport default { GenerateRareName };","// export class ModGroupTree {\r\n//     constructor() {\r\n//         this.domains = {};\r\n//     }\r\n\r\n//     add(modId, domain, group, type, positiveWeightTags, zeroWeightTags) {\r\n//         // { domains : { <domain_str> : <groupset> } }\r\n//         // <groupset> = { <group_str> : <typeset> }\r\n//         // <typeset>  = { <type_str> : { positiveTags : <tagset>, zeroTags : <tagset> } }\r\n//         // <tagset>   = { <tag_str> : [ <modId> ... ] }\r\n//         if (!(domain in this.domains)) {\r\n//             this.domains[domain] = {};\r\n//         }\r\n//         let groupSet = this.domains[domain];\r\n//         if (!(group in groupSet)) {\r\n//             groupSet[group] = {};\r\n//         }\r\n//         let typeSet = groupSet[group];\r\n//         if (!(type in typeSet)) {\r\n//             typeSet[type] = { positiveTags : {}, zeroTags: {} };\r\n//         }\r\n//         let positiveTagSet = typeSet[type].positiveTags;\r\n//         let zeroTagSet = typeSet[type].zeroTags;\r\n//         for (let tag of positiveWeightTags) {\r\n//             if (!(tag in positiveTagSet)) {\r\n//                 positiveTagSet[tag] = [];\r\n//             }\r\n//             positiveTagSet[tag].push(modId);\r\n//         }\r\n//         for (let tag of zeroWeightTags) {\r\n//             if (!(tag in zeroTagSet)) {\r\n//                 zeroTagSet[tag] = [];\r\n//             }\r\n//             zeroTagSet[tag].push(modId);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export class ModGroupSet {\r\n//     constructor() { \r\n//         this.groupSets = {};\r\n//     }\r\n\r\n//     add(modId, domain, group, type) {\r\n//         const key = domain + \"|\" + group + \"|\" + type;\r\n//         if (!(key in this.groupSets)) {\r\n//             this.groupSets[key] = [ modId ];\r\n//         }\r\n//         else {\r\n//             this.groupSets[key].push(modId);\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport class ModLookupTables {\r\n    constructor() {\r\n        this.domainTable = {};\r\n        this.groupedModTable = {};\r\n        this.firstStatLine = {};\r\n    }\r\n\r\n    add(modId, domain, group, type) {\r\n        this.addToDomainTable(modId, domain);\r\n        this.addToGroupedModTable(modId, domain, group, type);\r\n    }\r\n\r\n    addFirstStatLine(modId, statLineIdx)\r\n    {\r\n        this.firstStatLine[modId] = statLineIdx;\r\n    }\r\n\r\n    addToDomainTable(modId, domain) {\r\n        if (!(domain in this.domainTable)) {\r\n            this.domainTable[domain] = [modId];\r\n        }\r\n        else {\r\n            this.domainTable[domain].push(modId);\r\n        }\r\n    }\r\n\r\n    addToGroupedModTable(modId, domain, group, type) {\r\n        const key = this.getGroupedTableKey(domain, group, type);\r\n        if (!(key in this.groupedModTable)) {\r\n            this.groupedModTable[key] = [ modId ];\r\n        }\r\n        else {\r\n            this.groupedModTable[key].push(modId);\r\n        }\r\n    }\r\n\r\n    getDomainTable(domain) {\r\n        return this.domainTable[domain];\r\n    }\r\n\r\n    getGroupedTable(domain, group, type) {\r\n        return this.groupedModTable[this.getGroupedTableKey(domain, group, type)];\r\n    }\r\n\r\n    getGroupedTableKey(domain, group, type) {\r\n        return domain + \"|\" + group + \"|\" + type;\r\n    }\r\n\r\n    getFirstStatLine(modId) {\r\n        return this.firstStatLine[modId];\r\n    }\r\n}\r\n\r\n// export class ModGroup {\r\n//     constructor(domain, group, type, positiveWeightTags, zeroWeightTags) {\r\n//         this.domain = domain;\r\n//         this.group = group;\r\n//         this.type = type;\r\n//         this.positiveWeightTags = new Set(positiveWeightTags);\r\n//         this.zeroWeightTags = new Set(zeroWeightTags);\r\n\r\n//         this.modIds = [];\r\n//     }\r\n\r\n//     equivalent(other) {\r\n//         return (other.domain == this.domain\r\n//             && other.group == this.group\r\n//             && other.type == this.type\r\n//             && this.setsCompatible(other.positiveWeightTags, this.positiveWeightTags)\r\n//             && this.setsCompatible(other.zeroWeightTags, this.zeroWeightTags)\r\n//         );\r\n//     }\r\n\r\n//     setsCompatible(a, b) {\r\n//         /*\r\n//         if (a.size !== b.size) {\r\n//             return false;\r\n//         }\r\n//         */\r\n//         for (const _a of a) {\r\n//             if (!b.has(_a)) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         for (const _b of b) {\r\n//             if (!a.has(_b)) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         return true;\r\n//     }\r\n// }\r\n\r\nexport function ParseModGroups(mods, stats) {\r\n    let modLookupTables = new ModLookupTables();\r\n\r\n    const statKeys = Object.keys(stats);\r\n\r\n    for (const modId in mods) {\r\n        const mod = mods[modId];\r\n\r\n        modLookupTables.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"]);\r\n\r\n        let firstStatIdx = -1;\r\n        const firstStatId = mod[\"stats\"].length > 0 ? mod[\"stats\"][0][\"id\"] : \"\";\r\n        if (firstStatId.length > 0) {\r\n          for (let statIdx = 0; statIdx < statKeys.length; ++statIdx) {\r\n            const statKey = statKeys[statIdx];\r\n            if (statKey === firstStatId) {\r\n                firstStatIdx = statIdx;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n        modLookupTables.addFirstStatLine(modId, firstStatIdx);\r\n\r\n        // // Filter mods from unaccepted domains\r\n        // if (!validModDomains.has(mod[\"domain\"])) {\r\n        //     continue;\r\n        // }\r\n\r\n        // if (!validModGenerationTypes.has(mod[\"generation_type\"])) {\r\n        //     continue;\r\n        // }\r\n        \r\n        // let positiveWeightTags = [];\r\n        // let zeroWeightTags = [];\r\n        // for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n        //     if (spawnWeight[\"weight\"] > 0) {\r\n        //         positiveWeightTags.push(spawnWeight[\"tag\"]);\r\n        //     }\r\n        //     else {\r\n        //         zeroWeightTags.push(spawnWeight[\"tag\"]);\r\n        //     }\r\n        // }\r\n\r\n        // // Filter un-rollable mods\r\n        // if (positiveWeightTags.length == 0) {\r\n        //     continue;\r\n        // }\r\n\r\n        // modGroupTree.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"], positiveWeightTags, zeroWeightTags);\r\n        // modGroupSet.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"]);\r\n\r\n        // let candidateModGroup = new ModGroup(mod[\"domain\"], mod[\"group\"], mod[\"type\"], positiveWeightTags, zeroWeightTags);\r\n        // let existingModGroup = null;\r\n        // for (let testExistingModGroup of modGroups) {\r\n        //     if (testExistingModGroup.equivalent(candidateModGroup)) {\r\n        //         existingModGroup = testExistingModGroup;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // if (existingModGroup === null) {\r\n        //     candidateModGroup.modIds.push(modId);\r\n        //     modGroups.push(candidateModGroup);\r\n        // }\r\n        // else {\r\n        //     existingModGroup.modIds.push(modId);\r\n        // }\r\n    }\r\n\r\n    // for (const modGroup of modGroups) {\r\n    //     console.log(\"{\" + modGroup.domain + \" \" + modGroup.group + \" \" + modGroup.type + \" +\" + modGroup.positiveWeightTags + \" -\" + modGroup.zeroWeightTags + \"} : \" + modGroup.modIds.length);\r\n    //     for (const modId of modGroup.modIds) {\r\n    //         console.log(\" - \" + modId);\r\n    //     }\r\n    // }\r\n    return modLookupTables;\r\n}\r\n\r\nexport default { ParseModGroups };","import React from 'react';\r\nimport './App.css';\r\nimport TranslationHelper from './Translation.js';\r\nimport seedrandom from 'seedrandom';\r\nimport RareItemNames from './RareItemnames.js';\r\nimport ModGroups from './ModGroups.js';\r\nimport base_items from './data/base_items.json';\r\nimport item_classes from './data/item_classes.json';\r\nimport _mods from './data/mods.json';\r\nimport stat_translations from './data/stat_translations.json';\r\nimport stats from './data/stats.json'\r\n\r\nfunction randRange(rng, minInclusive, maxInclusive) {\r\n  return Math.floor(rng.quick() * (maxInclusive - minInclusive + 1)) + minInclusive;\r\n}\r\n\r\nfunction PropertyLine (props) {\r\n  let replacementIdx = 0;\r\n  let replacementSpans = props.values.map((x) => <span className=\"property\" key={replacementIdx++}>{x}</span>);\r\n  const lineSplit = props.line.split(/{}/g);\r\n  let output = [];\r\n  for (let i = 0; i < lineSplit.length - 1; ++i) {\r\n    output.push(lineSplit[i]);\r\n    output.push(replacementSpans[i]);\r\n  }\r\n  output.push(lineSplit[lineSplit.length - 1]);\r\n  return <div className=\"propertyLine\">{output}</div>;\r\n}\r\n\r\nfunction TipLine (props) {\r\n  return <div className=\"tipLine\">{props.line}</div>\r\n}\r\n\r\nfunction ModLine (props) {\r\n  return <div className=\"modLine\">{props.line}</div>\r\n}\r\n\r\nfunction ItemNameLine (props) {\r\n  return [props.topLine && <div className=\"itemName\" key=\"itemName_top\">{props.topLine}</div>, props.bottomLine && <div className=\"itemName\" key=\"itemName_bottom\">{props.bottomLine}</div>];\r\n}\r\n\r\nfunction ItemHeader (props) {\r\n  const double = props.generatedName.length > 0 && props.itemTypeName.length > 0;\r\n  const leftSymbolClass = props.influences.length > 0 ? props.influences[0] : \"\";\r\n  const rightSymbolClass = props.influences.length > 1 ? props.influences[1] : leftSymbolClass;\r\n  return  <div className={\"header-border \" + (double ? \"double\" : \"single\")}>\r\n            <span className={\"l symbol \" + leftSymbolClass}></span>\r\n            <ItemNameLine topLine={props.generatedName} bottomLine={props.itemTypeName} key=\"nameLine\"/>\r\n            <span className={\"r symbol \" + rightSymbolClass}></span>\r\n          </div>\r\n  ;\r\n}\r\n\r\nclass CraftedItem extends React.Component {\r\n  getItemTypeName() {\r\n    return base_items[this.props.itemState.baseItemId][\"name\"];\r\n  }\r\n\r\n  getTipLine(modInstance, generationType) {\r\n    const mod = this.props.context.mods[modInstance.id];\r\n    let line = \"\";\r\n    if (generationType === \"prefix\" || generationType === \"suffix\") {\r\n      line = generationType[0].toUpperCase() + generationType.slice(1) + \" Modifier \\\"\" + mod[\"name\"] + \"\\\"\" + (modInstance.tierCount > 0 ? (\" (Tier: \" + (modInstance.tier + 1) + \" [\" + (modInstance.tierCount - modInstance.tierCountAtItemLevel + 1) + \"-\" + modInstance.tierCount + \"])\") : \"\");\r\n    }\r\n    else if (generationType === \"unique\" || generationType === \"implicit\") {\r\n      line = generationType[0].toUpperCase() + generationType.slice(1) + \" Modifier\";\r\n    }\r\n    return <TipLine line={line} key={modInstance.id + \"_tip\"}/>;\r\n  }\r\n\r\n  getStatLines(modInstance) {\r\n    const mod = this.props.context.mods[modInstance.id];\r\n    const values = modInstance.values;\r\n    const translationStrings = TranslationHelper.TranslateMod(stat_translations, mod, values);    \r\n    return translationStrings.map((x, i) => <ModLine line={x} key={modInstance.id + \"_mod_\" + i}/>);\r\n  }\r\n\r\n  getImplicitLine(modInstance) {\r\n    const statLines = this.getStatLines(modInstance);\r\n    if (statLines.length > 0) {\r\n      return [this.getTipLine(modInstance, \"implicit\"), this.getStatLines(modInstance)];\r\n    }\r\n  }\r\n\r\n  getImplicitBoxes() {\r\n    let showMods = this.props.itemState.implicits;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(\r\n      x => <div className=\"modBox implicit\" key={x.id}>{this.getImplicitLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getAffixLine(modInstance) {\r\n    return [this.getTipLine(modInstance, this.props.context.mods[modInstance.id][\"generation_type\"]), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getAffixBoxes() {\r\n    let showMods = this.props.itemState.affixes;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(    \r\n      x => <div className=\"modBox\" key={x.id}>{this.getAffixLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getGroupsWithSeparators(groups) \r\n  {\r\n    let separatedGroups = [];\r\n    let separatoridx = 0;\r\n    for (const group of groups) {\r\n      if (group.length > 0) {\r\n        separatedGroups.push(<div className=\"separator\" key={\"sep_\" + separatoridx} />);\r\n        separatoridx++;\r\n        separatedGroups = separatedGroups.concat(group);\r\n      }\r\n    }\r\n    return separatedGroups;\r\n  }\r\n\r\n  render() {\r\n    return <div className={\"craftedItem \" + this.props.itemState.rarity}>\r\n      <div className=\"content-box\">\r\n        <ItemHeader itemTypeName={this.getItemTypeName()} generatedName={this.props.itemState.generatedName} influences={this.props.itemState.influences} />\r\n        <PropertyLine line=\"Item Level: {}\" values={[this.props.itemState.level]} />\r\n        { this.getGroupsWithSeparators([this.getImplicitBoxes(), this.getAffixBoxes()]) }\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\nfunction ModListLine(props) {\r\n  let spanIdx = 0;\r\n  let nameLineElements = props.nameLines.map( (x) => <span key={spanIdx++}>{x}</span>);\r\n  for (let i = 1; i < nameLineElements.length; i += 2) {\r\n    nameLineElements.splice(i, 0, <br />);\r\n  }\r\n  return <div className=\"modLine\">\r\n    <div className=\"modTier\">\r\n      { props.tierString }\r\n    </div>\r\n    <div className=\"modName\">\r\n      { nameLineElements }\r\n    </div>\r\n    <div className=\"modWeight\">\r\n      { props.weight }\r\n    </div>\r\n    <div className=\"modProb\">\r\n      { props.prob }\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nclass ModList extends React.Component {\r\n  render() {\r\n    const modList = GetValidModsAndWeightsForItem(this.props.itemState, this.props.context, \"rare\").sort((a, b) => { return ModIdComparer(a.modId, b.modId, this.props.context) });\r\n    return <div className=\"modList\">\r\n      <div className=\"modGroup\">\r\n        {\r\n          modList.map((x) => {\r\n            const modData = this.props.context.mods[x.modId];\r\n            const modWeight = x.weight;\r\n            const modName = TranslationHelper.TranslateMod(stat_translations, modData);\r\n            const modTierInfo = GetTierForMod(this.props.itemState, x.modId, this.props.context);\r\n            return <ModListLine tierString={modData[\"generation_type\"].slice(0, 1) + (modTierInfo[0] + 1)} nameLines={modName} weight={modWeight} prob=\"1.25%\" key={x.modId} />\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nfunction CanBaseItemHaveRarity(baseItemId, rarity) {\r\n  const baseItem = base_items[baseItemId];\r\n  if (baseItem[\"domain\"] === \"flask\") {\r\n    return rarity !== \"rare\";\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetSpawnWeightForMod(modId, tags, context) {\r\n  const mod = context.mods[modId];\r\n  for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n    if (tags.includes(spawnWeight[\"tag\"])) {\r\n      return spawnWeight[\"weight\"];\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetPrefixCount(itemState, context) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = context.mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"prefix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetSuffixCount(itemState, context) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = context.mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"suffix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetAffixCount(itemState, context) {\r\n  return GetPrefixCount(itemState, context) + GetSuffixCount(itemState, context);\r\n}\r\n\r\nfunction GetPrefixLimitForRarity(baseItemId, rarity) {\r\n  if (rarity === \"normal\") {\r\n    return 0;\r\n  }\r\n  if (rarity === \"magic\") {\r\n    return 1;\r\n  }\r\n  if (rarity === \"rare\" || rarity === \"unique\") {\r\n    const baseItem = base_items[baseItemId];\r\n    if (baseItem[\"domain\"] === \"misc\" || baseItem[\"domain\"] === \"abyss_jewel\") {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetSuffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetAffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity) + GetSuffixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetPrefixLimit(itemState) {\r\n  return GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetSuffixLimit(itemState) {\r\n  return GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetAffixLimit(itemState) {\r\n  return GetAffixLimitForRarity(itemState.baseItemId, itemState.rarity); \r\n}\r\n\r\nfunction CanModBeAddedToItem(modId, itemState, context, hasPrefixSlots, hasSuffixSlots, existingModGroups) {\r\n  const mod = context.mods[modId];\r\n\r\n  /*\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  if (mod[\"domain\"] !== baseItem[\"domain\"]) {\r\n    return false;\r\n  }\r\n  */\r\n\r\n  if (mod[\"required_level\"] > itemState.level) {\r\n    return false;\r\n  }\r\n\r\n  if ((mod[\"generation_type\"] === \"prefix\")) {\r\n    if(!hasPrefixSlots) {\r\n      return false;\r\n    }\r\n  }\r\n  else if (mod[\"generation_type\"] === \"suffix\") {\r\n    if (!hasSuffixSlots) {\r\n      return false;\r\n    }\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n\r\n  const modGroup = mod[\"group\"];\r\n  if (modGroup && modGroup !== \"\") {\r\n    if (existingModGroups.has(modGroup)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetValidModsAndWeightsForItem(itemState, context, rarityOverride = \"\") {\r\n  const tags = GetItemTags(itemState, context);\r\n  let validMods = [];\r\n  const rarity = rarityOverride !== \"\" ? rarityOverride : itemState.rarity;\r\n  const hasPrefixSlots = GetPrefixLimitForRarity(itemState.baseItemId, rarity) > GetPrefixCount(itemState, context);\r\n  const hasSuffixSlots = GetSuffixLimitForRarity(itemState.baseItemId, rarity) > GetSuffixCount(itemState, context);\r\n  let existingModGroups = new Set();\r\n  for (const affix of itemState.affixes) {\r\n    const existingMod = context.mods[affix.id];\r\n    existingModGroups.add(existingMod[\"group\"]);\r\n  }\r\n\r\n  const modIds = context.modLookupTables.getDomainTable(base_items[itemState.baseItemId][\"domain\"]);\r\n  for (const modId of modIds) {\r\n    if (!CanModBeAddedToItem(modId, itemState, context, hasPrefixSlots, hasSuffixSlots, existingModGroups)) {\r\n      continue;\r\n    }\r\n    \r\n    const spawnWeight = GetSpawnWeightForMod(modId, tags, context);\r\n    if (spawnWeight <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push({modId: modId, weight: spawnWeight});\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction GetValidModsAndWeightsForItemWithPositiveWeightTag(itemState, tag, context) {\r\n  const tags = GetItemTags(itemState, context);\r\n  let validMods = [];\r\n  const hasPrefixSlots = GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity) > GetPrefixCount(itemState, context);\r\n  const hasSuffixSlots = GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity) > GetSuffixCount(itemState, context);\r\n  let existingModGroups = new Set();\r\n  for (const affix of itemState.affixes) {\r\n    const existingMod = context.mods[affix.id];\r\n    existingModGroups.add(existingMod[\"group\"]);\r\n  }\r\n\r\n  for (const modId in context.mods) {\r\n    const mod = context.mods[modId];\r\n    if (!(mod[\"spawn_weights\"].find(x => x[\"tag\"] === tag && x[\"weight\"] > 0))) {\r\n      continue;\r\n    }\r\n\r\n    if (!CanModBeAddedToItem(modId, itemState, context, hasPrefixSlots, hasSuffixSlots, existingModGroups)) {\r\n      continue;\r\n    }\r\n\r\n    const spawnWeight = GetSpawnWeightForMod(modId, tags, context);\r\n    if (spawnWeight <= 0) {\r\n      continue;\r\n    }\r\n\r\n    validMods.push({modId: modId, weight: spawnWeight});\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction CreateWeightedModPool(modsAndWeights) {\r\n  let modPool = {\r\n    totalWeight : 0,\r\n    mods : []\r\n  }\r\n\r\n  for (const modAndWeight of modsAndWeights) {\r\n    let modWeight = modAndWeight.weight;\r\n    modPool.mods.push({\r\n      id : modAndWeight.modId,\r\n      weight : modWeight\r\n    });\r\n    modPool.totalWeight += modWeight;\r\n  }\r\n\r\n  return modPool;\r\n}\r\n\r\nfunction PickModFromWeightedModPool(modPool, context) {\r\n  const randRoll = randRange(context.rng, 0, modPool.totalWeight - 1);\r\n  let weightAccum = 0;\r\n\r\n  for (const mod of modPool.mods) {\r\n    const modEndWeight = weightAccum + mod.weight;\r\n    if (randRoll < modEndWeight) {\r\n      return mod.id;\r\n    }\r\n    weightAccum = modEndWeight;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction GetInfluenceTag(baseItemId, influence) {\r\n  const baseItem = base_items[baseItemId];\r\n  const baseItemClass = baseItem[\"item_class\"];\r\n  if (baseItemClass in item_classes) {\r\n    const influenceTagId = influence + \"_tag\";\r\n    if (influenceTagId in item_classes[baseItemClass]) {\r\n      const influenceTag = item_classes[baseItemClass][influenceTagId];\r\n      if (influenceTag) {\r\n        return influenceTag;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetAddedTags(modId, context) {\r\n  return context.mods[modId][\"adds_tags\"];\r\n}\r\n\r\nfunction GetBaseItemTags (itemState, context) {\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  let tags = [];\r\n  tags = tags.concat(baseItem[\"tags\"]);\r\n  for (const influence of itemState.influences) {\r\n    const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n    if (influenceTag) {\r\n      tags.push(influenceTag);\r\n    }\r\n  }\r\n  for (const implicit of itemState.implicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id, context));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction GetItemTags(itemState, context) {\r\n  let tags = GetBaseItemTags(itemState, context);\r\n  for (const affix of itemState.affixes) {\r\n    tags = tags.concat(GetAddedTags(affix.id, context));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction RollModValues(modId, context) {\r\n  let statRolls = [];\r\n  const mod = context.mods[modId];\r\n  for (const stat of mod[\"stats\"]) {\r\n    statRolls.push(randRange(context.rng, stat[\"min\"], stat[\"max\"]));\r\n  }\r\n  return statRolls;\r\n}\r\n\r\nfunction GetTierForMod(itemState, modId, context) {\r\n  const mod = context.mods[modId];\r\n  if (mod[\"is_essence_only\"]) {\r\n    return [0, 1]\r\n  }\r\n\r\n  if (mod[\"generation_type\"] === \"unique\") {\r\n    return [0, 1]\r\n  }\r\n\r\n  let modTier = 0;\r\n  let modCount = 1;\r\n  let modCountAtItemLevel = 1;\r\n  const modLevel = mod[\"required_level\"];\r\n  const baseItemTags = GetBaseItemTags(itemState, context);\r\n  const otherModIds = context.modLookupTables.getGroupedTable(mod[\"domain\"], mod[\"group\"], mod[\"type\"]);\r\n  for (const otherModId of otherModIds) {\r\n    if (otherModId === modId) {\r\n      continue;\r\n    }\r\n    const otherMod = context.mods[otherModId];\r\n    if (otherMod[\"is_essence_only\"]) {\r\n      continue;\r\n    }\r\n    if (GetSpawnWeightForMod(otherModId, baseItemTags, context) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    modCount++;\r\n\r\n    if (otherMod[\"required_level\"] <= itemState.level) {\r\n      modCountAtItemLevel++;\r\n    }\r\n\r\n    if (otherMod[\"required_level\"] > modLevel) {\r\n      modTier++;\r\n    }\r\n  }\r\n\r\n  return [modTier, modCount, modCountAtItemLevel];\r\n}\r\n\r\nfunction CreateRolledMod(itemState, modId, context) {\r\n  const tierValues = GetTierForMod(itemState, modId, context);\r\n  return {\r\n    id : modId,\r\n    values : RollModValues(modId, context),\r\n    tier : tierValues[0],\r\n    tierCount : tierValues[1],\r\n    tierCountAtItemLevel : tierValues[2]\r\n  }  \r\n}\r\n\r\nfunction RollRareName(itemState, rng) {\r\n  const itemData = base_items[itemState.baseItemId];\r\n  return RareItemNames.GenerateRareName(itemData, rng);\r\n}\r\n\r\nfunction RollRareAffixCount(baseItemId, rng) {\r\n  const maxAffixCount = GetAffixLimitForRarity(baseItemId, \"rare\");\r\n  if (maxAffixCount === 6) {\r\n    // Number of mods from data mined note (source: POE Discord, #3rd-party-tool-dev)\r\n    // \"1/12 chance for 6 mods, 4/12 chance for 5 mods, and 7/12 chance for 6 mods\"\r\n    const randInt = randRange(rng, 0, 11);\r\n    if (randInt < 7) {\r\n      return 4;\r\n    }\r\n    if (randInt < 11) {\r\n      return 5;\r\n    }\r\n    return 6;\r\n  }\r\n  else if (maxAffixCount === 4) {\r\n    // Number of mods from data mined note (source: reddit, https://www.reddit.com/r/pathofexile/comments/8fxnlu/chance_of_getting_specific_number_of_mods_via/)\r\n    // \"for jewels: 65/35\"\r\n    const randInt = randRange(rng, 0, 99);\r\n    if (randInt < 65) {\r\n      return 3;\r\n    }\r\n    return 4;\r\n  }\r\n  else if (maxAffixCount > 0) {\r\n    // Unexpected situation, roll pure random\r\n    return randRange(rng, 1, maxAffixCount);\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction cloneMods(modArray) {\r\n  let newArray = Array(modArray.length);\r\n  for (const oldModIdx in modArray) {\r\n    newArray[oldModIdx] = { ...modArray[oldModIdx], values : [ ...modArray[oldModIdx].values ]};\r\n  }\r\n  return newArray;\r\n}\r\n\r\nfunction cloneItemState(itemState) {\r\n  return { \r\n    ...itemState, \r\n    influences : itemState.influences.slice(),\r\n    implicits : cloneMods(itemState.implicits), \r\n    corruptions : cloneMods(itemState.corruptions), \r\n    affixes : cloneMods(itemState.affixes) \r\n  };\r\n}\r\n\r\nfunction CreateItem(baseItemId, level, context) {\r\n  let itemState = {\r\n    generatedName : \"\",\r\n    baseItemId : baseItemId,\r\n    level : level,\r\n    rarity : \"normal\",\r\n    corrupted : false,\r\n    quality : 0,\r\n    influences : [],\r\n    implicits : [],\r\n    corruptions : [],\r\n    affixes : []\r\n  }  \r\n\r\n  // Add and roll implicits\r\n  const baseItem = base_items[baseItemId];\r\n  for (const implicitId of baseItem[\"implicits\"]) {\r\n    itemState.implicits.push(CreateRolledMod(itemState, implicitId, context));\r\n  }\r\n\r\n  return itemState;\r\n}\r\n\r\nfunction AddRandomModFromListAndWeights(itemState, modsAndWeights, context) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const weightedModPool = CreateWeightedModPool(modsAndWeights, context);\r\n  const modId = PickModFromWeightedModPool(weightedModPool, context);\r\n  if (!modId) {\r\n    return [false, itemState];\r\n  }\r\n  newItemState.affixes.push(CreateRolledMod(itemState, modId, context));\r\n  return [true, newItemState];  \r\n}\r\n\r\nfunction AddRandomMod(itemState, context) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const modsAndWeights = GetValidModsAndWeightsForItem(newItemState, context);\r\n  return AddRandomModFromListAndWeights(itemState, modsAndWeights, context);\r\n}\r\n\r\nconst generationTypeOrder = {\r\n  \"unique\": 0,\r\n  \"prefix\": 1,\r\n  \"suffix\": 2,\r\n};\r\n\r\nfunction ModIdComparer (a, b, context) {\r\n  const modA = context.mods[a];\r\n  const modB = context.mods[b];\r\n\r\n  const modAGenerationType = modA[\"generation_type\"];\r\n  const modBGenerationType = modB[\"generation_type\"];\r\n  if (modAGenerationType !== modBGenerationType) {\r\n    if (modAGenerationType in generationTypeOrder && modBGenerationType in generationTypeOrder) {\r\n      return generationTypeOrder[modAGenerationType] - generationTypeOrder[modBGenerationType];\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const modAFirstStatIdx = context.modLookupTables.getFirstStatLine(a);\r\n  const modBFirstStartIdx = context.modLookupTables.getFirstStatLine(b);\r\n  if (modAFirstStatIdx !== modBFirstStartIdx) {\r\n    return (modAFirstStatIdx - modBFirstStartIdx);\r\n  }\r\n\r\n  const modARequiredLevel = modA[\"required_level\"];\r\n  const modBRequiredLevel = modB[\"required_level\"];\r\n  if (modARequiredLevel !== modBRequiredLevel) {\r\n    return -(modARequiredLevel - modBRequiredLevel);\r\n  }\r\n\r\n  return 0;  \r\n}\r\n\r\nfunction ModComparer (a, b, context) {\r\n  return ModIdComparer(a.id, b.id, context);\r\n}\r\n\r\nfunction SortMods(modList, context) {\r\n  let sortedList = cloneMods(modList);\r\n  sortedList.sort((a, b) => { return ModComparer(a, b, context) });\r\n  return sortedList;\r\n}\r\n\r\nfunction CanAddInfluenceToItem(itemState, influence) {\r\n  return GetInfluenceTag(itemState.baseItemId, influence) != null;\r\n}\r\n\r\nfunction AddInfluenceToItem(itemState, influence) {\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newState = cloneItemState(itemState);\r\n  newState.influences.push(influence);\r\n  return [true, newState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanScourItem(itemState, context) {\r\n  if (itemState.rarity === \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ScourItem(itemState, context) {\r\n  if (!CanScourItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, { ...cloneItemState(itemState), generatedName : \"\", rarity : \"normal\", affixes : [] }];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanTransmutationItem(itemState, context) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"magic\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction TransmutationItem(itemState, context) {\r\n  if (!CanTransmutationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"magic\" };\r\n  const numMods = randRange(context.rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, context)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanAlterationItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlterationItem(itemState, context) {\r\n  if (!CanAlterationItem(itemState, context)) {\r\n    return [0, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [] };\r\n  const numMods = randRange(context.rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, context)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAugmentationItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AugmentationItem(itemState, context) {\r\n  if (!CanAugmentationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, context);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanRegalItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction RegalItem(itemState, context) {\r\n  if (!CanRegalItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let rareItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, context.rng) };\r\n  const [result, newItemState] = AddRandomMod(rareItemState, context);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanAlchemyItem(itemState, context) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlchemyItem(itemState, context) {\r\n  if (!CanAlchemyItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, context.rng) };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, context.rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, context)[1];\r\n  }\r\n  newItemState.generatedName = RollRareName(itemState, context.rng);\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanChaosItem(itemState, context) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ChaosItem(itemState, context) {\r\n  if (!CanChaosItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [], generatedName : RollRareName(itemState, context.rng)  };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, context.rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, context)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedItem(itemState, context) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction ExaltedItem(itemState, context) {\r\n  if (!CanExaltedItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, context);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedWithInfluenceItem(itemState, context, influence) {\r\n  if (itemState.influences.length > 0) {\r\n    return false;\r\n  }\r\n  if (!CanExaltedItem(itemState, context)) {\r\n    return false;\r\n  }\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsAndWeightsForItemWithPositiveWeightTag(newItemState, influenceTag, context);\r\n  if (validMods.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ExaltedWithInfluenceItem(itemState, context, influence) {\r\n  if (!CanExaltedWithInfluenceItem(itemState, context, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsAndWeightsForItemWithPositiveWeightTag(newItemState, influenceTag, context);\r\n  return AddRandomModFromListAndWeights(newItemState, validMods, context);\r\n}\r\n\r\nfunction CanAnnulmentItem(itemState, context) {\r\n  if (itemState.rarity === \"normal\" || itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AnnulmentItem(itemState, context) {\r\n  if (!CanAnnulmentItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  const numAffixes = GetAffixCount(newItemState, context);\r\n  const affixIdxToRemove = randRange(context.rng, 0, numAffixes - 1);\r\n  newItemState.affixes.splice(affixIdxToRemove, 1);\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanBlessedItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.implicits.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction BlessedItem(itemState, context) {\r\n  if (!CanBlessedItem(itemState, context)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let implicit of newItemState.implicits) {\r\n    implicit.values = RollModValues(implicit.id, context);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanDivineItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.affixes.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction DivineItem(itemState, context) {\r\n  if (!CanDivineItem(itemState, context)) {\r\n    return false;\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let affix of newItemState.affixes) {\r\n    affix.values = RollModValues(affix.id, context);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CraftingButton(props) {\r\n  return <button className=\"button\" onClick={props.onClick} disabled={!props.enabled}>{props.label}</button>;\r\n}\r\n\r\nclass TheoryCrafterContext {\r\n  constructor(modDatabase, rng) {\r\n    this.mods = modDatabase;\r\n    this.modLookupTables = ModGroups.ParseModGroups(modDatabase, stats);\r\n    this.rng = rng;\r\n  }\r\n}\r\n\r\nclass TheoryCrafter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.testMap = {\r\n      \"scour\" : CanScourItem,\r\n      \"transmute\" : CanTransmutationItem,\r\n      \"alt\" : CanAlterationItem,\r\n      \"aug\" : CanAugmentationItem,\r\n      \"regal\" : CanRegalItem,\r\n      \"alch\" : CanAlchemyItem,\r\n      \"chaos\" : CanChaosItem,\r\n      \"exalt\" : CanExaltedItem,\r\n      \"exalt_crusader\" : (itemState, context) => CanExaltedWithInfluenceItem(itemState, context, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState, context) => CanExaltedWithInfluenceItem(itemState, context, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState, context) => CanExaltedWithInfluenceItem(itemState, context, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState, context) => CanExaltedWithInfluenceItem(itemState, context, \"warlord\"),\r\n      \"annul\" : CanAnnulmentItem,\r\n      \"bless\" : CanBlessedItem,\r\n      \"divine\" : CanDivineItem,\r\n    }\r\n\r\n    this.actionMap = {\r\n      \"scour\" : ScourItem,\r\n      \"transmute\" : TransmutationItem,\r\n      \"alt\" : AlterationItem,\r\n      \"aug\" : AugmentationItem,\r\n      \"regal\" : RegalItem,\r\n      \"alch\" : AlchemyItem,\r\n      \"chaos\" : ChaosItem,\r\n      \"exalt\" : ExaltedItem,\r\n      \"exalt_crusader\" : (itemState, context) => ExaltedWithInfluenceItem(itemState, context, \"crusader\"),\r\n      \"exalt_hunter\" : (itemState, context) => ExaltedWithInfluenceItem(itemState, context, \"hunter\"),\r\n      \"exalt_redeemer\" : (itemState, context) => ExaltedWithInfluenceItem(itemState, context, \"redeemer\"),\r\n      \"exalt_warlord\" : (itemState, context) => ExaltedWithInfluenceItem(itemState, context, \"warlord\"),\r\n      \"annul\" : AnnulmentItem,\r\n      \"bless\" : BlessedItem,\r\n      \"divine\" : DivineItem,\r\n    }\r\n\r\n    this.theoryCrafterContext = new TheoryCrafterContext(_mods, seedrandom());\r\n\r\n    const normalItemState = CreateItem(\"Metadata/Items/Armours/Boots/BootsAtlas1\", 100, this.theoryCrafterContext);\r\n    this.state = this.initState(normalItemState);\r\n  }\r\n\r\n  initState(initItemState) {\r\n    return {\r\n      itemStateHistory : [ { itemState: initItemState, action : \"\" } ],\r\n      itemStateHistoryIdx : 0,\r\n      lastCommand : \"\",\r\n      selectedBaseId : initItemState.baseItemId,\r\n      selectedBaseLevel : initItemState.level,\r\n      sortMods : false\r\n    };\r\n  }\r\n\r\n  pushState(newState, actionName) {\r\n    return { ...this.state, itemStateHistory : [ ...this.state.itemStateHistory, { itemState: newState, action : actionName } ] };\r\n  }\r\n\r\n  getState() {\r\n    return this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState;\r\n  }\r\n\r\n  canUndoState() {\r\n    return this.state.itemStateHistoryIdx > 0;\r\n  }\r\n\r\n  getUndoLabel() {\r\n    if (!this.canUndoState()) {\r\n      return \"Undo\";\r\n    }\r\n    return \"Undo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  undoState() {\r\n    if (this.state.itemStateHistoryIdx > 0)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx - 1 });\r\n    }\r\n  }\r\n\r\n  canRerollAction() {\r\n    return (this.state.itemStateHistory[this.state.itemStateHistoryIdx].action !== \"\") \r\n      && (this.state.itemStateHistoryIdx > 0);\r\n  }\r\n\r\n  getRerollLabel() {\r\n    if (!this.canRerollAction()) {\r\n      return \"Reroll Action\";\r\n    }\r\n    return \"Reroll \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  rerollAction() {\r\n    if (!this.canRerollAction()) {\r\n      return;\r\n    }\r\n    const action = this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n    const previousItemState = this.state.itemStateHistory[this.state.itemStateHistoryIdx - 1].itemState;\r\n    const canPerformAction = this.testMap[action](previousItemState, this.theoryCrafterContext);\r\n    if (!canPerformAction) {\r\n      return;\r\n    }\r\n    const result = this.actionMap[action](previousItemState, this.theoryCrafterContext);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutStateAt(result[1], action, this.state.itemStateHistoryIdx));\r\n    }\r\n  }\r\n\r\n  canRedoState() {\r\n    return this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1;\r\n  }\r\n\r\n  getRedoLabel() {\r\n    if (!this.canRedoState()) {\r\n      return \"Redo\";\r\n    }\r\n    return \"Redo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx + 1].action;\r\n  }\r\n\r\n  redoState() {\r\n    if (this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx + 1 });\r\n    }\r\n  }\r\n\r\n  insertAndCutStateAt(newState, actionName, index) {\r\n    const newStateHistory = this.state.itemStateHistory.slice(0, index);\r\n    newStateHistory.push( { itemState: newState, action : actionName } );\r\n    return { ...this.state, itemStateHistory : newStateHistory, itemStateHistoryIdx : index };    \r\n  }\r\n\r\n  insertAndCutState(newState, actionName) {\r\n    return this.insertAndCutStateAt(newState, actionName, this.state.itemStateHistoryIdx + 1);\r\n  }\r\n\r\n  canPerformAction(actionName) {\r\n    return this.testMap[actionName](this.getState(), this.theoryCrafterContext);\r\n  }\r\n\r\n  performAction(actionName) {\r\n    const result = this.actionMap[actionName](this.getState(), this.theoryCrafterContext);\r\n    if (result[0]) {\r\n      this.setState(this.insertAndCutState(result[1], actionName));\r\n    }\r\n  }\r\n\r\n  handleSelectedBaseChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseId : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectList() {\r\n    const baseItems = {}\r\n    for (const baseItemId in base_items) {\r\n      if (base_items[baseItemId][\"release_state\"] === \"released\") {\r\n        const domain = base_items[baseItemId][\"domain\"];\r\n        if (domain === \"item\" || domain === \"flask\") {\r\n          baseItems[baseItemId] = baseItemId.slice(baseItemId.lastIndexOf('/') + 1);\r\n        }\r\n      }\r\n    }\r\n    return <select value={this.state.selectedBaseId} onChange={(x) => this.handleSelectedBaseChanged(x)} key=\"baseItemSelector\">\r\n      { Object.keys(baseItems).map( (k) => <option value={k} key={k}>{baseItems[k]}</option> ) }\r\n    </select>;\r\n  }\r\n\r\n  handleSelectedBaseLevelChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseLevel : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectLevel() {\r\n    return <input value={this.state.selectedBaseLevel} onChange={(x) => this.handleSelectedBaseLevelChanged(x)} key=\"baseItemLevelInput\"/>;\r\n  }\r\n\r\n  handleBaseSelectButtonClicked() {\r\n    const normalItemState = CreateItem(this.state.selectedBaseId, this.state.selectedBaseLevel, this.theoryCrafterContext);\r\n    this.setState({ ...this.initState(normalItemState), sortMods: this.state.sortMods });\r\n  }\r\n\r\n  RenderBaseSelectButton() {\r\n    return <button onClick={() => this.handleBaseSelectButtonClicked()} key=\"baseItemCreateButton\">Create New Item</button>;\r\n  }\r\n\r\n  RenderCraftingButton(actionName, label) {\r\n    return <CraftingButton onClick={ () => this.performAction(actionName) } enabled={ this.canPerformAction(actionName) } label={label} key={actionName} />\r\n  }\r\n\r\n  handleSortModsToggled(e) {\r\n    this.setState( {...this.state, sortMods : e.target.checked} );\r\n  }\r\n\r\n  rollTest() {\r\n    let itemState = cloneItemState(this.getState());\r\n    for (let i = 0; i < 100; ++i) {\r\n      itemState = ScourItem(itemState, this.theoryCrafterContext)[1];\r\n      itemState = TransmutationItem(itemState, this.theoryCrafterContext)[1];\r\n    }\r\n    this.setState(this.insertAndCutState(itemState, \"scour\"));\r\n  }\r\n\r\n  render() {\r\n    return [\r\n        <div key=\"baseSelection\">\r\n          { [\r\n            this.RenderBaseSelectList(),\r\n            this.RenderBaseSelectLevel(),\r\n            this.RenderBaseSelectButton(),\r\n          ] }\r\n        </div>,\r\n        <div key=\"craftingButtons\">\r\n          { [\r\n            this.RenderCraftingButton(\"scour\", \"Scour\"),\r\n            this.RenderCraftingButton(\"transmute\", \"Transmutation\"),\r\n            this.RenderCraftingButton(\"aug\", \"Augmentation\"),\r\n            this.RenderCraftingButton(\"alt\", \"Alteration\"),\r\n            this.RenderCraftingButton(\"regal\", \"Regal\"),\r\n            this.RenderCraftingButton(\"alch\", \"Alchemy\"),\r\n            this.RenderCraftingButton(\"chaos\", \"Chaos\"),\r\n            this.RenderCraftingButton(\"exalt\", \"Exalted\"),\r\n            this.RenderCraftingButton(\"exalt_crusader\", \"Crusader Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_hunter\", \"Hunter Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_redeemer\", \"Redeemer Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_warlord\", \"Warlord Exalt\"),\r\n            this.RenderCraftingButton(\"annul\", \"Annulment\"),\r\n            this.RenderCraftingButton(\"bless\", \"Blessed\"),\r\n            this.RenderCraftingButton(\"divine\", \"Divine\")\r\n          ] }\r\n        </div>,\r\n        <div key=\"undoDiv\"><CraftingButton onClick={ () => this.undoState() } enabled={ this.canUndoState() } label={ this.getUndoLabel() } key=\"undo\" /></div>,\r\n        <div key=\"redoDiv\"><CraftingButton onClick={ () => this.redoState() } enabled={ this.canRedoState() } label={ this.getRedoLabel() } key=\"redo\" /></div>,\r\n        <div key=\"rerollDiv\"><CraftingButton onClick={ () => this.rerollAction() } enabled={ this.canRerollAction() } label={ this.getRerollLabel() } key=\"undo\" /></div>,\r\n        <div key=\"rollTest\"><CraftingButton onClick={ () => this.rollTest() } enabled={ true } label=\"Roll 100000\" /></div>,\r\n        <div key=\"sortMods\"><input type=\"checkbox\" onChange={(e) => this.handleSortModsToggled(e)} checked={this.state.sortMods} /><span style={{color: 'white'}}>Sort Mods</span></div>,\r\n        <CraftedItem itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } context={this.theoryCrafterContext} sortMods={this.state.sortMods} key=\"craftedItem\" />,\r\n        <ModList itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } context={this.theoryCrafterContext} key=\"modList\" />,\r\n    ]\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <TheoryCrafter />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}