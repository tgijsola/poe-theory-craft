{"version":3,"sources":["Translation.js","RareItemnames.js","ModGroups.js","App.js","serviceWorker.js","index.js"],"names":["TranslationHelper","IndexHandlers","v","toFixed","Math","floor","stringformat","fmt","args","Array","prototype","slice","call","arguments","replace","match","number","GetTranslationLinesForMod","translationJson","mod","values","consumedIdxs","Set","translationLines","statIdx","has","statObj","statId","translationIdx","add","translation","translationStatIdx","findIndex","x","translationLine","numStatsInTranslation","length","fill","addlStatIdx","addlStat","addlStatId","addlStatTranslationIdx","push","GetTranslationRuleForLine","line","translationRule","conditionsFailed","condition","value","ApplyIndexHandlers","indexHandlers","handler","this","GetStringForTranslationRule","rule","stringReplacementForValues","replacementStrings","replacementMin","replacementMax","replacementValue","replacementCombined","GetStringsForTranslationLines","strings","lineIdx","concat","split","TranslateMod","TranslateModForGroup","RarePrefixes","RareSuffixes","GenerateRareName","itemData","rng","prefixIdx","suffixPool","includes","ModLookupTables","domainTable","groupedModTable","statLineIndices","tags","modId","domain","group","type","addToDomainTable","addToGroupedModTable","addStatLineIndices","addTags","statIndices","key","getGroupedTableKey","join","modData","getStatLineIndices","ParseModGroups","mods","stats","mod_types","modLookupTables","statKeyToIndex","idx","statKey","stat","id","modTags","randRange","minInclusive","maxInclusive","quick","PropertyLine","props","replacementIdx","replacementSpans","map","className","lineSplit","output","i","TipLine","ModLine","additionalClassName","ItemNameLine","topLine","bottomLine","ItemHeader","double","generatedName","itemTypeName","leftSymbolClass","influences","rightSymbolClass","CraftedItem","base_items","itemState","baseItemId","modInstance","generationType","context","toUpperCase","tierCount","tier","tierCountAtItemLevel","stat_translations","getStatLines","getTipLine","showMods","enchantments","sortMods","SortMods","getEnchantmentLine","baseImplicits","gildedImplicits","getImplicitLine","affixes","getAffixLine","groups","separatedGroups","separatoridx","rarity","getItemTypeName","level","getGroupsWithSeparators","getEnchantmentBoxes","getImplicitBoxes","getAffixBoxes","React","Component","ModListGroupLine","nextProps","nextState","collapsed","modWeight","prob","spanIdx","nameLineElements","nameLines","splice","onClick","onGroupClicked","weight","ModListModLine","modTier","tierString","ModGroup","modAndWeightGroup","modName","modTierInfo","GetTierForMod","lineClass","totalWeight","toLocaleString","undefined","style","minimumFractionDigits","groupWeight","reduce","total","groupName","elementList","groupKey","renderModsInModGroup","ModList","modGroups","modsAndWeights","fossilTypes","weightParameters","GetWeightParametersForFossils","GetValidModsAndWeightsForItem","ignoreAffixLimits","ignoreExistingGroups","sort","a","b","ModIdComparer","forcedModLists","forcedModList","forcedModsAndWeights","forcedModIds","modIds","forcedTotalWeight","fossils","fossilId","rarityOverride","currentGroupIdx","currentGroupTableKey","modIdx","groupedTableKey","getGroupedTableKeyForMod","collapsedGroups","CanBaseItemHaveRarity","GetSpawnWeightForMod","spawnWeight","GetPrefixCount","existingAffixCount","GetSuffixCount","GetAffixCount","GetPrefixLimitForRarity","baseItem","GetSuffixLimitForRarity","GetAffixLimitForRarity","GetAffixLimit","extendedParameters","validMods","GetBaseItemTags","affix","GetAddedTags","GetItemTags","ignoreAffixTypes","forceAffixTypes","requiredPositiveWeightTag","negativeWeightMultipliers","positiveWeightMultipliers","ignoreSpawnWeight","ignoreRequiredLevel","addedMods","hasPrefixSlots","hasSuffixSlots","getDomainTable","existingModGroups","existingMod","find","modGroup","getTags","modTag","totalPositiveWeightMultiplier","GetInfluenceTag","influence","baseItemClass","item_classes","influenceTagId","influenceTag","implicit","RollModValues","rollsLucky","statRolls","rollOne","rollTwo","max","modCount","modCountAtItemLevel","modLevel","baseItemTags","otherModIds","getGroupedTable","otherModId","otherMod","CreateRolledMod","tierValues","RollRareName","RareItemNames","RollRareAffixCount","maxAffixCount","cloneMods","modArray","newArray","oldModIdx","cloneItemState","corruptions","CreateItem","corrupted","quality","implicitId","PickRandomModFromListAndWeights","modPool","randRoll","weightAccum","modEndWeight","PickModFromWeightedModPool","modAndWeight","CreateWeightedModPool","AddRandomModFromListAndWeights","newItemState","AddRandomMod","generationTypeOrder","modA","modB","modAGenerationType","modBGenerationType","aStatIndices","bStatIndices","aNumStats","bNumStats","modARequiredLevel","modBRequiredLevel","modList","sortedList","ModComparer","CanAddInfluenceToItem","AddInfluenceToItem","newState","CanScourItem","ScourItem","CanTransmutationItem","TransmutationItem","numMods","CanAlterationItem","AlterationItem","CanAugmentationItem","AugmentationItem","result","CanRegalItem","RegalItem","CanAlchemyItem","AlchemyItem","CanChaosItem","ChaosItem","CanExaltedItem","ExaltedItem","CanExaltedWithInfluenceItem","ExaltedWithInfluenceItem","CanAnnulmentItem","AnnulmentItem","numAffixes","affixIdxToRemove","CanBlessedItem","BlessedItem","CanDivineItem","DivineItem","CanFossilItem","fossil","hasAllowedTag","allowedTag","forbiddenTag","gildedFossilMods","negativeTagMultipliers","positiveTagMultipliers","corruptedEssenceChances","addsEnchant","negativeWeightMod","tag","weightMultiplier","positiveWeightMod","FossilItem","gildedImplicitModsAndWeights","gildedModId","gildedMod","enchantmentModsAndWeights","enchantmentModId","enchantmentMod","corruptedEssenceChance","essenceModIds","itemClass","essenceId","essences","essence","essenceModsAndWeights","essenceModIdx","essenceModId","CraftingButton","disabled","enabled","label","TheoryCrafterContext","modDatabase","ModGroups","TheoryCrafter","testMap","actionMap","theoryCrafterContext","_mods","seedrandom","normalItemState","state","initState","initItemState","itemStateHistory","action","itemStateHistoryIdx","lastCommand","selectedBaseId","selectedBaseLevel","selectedFossils","actionName","canUndoState","setState","canRerollAction","previousItemState","canPerformAction","performAction","canRedoState","index","newStateHistory","insertAndCutStateAt","splitAndTestAction","splitAction","splitLocationOverride","splitAndExecuteAction","insertAndCutState","e","target","baseItems","lastIndexOf","onChange","handleSelectedBaseChanged","Object","keys","k","handleSelectedBaseLevelChanged","handleBaseSelectButtonClicked","getState","checked","handleFossilSelectorClicked","isCollapsed","newSet","delete","RenderBaseSelectList","RenderBaseSelectLevel","RenderBaseSelectButton","RenderCraftingButton","RenderFossilSelector","undoState","getUndoLabel","redoState","getRedoLabel","rerollAction","getRerollLabel","handleSortModsToggled","color","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42f26458.chunk.js","sourcesContent":["export default class TranslationHelper {\r\n    static IndexHandlers = {\r\n        \"30%_of_value\": v => { return v * 0.3 },\r\n        \"60%_of_value\": v => { return v * 0.6 },\r\n        \"deciseconds_to_seconds\": v => { return v / 10 },\r\n        \"divide_by_one_hundred\": v => { return v / 100 },\r\n        \"divide_by_one_hundred_and_negate\": v => { return -v / 100 },\r\n        \"divide_by_one_hundred_2dp\": v => { return (v / 100).toFixed(2) },\r\n        \"milliseconds_to_seconds\": v => { return v / 1000 },\r\n        \"milliseconds_to_seconds_0dp\": v => { return (v / 1000).toFixed(0) },\r\n        \"milliseconds_to_seconds_1dp\": v => { return (v / 1000).toFixed(1) },\r\n        \"milliseconds_to_seconds_2dp\": v => { return (v / 1000).toFixed(2) },\r\n        \"milliseconds_to_seconds_2dp_if_required\": v => { return (v / 1000).toFixed(2) },\r\n        \"multiplicative_damage_modifier\": v => { return v + 100 },\r\n        \"multiplicative_permyriad_damage_modifier\": v => { return v / 100 + 100 },\r\n        \"negate\": v => { return -v },\r\n        \"old_leech_percent\": v => { return v / 5 },\r\n        \"old_leech_permyriad\": v => { return v / 500 },\r\n        \"per_minute_to_per_second\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_0dp\": v => { return (v / 60).toFixed(0) },\r\n        \"per_minute_to_per_second_1dp\": v => { return (v / 60).toFixed(1) },\r\n        \"per_minute_to_per_second_2dp\": v => { return (v / 60).toFixed(2) },\r\n        \"per_minute_to_per_second_2dp_if_required\": v => { return (v / 60).toFixed(2) },\r\n        \"divide_by_two_0dp\": v => { return Math.floor(v / 2) },\r\n        \"divide_by_six\": v => { return v / 6 },\r\n        \"divide_by_ten_0dp\": v => { return Math.floor(v / 10) },\r\n        \"divide_by_twelve\": v => { return v / 12 },\r\n        \"divide_by_fifteen_0dp\": v => { return Math.floor(v / 15) },\r\n        \"divide_by_twenty_then_double_0dp\": v => { return Math.floor(v / 20) * 2 },\r\n        \"times_twenty\": v => { return v * 20 }\r\n    };\r\n\r\n    static stringformat = function(fmt) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        return fmt.replace(/{(\\d+)}/g, (match, number) => {\r\n            return args[0][number];\r\n        });\r\n    }\r\n\r\n    static GetTranslationLinesForMod = function(translationJson, mod, values = null) {\r\n        let consumedIdxs = new Set();\r\n        let translationLines = [];\r\n        for (let statIdx in mod[\"stats\"]) {\r\n            if (consumedIdxs.has(statIdx)) {\r\n                continue;\r\n            }\r\n            const statObj = mod[\"stats\"][statIdx];\r\n            const statId = statObj[\"id\"];\r\n            consumedIdxs.add(statIdx);\r\n\r\n            for (const translationIdx in translationJson) {\r\n                const translation = translationJson[translationIdx];\r\n                const translationStatIdx = translation[\"ids\"].findIndex((x => x === statId));\r\n                if (translationStatIdx >= 0) {\r\n                    let translationLine = {};\r\n                    translationLine[\"tidx\"] = translationIdx;\r\n                    const numStatsInTranslation = translation[\"ids\"].length;\r\n                    translationLine[\"mins\"] = Array(numStatsInTranslation).fill(0);\r\n                    translationLine[\"maxs\"] = Array(numStatsInTranslation).fill(0);\r\n                    if (values)\r\n                        translationLine[\"values\"] = Array(numStatsInTranslation).fill(0);\r\n\r\n                    translationLine[\"mins\"][translationStatIdx] = statObj[\"min\"];\r\n                    translationLine[\"maxs\"][translationStatIdx] = statObj[\"max\"];\r\n                    if (values)                    \r\n                        translationLine[\"values\"][translationStatIdx] = values[statIdx];\r\n\r\n                    for (let addlStatIdx in mod[\"stats\"]) {\r\n                        const addlStat = mod[\"stats\"][addlStatIdx];\r\n                        const addlStatId = addlStat[\"id\"];\r\n                        if (consumedIdxs.has(addlStatIdx)) {\r\n                            continue;\r\n                        }\r\n                        const addlStatTranslationIdx = translation[\"ids\"].findIndex((x => x === addlStatId));\r\n                        if (addlStatTranslationIdx > 0) {\r\n                            translationLine[\"mins\"][addlStatTranslationIdx] = addlStat[\"min\"];\r\n                            translationLine[\"maxs\"][addlStatTranslationIdx] = addlStat[\"max\"];\r\n                            if (values)                            \r\n                                translationLine[\"values\"][addlStatTranslationIdx] = values[addlStatIdx];\r\n\r\n                            consumedIdxs.add(addlStatIdx);\r\n                        }\r\n                    }\r\n                    translationLines.push(translationLine);\r\n                }\r\n            }\r\n        }\r\n        return translationLines;\r\n    }\r\n\r\n    static GetTranslationRuleForLine = function(translationJson, line) {\r\n        const translation = translationJson[line[\"tidx\"]][\"English\"];\r\n        for (const translationRule of translation) {\r\n            let conditionsFailed = false;\r\n            for (const statIdx in line[\"mins\"]) {\r\n                let condition = translationRule[\"condition\"][statIdx];\r\n                const value = line[\"mins\"][statIdx];\r\n                if (\"min\" in condition) {\r\n                    if (value < condition[\"min\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (\"max\" in condition) {\r\n                    if (value > condition[\"max\"]) {\r\n                        conditionsFailed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!conditionsFailed) {\r\n                return translationRule;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static ApplyIndexHandlers = function(indexHandlers, value) {\r\n        for (const handler of indexHandlers) {\r\n            if (handler in this.IndexHandlers) {\r\n                value = this.IndexHandlers[handler](value)\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    static GetStringForTranslationRule = function(translationJson, rule, line, stringReplacementForValues = null) {\r\n        const translation = translationJson[line[\"tidx\"]];\r\n        let replacementStrings = Array(translation[\"ids\"].length);\r\n        for (const statIdx in translation[\"ids\"]) {\r\n            let replacementMin = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"mins\"][statIdx]);\r\n            let replacementMax = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"maxs\"][statIdx]);\r\n            let replacementValue = null;\r\n            if (\"values\" in line) {\r\n                replacementValue = this.ApplyIndexHandlers(rule[\"index_handlers\"][statIdx], line[\"values\"][statIdx]);\r\n            }\r\n\r\n            let replacementCombined = \"\";\r\n            if (replacementMin === replacementMax) {\r\n                if (stringReplacementForValues) {\r\n                    replacementCombined = stringReplacementForValues;\r\n                }\r\n                else {\r\n                    replacementCombined = replacementMin;\r\n                }\r\n            }\r\n            else {\r\n                if (stringReplacementForValues) {\r\n                    replacementMin = stringReplacementForValues;\r\n                    replacementMax = stringReplacementForValues;\r\n                    if (replacementValue) {\r\n                        replacementValue = stringReplacementForValues;\r\n                    }\r\n                }\r\n\r\n                replacementCombined = \"(\" + replacementMin + \"-\" + replacementMax + \")\";\r\n                if (replacementValue) {\r\n                    replacementCombined = replacementValue + replacementCombined;\r\n                }\r\n            }\r\n            replacementStrings[statIdx] = rule[\"format\"][statIdx].replace(\"#\", replacementCombined);\r\n        }\r\n        return this.stringformat(rule[\"string\"], replacementStrings);\r\n    }\r\n\r\n    static GetStringsForTranslationLines = function(translationJson, translationLines, stringReplacementForValues = null) {\r\n        let strings = [];\r\n        for (const lineIdx in translationLines) {\r\n            const translationRule = this.GetTranslationRuleForLine(translationJson, translationLines[lineIdx]);\r\n            if (translationRule) {\r\n                strings = strings.concat(this.GetStringForTranslationRule(translationJson, translationRule, translationLines[lineIdx], stringReplacementForValues).split(\"\\n\"));\r\n            }\r\n        }\r\n        return strings;\r\n    }\r\n\r\n    static TranslateMod = function(translationJson, mod, values = null) {\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, values);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines);\r\n    }\r\n\r\n    static TranslateModForGroup = function(translationJson, mod) {\r\n        const translationLines = this.GetTranslationLinesForMod(translationJson, mod, null);\r\n        return this.GetStringsForTranslationLines(translationJson, translationLines, \"x\");\r\n    }    \r\n}","const RarePrefixes = [\r\n    \"Agony\", \"Apocalypse\", \"Armageddon\", \"Beast\", \"Behemoth\", \"Blight\", \"Blood\", \"Bramble\", \"Brimstone\", \"Brood\", \"Carrion\", \"Cataclysm\", \"Chimeric\", \"Corpse\", \"Corruption\", \"Damnation\", \"Death\", \"Demon\", \"Dire\", \"Dragon\", \"Dread\", \"Doom\", \"Dusk\", \"Eagle\", \"Empyrean\", \"Fate\", \"Foe\", \"Gale\", \"Ghoul\", \"Gloom\", \"Glyph\", \"Golem\", \"Grim\", \"Hate\", \"Havoc\", \"Honour\", \"Horror\", \"Hypnotic\", \"Kraken\", \"Loath\", \"Maelstrom\", \"Mind\", \"Miracle\", \"Morbid\", \"Oblivion\", \"Onslaught\", \"Pain\", \"Pandemonium\", \"Phoenix\", \"Plague\", \"Rage\", \"Rapture\", \"Rune\", \"Skull\", \"Sol\", \"Soul\", \"Sorrow\", \"Spirit\", \"Storm\", \"Tempest\", \"Torment\", \"Vengeance\", \"Victory\", \"Viper\", \"Vortex\", \"Woe\", \"Wrath\"\r\n];\r\n\r\nconst RareSuffixes = {\r\n    \"One Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"Two Hand Axe\" : [\"Bane\", \"Bite\", \"Edge\", \"Hunger\", \"Roar\", \"Song\", \"Thirst\", \"Beak\", \"Butcher\", \"Etcher\", \"Gnash\", \"Mangler\", \"Rend\", \"Sever\", \"Slayer\", \"Spawn\", \"Splitter\", \"Sunder\" ],\r\n    \"One Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Two Hand Mace\" : [\"Bane\", \"Batter\", \"Blast\", \"Blow\", \"Blunt\", \"Brand\", \"Breaker\", \"Burst\", \"Crack\", \"Crusher\", \"Grinder\", \"Knell\", \"Mangler\", \"Ram\", \"Roar\", \"Ruin\", \"Shatter\", \"Smasher\", \"Star\", \"Thresher\", \"Wreck\" ],\r\n    \"Sceptre\" : [\"Bane\", \"Blow\", \"Breaker\", \"Call\", \"Chant\", \"Crack\", \"Crusher\", \"Cry\", \"Gnarl\", \"Grinder\", \"Knell\", \"Ram\", \"Roar\", \"Smasher\", \"Song\", \"Spell\", \"Star\", \"Weaver\" ],\r\n    \"Staff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"FishingRod\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"Warstaff\" : [\"Bane\", \"Beam\", \"Branch\", \"Call\", \"Chant\", \"Cry\", \"Gnarl\", \"Goad\", \"Mast\", \"Pile\", \"Pillar\", \"Pole\", \"Post\", \"Roar\", \"Song\", \"Spell\", \"Spire\", \"Weaver\" ],\r\n    \"One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Thrusting One Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\",\"Stinger\", \"Thirst\" ],\r\n    \"Two Hand Sword\" : [\"Bane\", \"Barb\", \"Beak\", \"Bite\", \"Edge\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Saw\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Spiker\", \"Stinger\", \"Thirst\" ],\r\n    \"Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Rune Dagger\" : [\"Bane\", \"Barb\", \"Bite\", \"Edge\", \"Etcher\", \"Fang\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Scalpel\", \"Scratch\", \"Sever\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Thirst\" ],\r\n    \"Claw\" : [\"Bane\", \"Bite\", \"Edge\", \"Fang\", \"Fist\", \"Gutter\", \"Hunger\", \"Impaler\", \"Needle\", \"Razor\", \"Roar\", \"Scratch\", \"Skewer\", \"Slicer\", \"Song\", \"Spike\", \"Stinger\", \"Talons\", \"Thirst\" ],\r\n    \"Bow\" : [\"Arch\", \"Bane\", \"Barrage\", \"Blast\", \"Branch\", \"Breeze\", \"Fletch\", \"Guide\", \"Horn\", \"Mark\", \"Nock\", \"Rain\", \"Reach\", \"Siege\", \"Song\", \"Stinger\", \"Strike\", \"Thirst\", \"Thunder\", \"Twine\", \"Volley\", \"Wind\", \"Wing\" ],\r\n    \"Wand\" : [\"Bane\", \"Barb\", \"Bite\", \"Branch\", \"Call\", \"Chant\", \"Charm\", \"Cry\", \"Edge\", \"Gnarl\", \"Goad\", \"Needle\", \"Scratch\", \"Song\", \"Spell\", \"Spire\", \"Thirst\", \"Weaver\" ],\r\n\r\n    // Armor\r\n    \"Body Armour\" : [\"Carapace\", \"Cloak\", \"Coat\", \"Curtain\", \"Guardian\", \"Hide\", \"Jack\", \"Keep\", \"Mantle\", \"Pelt\", \"Salvation\", \"Sanctuary\", \"Shell\", \"Shelter\", \"Shroud\", \"Skin\", \"Suit\", \"Veil\", \"Ward\", \"Wrap\" ],\r\n    \"Helmet\" : [\"Brow\", \"Corona\", \"Cowl\", \"Crest\", \"Crown\", \"Dome\", \"Glance\", \"Guardian\", \"Halo\", \"Horn\", \"Keep\", \"Peak\", \"Salvation\", \"Shelter\", \"Star\", \"Veil\", \"Visage\", \"Visor\", \"Ward\" ],\r\n    \"Gloves\" : [\"Caress\", \"Claw\", \"Clutches\", \"Fingers\", \"Fist\", \"Grasp\", \"Grip\", \"Hand\", \"Hold\", \"Knuckle\", \"Mitts\", \"Nails\", \"Palm\", \"Paw\", \"Talons\", \"Touch\", \"Vise\" ],\r\n    \"Boots\" : [\"Dash\", \"Goad\", \"Hoof\", \"League\", \"March\", \"Pace\", \"Road\", \"Slippers\", \"Sole\", \"Span\", \"Spark\", \"Spur\", \"Stride\", \"Track\", \"Trail\", \"Tread\", \"Urge\" ],\r\n    // These share the 'Shield' item class, have to search for the 'focus' tag on the item\r\n    \"_Spirit Shield\" : [\"Ancient\", \"Anthem\", \"Call\", \"Chant\", \"Charm\", \"Emblem\", \"Guard\", \"Mark\", \"Pith\", \"Sanctuary\", \"Song\", \"Spell\", \"Star\", \"Ward\", \"Weaver\", \"Wish\" ],\r\n    \"_Other Shield\" : [\"Aegis\", \"Badge\", \"Barrier\", \"Bastion\", \"Bulwark\", \"Duty\", \"Emblem\", \"Fend\", \"Guard\", \"Mark\", \"Refuge\", \"Rock\", \"Rook\", \"Sanctuary\", \"Span\", \"Tower\", \"Watch\", \"Wing\" ],\r\n\r\n    // Accessories\r\n    \"Amulet\" : [\"Beads\", \"Braid\", \"Charm\", \"Choker\", \"Clasp\", \"Collar\", \"Idol\", \"Gorget\", \"Heart\", \"Locket\", \"Medallion\", \"Noose\", \"Pendant\", \"Rosary\", \"Scarab\", \"Talisman\", \"Torc\" ],\r\n    \"Ring\" : [\"Band\", \"Circle\", \"Coil\", \"Eye\", \"Finger\", \"Grasp\", \"Grip\", \"Gyre\", \"Hold\", \"Knot\", \"Knuckle\", \"Loop\", \"Nail\", \"Spiral\", \"Turn\", \"Twirl\", \"Whorl\" ],\r\n    \"Belt\" : [\"Bind\", \"Bond\", \"Buckle\", \"Clasp\", \"Cord\", \"Girdle\", \"Harness\", \"Lash\", \"Leash\", \"Lock\", \"Locket\", \"Shackle\", \"Snare\", \"Strap\", \"Tether\", \"Thread\", \"Trap\", \"Twine\" ],\r\n    \"Quiver\" : [\"Arrow\", \"Barb\", \"Bite\", \"Bolt\", \"Brand\", \"Dart\", \"Flight\", \"Hail\", \"Impaler\", \"Nails\", \"Needle\", \"Quill\", \"Rod\", \"Shot\", \"Skewer\", \"Spear\", \"Spike\", \"Spire\", \"Stinger\" ],\r\n\r\n    // No source for this! Just pulling some random names off poe.trade\r\n    \"Jewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n    \"AbyssJewel\" : [\"Bliss\", \"Bloom\", \"Creed\", \"Cut\", \"Delirium\", \"Dream\", \"Edge\", \"Essence\", \"Eye\", \"Fist\", \"Glisten\", \"Gnash\", \"Heart\", \"Horn\", \"Hunger\", \"Ichor\", \"Impaler\", \"Joy\", \"Needle\", \"Nock\", \"Ornament\", \"Pause\", \"Prism\", \"Roar\", \"Ruin\", \"Scratch\", \"Shard\", \"Shine\", \"Sliver\", \"Solace\", \"Spiker\", \"Splinter\", \"Stone\", \"Thunder\", \"Wound\" ],\r\n};\r\n\r\nexport function GenerateRareName(itemData, rng) {\r\n    const prefixIdx = Math.floor(rng() * RarePrefixes.length);\r\n    const prefix = RarePrefixes[prefixIdx];\r\n    let suffixPool = [];\r\n    if (itemData[\"item_class\"] === \"Shield\") {\r\n        if (itemData[\"tags\"].includes(\"focus\")) {\r\n            suffixPool = RareSuffixes[\"_Spirit Shield\"];\r\n        }\r\n        else {\r\n            suffixPool = RareSuffixes[\"_Other Shield\"];\r\n        }\r\n    }\r\n    else {\r\n        suffixPool = RareSuffixes[itemData[\"item_class\"]];\r\n    }\r\n    const suffixIdx = Math.floor(rng() * suffixPool.length);\r\n    const suffix = suffixPool[suffixIdx];\r\n    return prefix + \" \" + suffix;\r\n}\r\n\r\nexport default { GenerateRareName };","// export class ModGroupTree {\r\n//     constructor() {\r\n//         this.domains = {};\r\n//     }\r\n\r\n//     add(modId, domain, group, type, positiveWeightTags, zeroWeightTags) {\r\n//         // { domains : { <domain_str> : <groupset> } }\r\n//         // <groupset> = { <group_str> : <typeset> }\r\n//         // <typeset>  = { <type_str> : { positiveTags : <tagset>, zeroTags : <tagset> } }\r\n//         // <tagset>   = { <tag_str> : [ <modId> ... ] }\r\n//         if (!(domain in this.domains)) {\r\n//             this.domains[domain] = {};\r\n//         }\r\n//         let groupSet = this.domains[domain];\r\n//         if (!(group in groupSet)) {\r\n//             groupSet[group] = {};\r\n//         }\r\n//         let typeSet = groupSet[group];\r\n//         if (!(type in typeSet)) {\r\n//             typeSet[type] = { positiveTags : {}, zeroTags: {} };\r\n//         }\r\n//         let positiveTagSet = typeSet[type].positiveTags;\r\n//         let zeroTagSet = typeSet[type].zeroTags;\r\n//         for (let tag of positiveWeightTags) {\r\n//             if (!(tag in positiveTagSet)) {\r\n//                 positiveTagSet[tag] = [];\r\n//             }\r\n//             positiveTagSet[tag].push(modId);\r\n//         }\r\n//         for (let tag of zeroWeightTags) {\r\n//             if (!(tag in zeroTagSet)) {\r\n//                 zeroTagSet[tag] = [];\r\n//             }\r\n//             zeroTagSet[tag].push(modId);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export class ModGroupSet {\r\n//     constructor() { \r\n//         this.groupSets = {};\r\n//     }\r\n\r\n//     add(modId, domain, group, type) {\r\n//         const key = domain + \"|\" + group + \"|\" + type;\r\n//         if (!(key in this.groupSets)) {\r\n//             this.groupSets[key] = [ modId ];\r\n//         }\r\n//         else {\r\n//             this.groupSets[key].push(modId);\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport class ModLookupTables {\r\n    constructor() {\r\n        this.domainTable = {};\r\n        this.groupedModTable = {};\r\n        this.statLineIndices = {};\r\n        this.tags = {};\r\n    }\r\n\r\n    add(modId, domain, group, type, statLineIndices, tags) {\r\n        this.addToDomainTable(modId, domain);\r\n        this.addToGroupedModTable(modId, domain, group, type, statLineIndices);\r\n        this.addStatLineIndices(modId, statLineIndices);\r\n        this.addTags(modId, tags);\r\n    }\r\n\r\n    addStatLineIndices(modId, statLineIndices)\r\n    {\r\n        this.statLineIndices[modId] = statLineIndices;\r\n    }\r\n\r\n    addTags(modId, tags) \r\n    {\r\n        this.tags[modId] = tags;\r\n    }\r\n\r\n    addToDomainTable(modId, domain) {\r\n        if (!(domain in this.domainTable)) {\r\n            this.domainTable[domain] = [modId];\r\n        }\r\n        else {\r\n            this.domainTable[domain].push(modId);\r\n        }\r\n    }\r\n\r\n    addToGroupedModTable(modId, domain, group, type, statIndices) {\r\n        const key = this.getGroupedTableKey(domain, group, type, statIndices);\r\n        if (!(key in this.groupedModTable)) {\r\n            this.groupedModTable[key] = [ modId ];\r\n        }\r\n        else {\r\n            this.groupedModTable[key].push(modId);\r\n        }\r\n    }\r\n\r\n    getDomainTable(domain) {\r\n        return this.domainTable[domain];\r\n    }\r\n\r\n    getGroupedTable(domain, group, type, statIndices) {\r\n        return this.groupedModTable[this.getGroupedTableKey(domain, group, type, statIndices)];\r\n    }\r\n\r\n    getGroupedTableKey(domain, group, type, statIndices) {\r\n        return domain + \"|\" + group + \"|\" + type + \"|\" + statIndices.join(\"|\");\r\n    }\r\n\r\n    getGroupedTableKeyForMod(modId, modData) {\r\n        return this.getGroupedTableKey(modData[\"domain\"], modData[\"group\"], modData[\"type\"], this.getStatLineIndices(modId));\r\n    }\r\n\r\n    getStatLineIndices(modId) {\r\n        return this.statLineIndices[modId];\r\n    }\r\n\r\n    getTags(modId) {\r\n        return this.tags[modId];\r\n    }\r\n}\r\n\r\n// export class ModGroup {\r\n//     constructor(domain, group, type, positiveWeightTags, zeroWeightTags) {\r\n//         this.domain = domain;\r\n//         this.group = group;\r\n//         this.type = type;\r\n//         this.positiveWeightTags = new Set(positiveWeightTags);\r\n//         this.zeroWeightTags = new Set(zeroWeightTags);\r\n\r\n//         this.modIds = [];\r\n//     }\r\n\r\n//     equivalent(other) {\r\n//         return (other.domain == this.domain\r\n//             && other.group == this.group\r\n//             && other.type == this.type\r\n//             && this.setsCompatible(other.positiveWeightTags, this.positiveWeightTags)\r\n//             && this.setsCompatible(other.zeroWeightTags, this.zeroWeightTags)\r\n//         );\r\n//     }\r\n\r\n//     setsCompatible(a, b) {\r\n//         /*\r\n//         if (a.size !== b.size) {\r\n//             return false;\r\n//         }\r\n//         */\r\n//         for (const _a of a) {\r\n//             if (!b.has(_a)) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         for (const _b of b) {\r\n//             if (!a.has(_b)) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         return true;\r\n//     }\r\n// }\r\n\r\nexport function ParseModGroups(mods, stats, mod_types) {\r\n    let modLookupTables = new ModLookupTables();\r\n\r\n    let statKeyToIndex = {};\r\n    let idx = 0;\r\n    for (let statKey in stats) {\r\n        statKeyToIndex[statKey] = idx;\r\n        idx++;\r\n    }\r\n\r\n    for (const modId in mods) {\r\n        const mod = mods[modId];\r\n        let statIndices = [];\r\n        for (const stat of mod[\"stats\"]) {\r\n            statIndices.push(statKeyToIndex[stat.id]);\r\n        }\r\n        let modTags = [ ...mod_types[mod[\"type\"]][\"tags\"] ];\r\n        modLookupTables.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"], statIndices, modTags);\r\n\r\n        // // Filter mods from unaccepted domains\r\n        // if (!validModDomains.has(mod[\"domain\"])) {\r\n        //     continue;\r\n        // }\r\n\r\n        // if (!validModGenerationTypes.has(mod[\"generation_type\"])) {\r\n        //     continue;\r\n        // }\r\n        \r\n        // let positiveWeightTags = [];\r\n        // let zeroWeightTags = [];\r\n        // for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n        //     if (spawnWeight[\"weight\"] > 0) {\r\n        //         positiveWeightTags.push(spawnWeight[\"tag\"]);\r\n        //     }\r\n        //     else {\r\n        //         zeroWeightTags.push(spawnWeight[\"tag\"]);\r\n        //     }\r\n        // }\r\n\r\n        // // Filter un-rollable mods\r\n        // if (positiveWeightTags.length == 0) {\r\n        //     continue;\r\n        // }\r\n\r\n        // modGroupTree.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"], positiveWeightTags, zeroWeightTags);\r\n        // modGroupSet.add(modId, mod[\"domain\"], mod[\"group\"], mod[\"type\"]);\r\n\r\n        // let candidateModGroup = new ModGroup(mod[\"domain\"], mod[\"group\"], mod[\"type\"], positiveWeightTags, zeroWeightTags);\r\n        // let existingModGroup = null;\r\n        // for (let testExistingModGroup of modGroups) {\r\n        //     if (testExistingModGroup.equivalent(candidateModGroup)) {\r\n        //         existingModGroup = testExistingModGroup;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // if (existingModGroup === null) {\r\n        //     candidateModGroup.modIds.push(modId);\r\n        //     modGroups.push(candidateModGroup);\r\n        // }\r\n        // else {\r\n        //     existingModGroup.modIds.push(modId);\r\n        // }\r\n    }\r\n\r\n    // for (const modGroup of modGroups) {\r\n    //     console.log(\"{\" + modGroup.domain + \" \" + modGroup.group + \" \" + modGroup.type + \" +\" + modGroup.positiveWeightTags + \" -\" + modGroup.zeroWeightTags + \"} : \" + modGroup.modIds.length);\r\n    //     for (const modId of modGroup.modIds) {\r\n    //         console.log(\" - \" + modId);\r\n    //     }\r\n    // }\r\n    return modLookupTables;\r\n}\r\n\r\nexport default { ParseModGroups };","import React from 'react';\r\nimport './App.css';\r\nimport TranslationHelper from './Translation.js';\r\nimport seedrandom from 'seedrandom';\r\nimport RareItemNames from './RareItemnames.js';\r\nimport ModGroups from './ModGroups.js';\r\n\r\nimport base_items from './data/base_items.json';\r\nimport item_classes from './data/item_classes.json';\r\nimport fossils from './data/fossils.json';\r\nimport _mods from './data/mods.json';\r\nimport mod_types from './data/mod_types.json';\r\nimport stat_translations from './data/stat_translations.json';\r\nimport stats from './data/stats.json'\r\nimport essences from './data/essences.json'\r\n\r\nfunction randRange(rng, minInclusive, maxInclusive) {\r\n  return Math.floor(rng.quick() * (maxInclusive - minInclusive + 1)) + minInclusive;\r\n}\r\n\r\nfunction PropertyLine (props) {\r\n  let replacementIdx = 0;\r\n  let replacementSpans = props.values.map((x) => <span className=\"property\" key={replacementIdx++}>{x}</span>);\r\n  const lineSplit = props.line.split(/{}/g);\r\n  let output = [];\r\n  for (let i = 0; i < lineSplit.length - 1; ++i) {\r\n    output.push(lineSplit[i]);\r\n    output.push(replacementSpans[i]);\r\n  }\r\n  output.push(lineSplit[lineSplit.length - 1]);\r\n  return <div className=\"propertyLine\">{output}</div>;\r\n}\r\n\r\nfunction TipLine (props) {\r\n  return <div className=\"tipLine\">{props.line}</div>\r\n}\r\n\r\nfunction ModLine (props) {\r\n  let className = \"modLine\";\r\n  if (props.additionalClassName) {\r\n    className = className + \" \" + props.additionalClassName;\r\n  }\r\n  return <div className={className}>{props.line}</div>\r\n}\r\n\r\nfunction ItemNameLine (props) {\r\n  return [props.topLine && <div className=\"itemName\" key=\"itemName_top\">{props.topLine}</div>, props.bottomLine && <div className=\"itemName\" key=\"itemName_bottom\">{props.bottomLine}</div>];\r\n}\r\n\r\nfunction ItemHeader (props) {\r\n  const double = props.generatedName.length > 0 && props.itemTypeName.length > 0;\r\n  const leftSymbolClass = props.influences.length > 0 ? props.influences[0] : \"\";\r\n  const rightSymbolClass = props.influences.length > 1 ? props.influences[1] : leftSymbolClass;\r\n  return  <div className={\"header-border \" + (double ? \"double\" : \"single\")}>\r\n            <span className={\"l symbol \" + leftSymbolClass}></span>\r\n            <ItemNameLine topLine={props.generatedName} bottomLine={props.itemTypeName} key=\"nameLine\"/>\r\n            <span className={\"r symbol \" + rightSymbolClass}></span>\r\n          </div>\r\n  ;\r\n}\r\n\r\nclass CraftedItem extends React.Component {\r\n  getItemTypeName() {\r\n    return base_items[this.props.itemState.baseItemId][\"name\"];\r\n  }\r\n\r\n  getTipLine(modInstance, generationType) {\r\n    const mod = this.props.context.mods[modInstance.id];\r\n    let line = \"\";\r\n    if (generationType === \"prefix\" || generationType === \"suffix\") {\r\n      line = generationType[0].toUpperCase() + generationType.slice(1) + \" Modifier \\\"\" + mod[\"name\"] + \"\\\"\" + (modInstance.tierCount > 0 ? (\" (Tier: \" + (modInstance.tier + 1) + \" [\" + (modInstance.tierCount - modInstance.tierCountAtItemLevel + 1) + \"-\" + modInstance.tierCount + \"])\") : \"\");\r\n    }\r\n    else if (generationType === \"unique\" || generationType === \"implicit\") {\r\n      line = generationType[0].toUpperCase() + generationType.slice(1) + \" Modifier\";\r\n    }\r\n    else if (generationType === \"enchantment\") {\r\n      line = \"Labyrinth Enchantment\";\r\n    }\r\n    return <TipLine line={line} key={modInstance.id + \"_tip\"}/>;\r\n  }\r\n\r\n  getStatLines(modInstance, additionalClassName) {\r\n    const mod = this.props.context.mods[modInstance.id];\r\n    const values = modInstance.values;\r\n    const translationStrings = TranslationHelper.TranslateMod(stat_translations, mod, values);    \r\n    return translationStrings.map((x, i) => <ModLine additionalClassName={additionalClassName} line={x} key={modInstance.id + \"_mod_\" + i}/>);\r\n  }\r\n\r\n  getEnchantmentLine(modInstance) {\r\n    const statLines = this.getStatLines(modInstance);\r\n    if (statLines.length > 0) {\r\n      return [this.getTipLine(modInstance, \"enchantment\"), this.getStatLines(modInstance, \"enchantment\")];\r\n    }    \r\n  }\r\n\r\n  getEnchantmentBoxes() {\r\n    let showMods = this.props.itemState.enchantments;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(\r\n      x => <div className=\"modBox enchantment\" key={x.id}>{this.getEnchantmentLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getImplicitLine(modInstance) {\r\n    const statLines = this.getStatLines(modInstance);\r\n    if (statLines.length > 0) {\r\n      return [this.getTipLine(modInstance, \"implicit\"), this.getStatLines(modInstance)];\r\n    }\r\n  }\r\n\r\n  getImplicitBoxes() {\r\n    let showMods = [...this.props.itemState.baseImplicits, ...this.props.itemState.gildedImplicits];\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(\r\n      x => <div className=\"modBox implicit\" key={x.id}>{this.getImplicitLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getAffixLine(modInstance) {\r\n    return [this.getTipLine(modInstance, this.props.context.mods[modInstance.id][\"generation_type\"]), this.getStatLines(modInstance)];\r\n  }\r\n\r\n  getAffixBoxes() {\r\n    let showMods = this.props.itemState.affixes;\r\n    if (this.props.sortMods) {\r\n      showMods = SortMods(showMods, this.props.context);\r\n    }\r\n    return showMods.map(    \r\n      x => <div className=\"modBox\" key={x.id}>{this.getAffixLine(x)}</div>\r\n    );\r\n  }\r\n\r\n  getGroupsWithSeparators(groups) \r\n  {\r\n    let separatedGroups = [];\r\n    let separatoridx = 0;\r\n    for (const group of groups) {\r\n      if (group.length > 0) {\r\n        separatedGroups.push(<div className=\"separator\" key={\"sep_\" + separatoridx} />);\r\n        separatoridx++;\r\n        separatedGroups = separatedGroups.concat(group);\r\n      }\r\n    }\r\n    return separatedGroups;\r\n  }\r\n\r\n  render() {\r\n    return <div className={\"craftedItem \" + this.props.itemState.rarity}>\r\n      <div className=\"content-box\">\r\n        <ItemHeader itemTypeName={this.getItemTypeName()} generatedName={this.props.itemState.generatedName} influences={this.props.itemState.influences} />\r\n        <PropertyLine line=\"Item Level: {}\" values={[this.props.itemState.level]} />\r\n        { this.getGroupsWithSeparators([this.getEnchantmentBoxes(), this.getImplicitBoxes(), this.getAffixBoxes()]) }\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\nclass ModListGroupLine extends React.Component {\r\n  // eslint-disable-next-line no-unused-vars\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.collapsed !== nextProps.collapsed\r\n      || this.props.modWeight !== nextProps.modWeight\r\n      || this.props.prob !== nextProps.prob;\r\n  }  \r\n  render() {\r\n    let spanIdx = 0;\r\n    let nameLineElements = this.props.nameLines.map( (x) => <span key={spanIdx++}>{x}</span>);\r\n    for (let i = 1; i < nameLineElements.length; i += 2) {\r\n      nameLineElements.splice(i, 0, <br key={\"br_\" + i}/>);\r\n    }\r\n    return <div className=\"modGroupLine\" onClick={this.props.onGroupClicked}>\r\n      <div className=\"modTier\" key=\"modTier\">\r\n        { this.props.collapsed ? \"▶\" : \"▼\" }\r\n      </div>\r\n      <div className=\"modName\" key=\"modName\">\r\n        { nameLineElements }\r\n      </div>\r\n      <div className=\"modWeight\" key=\"modWeight\">\r\n        { this.props.weight }\r\n      </div>\r\n      <div className=\"modProb\" key=\"modProb\">\r\n        { this.props.prob }\r\n      </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass ModListModLine extends React.Component {\r\n  // eslint-disable-next-line no-unused-vars\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.modTier !== nextProps.modTier\r\n      || this.props.modWeight !== nextProps.modWeight\r\n      || this.props.prob !== nextProps.prob;\r\n  }  \r\n  render() {\r\n    let spanIdx = 0;\r\n    let nameLineElements = this.props.nameLines.map( (x) => <span key={spanIdx++}>{x}</span>);\r\n    for (let i = 1; i < nameLineElements.length; i += 2) {\r\n      nameLineElements.splice(i, 0, <br key={\"br_\" + i}/>);\r\n    }\r\n    return <div className=\"modLine\">\r\n      <div className=\"modTier\" key=\"modTier\">\r\n        { this.props.tierString }\r\n      </div>\r\n      <div className=\"modName\" key=\"modName\">\r\n        { nameLineElements }\r\n      </div>\r\n      <div className=\"modWeight\" key=\"modWeight\">\r\n        { this.props.weight }\r\n      </div>\r\n      <div className=\"modProb\" key=\"modProb\">\r\n        { this.props.prob }\r\n      </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass ModGroup extends React.Component {\r\n  renderModsInModGroup() {\r\n    return this.props.modAndWeightGroup.map((x) => {\r\n      const modData = this.props.context.mods[x.modId];\r\n      const modWeight = x.weight;\r\n      const modName = TranslationHelper.TranslateMod(stat_translations, modData);\r\n      const modTierInfo = GetTierForMod(this.props.itemState, x.modId, this.props.context);\r\n      return <ModListModLine lineClass=\"modLine\" context={this.props.context} tierString={modData[\"generation_type\"].slice(0, 1) + (modTierInfo[0] + 1)} nameLines={modName} weight={modWeight} prob={(modWeight / this.props.totalWeight).toLocaleString(undefined, {style: 'percent', minimumFractionDigits: 2})} key={x.modId} />\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const groupWeight = this.props.modAndWeightGroup.reduce((total, value) => { return total + value.weight }, 0);\r\n    const groupName = this.props.groupName;\r\n//    const groupName = TranslationHelper.TranslateModForGroup(stat_translations, this.props.context.mods[this.props.modAndWeightGroup[0].modId]);\r\n    const elementList = [<ModListGroupLine collapsed={this.props.collapsed} onGroupClicked={() => this.props.onGroupClicked(this.props.groupKey)} lineClass=\"modGroupLine\" context={this.props.context} nameLines={groupName} weight={groupWeight} prob={(groupWeight / this.props.totalWeight).toLocaleString(undefined, {style: 'percent', minimumFractionDigits: 2})} key={groupName} />];\r\n    if (!this.props.collapsed) {\r\n      elementList.push(...this.renderModsInModGroup(this.props.modAndWeightGroup, this.props.totalWeight));\r\n    }\r\n    return <div className=\"modGroup\" key={this.props.groupKey}>\r\n      {\r\n        elementList\r\n      }\r\n      </div>      \r\n  }\r\n}\r\n\r\nclass ModList extends React.Component {\r\n  render() {\r\n    let modGroups = [];    \r\n    let modsAndWeights = null;\r\n    // TODO: Expand this to handle any mode\r\n    if (this.props.fossilTypes && this.props.fossilTypes.length > 0) {\r\n      const weightParameters = GetWeightParametersForFossils(this.props.fossilTypes);\r\n      modsAndWeights = GetValidModsAndWeightsForItem(this.props.itemState, this.props.context, { ...weightParameters, ignoreAffixLimits : true, ignoreExistingGroups : true }).sort((a, b) => { return ModIdComparer(a.modId, b.modId, this.props.context) });      \r\n      for (const forcedModList of weightParameters.forcedModLists) {\r\n        const forcedModsAndWeights = GetValidModsAndWeightsForItem(this.props.itemState, this.props.context, { ...weightParameters, forcedModIds : forcedModList.modIds, ignoreAffixLimits : true, ignoreExistingGroups : true }).sort((a, b) => { return ModIdComparer(a.modId, b.modId, this.props.context) });\r\n        const forcedTotalWeight = forcedModsAndWeights.reduce( (total, value) => { return total + value.weight }, 0);\r\n        if (forcedModsAndWeights.length > 0) {\r\n          modGroups.push({groupName: [\"From \" + fossils[forcedModList.fossilId][\"name\"]], groupKey: forcedModList.fossilId, totalWeight: forcedTotalWeight, modsAndWeights: forcedModsAndWeights});\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      modsAndWeights = GetValidModsAndWeightsForItem(this.props.itemState, this.props.context, { rarityOverride : \"rare\" }).sort((a, b) => { return ModIdComparer(a.modId, b.modId, this.props.context) });\r\n    }\r\n\r\n    const totalWeight = modsAndWeights.reduce( (total, value) => { return total + value.weight }, 0);\r\n    let currentGroupIdx = modGroups.length - 1;\r\n    let currentGroupTableKey = \"\";\r\n    for (let modIdx = 0; modIdx < modsAndWeights.length; ++modIdx) {\r\n      const modId = modsAndWeights[modIdx].modId;\r\n      const groupedTableKey = this.props.context.modLookupTables.getGroupedTableKeyForMod(modId, this.props.context.mods[modId]);\r\n      if (groupedTableKey !== currentGroupTableKey) {\r\n        currentGroupIdx++;\r\n        currentGroupTableKey = groupedTableKey;\r\n        const groupName = TranslationHelper.TranslateModForGroup(stat_translations, this.props.context.mods[modId]);\r\n        modGroups.push({groupName: groupName, groupKey: groupedTableKey, totalWeight: totalWeight, modsAndWeights: []});\r\n      }\r\n      modGroups[currentGroupIdx].modsAndWeights.push(modsAndWeights[modIdx]);\r\n    }\r\n\r\n    return <div className=\"modList\">\r\n      {\r\n        modGroups.map((modAndWeightGroup) => <ModGroup groupName={modAndWeightGroup.groupName} onGroupClicked={this.props.onGroupClicked} modAndWeightGroup={modAndWeightGroup.modsAndWeights} groupKey={modAndWeightGroup.groupKey} totalWeight={modAndWeightGroup.totalWeight} itemState={this.props.itemState} context={this.props.context} collapsed={this.props.collapsedGroups.has(modAndWeightGroup.groupKey)} key={modAndWeightGroup.groupKey}/>)\r\n      }\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nfunction CanBaseItemHaveRarity(baseItemId, rarity) {\r\n  const baseItem = base_items[baseItemId];\r\n  if (baseItem[\"domain\"] === \"flask\") {\r\n    return rarity !== \"rare\";\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction GetSpawnWeightForMod(modId, tags, context) {\r\n  const mod = context.mods[modId];\r\n  for (const spawnWeight of mod[\"spawn_weights\"]) {\r\n    if (tags.includes(spawnWeight[\"tag\"])) {\r\n      return spawnWeight[\"weight\"];\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetPrefixCount(itemState, context) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = context.mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"prefix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetSuffixCount(itemState, context) {\r\n  let existingAffixCount = 0;\r\n  for (let i = 0; i < itemState.affixes.length; ++i) {\r\n    const affix = context.mods[itemState.affixes[i].id];\r\n    if (affix[\"generation_type\"] === \"suffix\") {\r\n      existingAffixCount++;\r\n    }\r\n  }\r\n  return existingAffixCount;\r\n}\r\n\r\nfunction GetAffixCount(itemState, context) {\r\n  return GetPrefixCount(itemState, context) + GetSuffixCount(itemState, context);\r\n}\r\n\r\nfunction GetPrefixLimitForRarity(baseItemId, rarity) {\r\n  if (rarity === \"normal\") {\r\n    return 0;\r\n  }\r\n  if (rarity === \"magic\") {\r\n    return 1;\r\n  }\r\n  if (rarity === \"rare\" || rarity === \"unique\") {\r\n    const baseItem = base_items[baseItemId];\r\n    if (baseItem[\"domain\"] === \"misc\" || baseItem[\"domain\"] === \"abyss_jewel\") {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction GetSuffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\nfunction GetAffixLimitForRarity(baseItemId, rarity) {\r\n  return GetPrefixLimitForRarity(baseItemId, rarity) + GetSuffixLimitForRarity(baseItemId, rarity);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction GetPrefixLimit(itemState) {\r\n  return GetPrefixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction GetSuffixLimit(itemState) {\r\n  return GetSuffixLimitForRarity(itemState.baseItemId, itemState.rarity);\r\n}\r\n\r\nfunction GetAffixLimit(itemState) {\r\n  return GetAffixLimitForRarity(itemState.baseItemId, itemState.rarity); \r\n}\r\n\r\nfunction GetValidModsAndWeightsForItem(itemState, context, extendedParameters) {\r\n  let validMods = [];\r\n\r\n  const tags = GetItemTags(itemState, context);\r\n\r\n  const rarity = (\"rarityOverride\" in extendedParameters) ? extendedParameters.rarityOverride : itemState.rarity;\r\n  const ignoreAffixLimits = (\"ignoreAffixLimits\" in extendedParameters) ? extendedParameters.ignoreAffixLimits : false;\r\n  const ignoreAffixTypes = (\"ignoreAffixTypes\" in extendedParameters) ? extendedParameters.ignoreAffixTypes : false;\r\n  const forceAffixTypes = (\"forceAffixTypes\" in extendedParameters) ? extendedParameters.forceAffixTypes : null;\r\n  const requiredPositiveWeightTag = (\"requiredPositiveWeightTag\" in extendedParameters) ? extendedParameters.requiredPositiveWeightTag : null;\r\n  const negativeWeightMultipliers = (\"negativeWeightMultipliers\" in extendedParameters) ? extendedParameters.negativeWeightMultipliers : null;\r\n  const positiveWeightMultipliers = (\"positiveWeightMultipliers\" in extendedParameters) ? extendedParameters.positiveWeightMultipliers : null;\r\n  const ignoreExistingGroups = (\"ignoreExistingGroups\" in extendedParameters) ? extendedParameters.ignoreExistingGroups : false;\r\n  const ignoreSpawnWeight = (\"ignoreSpawnWeight\" in extendedParameters) ? extendedParameters.ignoreSpawnWeight : false;\r\n  const ignoreRequiredLevel = (\"ignoreRequiredLevel\" in extendedParameters) ? extendedParameters.ignoreRequiredLevel : false;\r\n  const addedMods = (\"addedMods\" in extendedParameters) ? extendedParameters.addedMods : null;\r\n  const forcedModIds = (\"forcedModIds\" in extendedParameters) ? extendedParameters.forcedModIds : null;\r\n\r\n  const hasPrefixSlots = ignoreAffixLimits || (GetPrefixLimitForRarity(itemState.baseItemId, rarity) > GetPrefixCount(itemState, context));\r\n  const hasSuffixSlots = ignoreAffixLimits || (GetSuffixLimitForRarity(itemState.baseItemId, rarity) > GetSuffixCount(itemState, context));\r\n\r\n  let modIds = [];\r\n  if (forcedModIds) {\r\n    modIds = [...forcedModIds];\r\n  }\r\n  else {\r\n    modIds = context.modLookupTables.getDomainTable(base_items[itemState.baseItemId][\"domain\"]);\r\n    if (addedMods) {\r\n      modIds = [...modIds, ...addedMods];\r\n    }\r\n  }\r\n\r\n  let existingModGroups = new Set();\r\n  if (!ignoreExistingGroups)\r\n  {\r\n    for (const affix of itemState.affixes) {\r\n      const existingMod = context.mods[affix.id];\r\n      existingModGroups.add(existingMod[\"group\"]);\r\n    }\r\n  }\r\n\r\n  for (const modId of modIds) {\r\n    const mod = context.mods[modId];\r\n\r\n    if (requiredPositiveWeightTag) {\r\n      if (!(mod[\"spawn_weights\"].find(x => x[\"tag\"] === requiredPositiveWeightTag && x[\"weight\"] > 0))) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (!ignoreRequiredLevel) {\r\n      if (mod[\"required_level\"] > itemState.level) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (!ignoreAffixTypes) {\r\n      if (forceAffixTypes) {\r\n        if (!forceAffixTypes.includes(mod[\"generation_type\"])) {\r\n          continue;\r\n        }\r\n      }\r\n      else \r\n      {\r\n        if ((mod[\"generation_type\"] === \"prefix\")) {\r\n          if(!hasPrefixSlots) {\r\n            continue;\r\n          }\r\n        }\r\n        else if (mod[\"generation_type\"] === \"suffix\") {\r\n          if (!hasSuffixSlots) {\r\n            continue;\r\n          }\r\n        }\r\n        else {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n \r\n    if (!ignoreExistingGroups) {\r\n      const modGroup = mod[\"group\"];\r\n      if (modGroup && modGroup !== \"\") {\r\n        if (existingModGroups.has(modGroup)) {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    let spawnWeight = GetSpawnWeightForMod(modId, tags, context);\r\n    if (!ignoreSpawnWeight && spawnWeight <= 0) {\r\n      continue;\r\n    }\r\n\r\n    if (negativeWeightMultipliers) {\r\n      const modTags = context.modLookupTables.getTags(modId);\r\n      for (const modTag of modTags) {\r\n        if (modTag in negativeWeightMultipliers) {\r\n          spawnWeight = spawnWeight * negativeWeightMultipliers[modTag];\r\n        }\r\n      }\r\n\r\n      if (!ignoreSpawnWeight && spawnWeight <= 0) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (positiveWeightMultipliers) {\r\n      //   NOTE - It's not clear to me how the game handles multiple applicable positive weight multipliers\r\n      //\r\n      // For example, if you apply both Aberrant (+chaos:10x) and Serrated (+attack:10x) on the AddedChaosSuffix\r\n      // mod (attack, chaos), is the total multiplication 10 * 10 = 100x? Or 10 + 10 = 20x?\r\n      //\r\n      // It's a little more conservative, but I'm going with the additive option here until proven otherwise.\r\n\r\n      const modTags = context.modLookupTables.getTags(modId);\r\n\r\n      // Additive method\r\n      let totalPositiveWeightMultiplier = 0;\r\n      for (const modTag of modTags) {\r\n        if (modTag in positiveWeightMultipliers) {\r\n          totalPositiveWeightMultiplier = totalPositiveWeightMultiplier + positiveWeightMultipliers[modTag];\r\n        }\r\n      }\r\n\r\n      /*\r\n      // Multiplicative method\r\n      let totalPositiveWeightMultiplier = 1;\r\n      for (const modTag of modTags) {\r\n        if (modTag in positiveWeightMultipliers) {\r\n          totalPositiveWeightMultiplier = totalPositiveWeightMultiplier * positiveWeightMultipliers[modTag];\r\n        }\r\n      }\r\n      */\r\n\r\n      if (totalPositiveWeightMultiplier > 0) {\r\n        spawnWeight = spawnWeight * totalPositiveWeightMultiplier;\r\n      }\r\n    }\r\n    \r\n    validMods.push({modId: modId, weight: spawnWeight});\r\n  }\r\n  return validMods;\r\n}\r\n\r\nfunction CreateWeightedModPool(modsAndWeights) {\r\n  let modPool = {\r\n    totalWeight : 0,\r\n    mods : []\r\n  }\r\n\r\n  for (const modAndWeight of modsAndWeights) {\r\n    let modWeight = modAndWeight.weight;\r\n    modPool.mods.push({\r\n      id : modAndWeight.modId,\r\n      weight : modWeight\r\n    });\r\n    modPool.totalWeight += modWeight;\r\n  }\r\n\r\n  return modPool;\r\n}\r\n\r\nfunction PickModFromWeightedModPool(modPool, context) {\r\n  const randRoll = randRange(context.rng, 0, modPool.totalWeight - 1);\r\n  let weightAccum = 0;\r\n\r\n  for (const mod of modPool.mods) {\r\n    const modEndWeight = weightAccum + mod.weight;\r\n    if (randRoll < modEndWeight) {\r\n      return mod.id;\r\n    }\r\n    weightAccum = modEndWeight;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction GetInfluenceTag(baseItemId, influence) {\r\n  const baseItem = base_items[baseItemId];\r\n  const baseItemClass = baseItem[\"item_class\"];\r\n  if (baseItemClass in item_classes) {\r\n    const influenceTagId = influence + \"_tag\";\r\n    if (influenceTagId in item_classes[baseItemClass]) {\r\n      const influenceTag = item_classes[baseItemClass][influenceTagId];\r\n      if (influenceTag) {\r\n        return influenceTag;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction GetAddedTags(modId, context) {\r\n  return context.mods[modId][\"adds_tags\"];\r\n}\r\n\r\nfunction GetBaseItemTags (itemState, context) {\r\n  const baseItem = base_items[itemState.baseItemId];\r\n  let tags = [];\r\n  tags = tags.concat(baseItem[\"tags\"]);\r\n  for (const influence of itemState.influences) {\r\n    const influenceTag = GetInfluenceTag(itemState.baseItemId, influence);\r\n    if (influenceTag) {\r\n      tags.push(influenceTag);\r\n    }\r\n  }\r\n  for (const implicit of itemState.baseImplicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id, context));\r\n  }\r\n  for (const implicit of itemState.gildedImplicits) {\r\n    tags = tags.concat(GetAddedTags(implicit.id, context));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction GetItemTags(itemState, context) {\r\n  let tags = GetBaseItemTags(itemState, context);\r\n  for (const affix of itemState.affixes) {\r\n    tags = tags.concat(GetAddedTags(affix.id, context));\r\n  }\r\n  return tags;\r\n}\r\n\r\nfunction RollModValues(modId, rollsLucky, context) {\r\n  let statRolls = [];\r\n  const mod = context.mods[modId];\r\n  for (const stat of mod[\"stats\"]) {\r\n    if (rollsLucky) {\r\n      const rollOne = randRange(context.rng, stat[\"min\"], stat[\"max\"]);\r\n      const rollTwo = randRange(context.rng, stat[\"min\"], stat[\"max\"]);\r\n      statRolls.push(Math.max(rollOne, rollTwo));\r\n    }\r\n    else {\r\n      statRolls.push(randRange(context.rng, stat[\"min\"], stat[\"max\"]));\r\n    }\r\n  }\r\n  return statRolls;\r\n}\r\n\r\nfunction GetTierForMod(itemState, modId, context) {\r\n  const mod = context.mods[modId];\r\n  if (mod[\"is_essence_only\"]) {\r\n    return [0, 1, 1]\r\n  }\r\n\r\n  if (mod[\"generation_type\"] === \"unique\") {\r\n    return [0, 1, 1]\r\n  }\r\n\r\n  let modTier = 0;\r\n  let modCount = 1;\r\n  let modCountAtItemLevel = 1;\r\n  const modLevel = mod[\"required_level\"];\r\n  const baseItemTags = GetBaseItemTags(itemState, context);\r\n  const otherModIds = context.modLookupTables.getGroupedTable(mod[\"domain\"], mod[\"group\"], mod[\"type\"], context.modLookupTables.getStatLineIndices(modId));\r\n  for (const otherModId of otherModIds) {\r\n    if (otherModId === modId) {\r\n      continue;\r\n    }\r\n\r\n    const otherMod = context.mods[otherModId];\r\n    if (otherMod[\"is_essence_only\"]) {\r\n      continue;\r\n    }\r\n\r\n    if (GetSpawnWeightForMod(otherModId, baseItemTags, context) <= 0) {\r\n      continue;\r\n    }\r\n\r\n    modCount++;\r\n\r\n    if (otherMod[\"required_level\"] <= itemState.level) {\r\n      modCountAtItemLevel++;\r\n    }\r\n\r\n    if (otherMod[\"required_level\"] > modLevel) {\r\n      modTier++;\r\n    }\r\n  }\r\n\r\n  return [modTier, modCount, modCountAtItemLevel];\r\n}\r\n\r\nfunction CreateRolledMod(itemState, modId, rollsLucky, context) {\r\n  const tierValues = GetTierForMod(itemState, modId, context);\r\n  return {\r\n    id : modId,\r\n    values : RollModValues(modId, rollsLucky, context),\r\n    tier : tierValues[0],\r\n    tierCount : tierValues[1],\r\n    tierCountAtItemLevel : tierValues[2]\r\n  }  \r\n}\r\n\r\nfunction RollRareName(itemState, rng) {\r\n  const itemData = base_items[itemState.baseItemId];\r\n  return RareItemNames.GenerateRareName(itemData, rng);\r\n}\r\n\r\nfunction RollRareAffixCount(baseItemId, rng) {\r\n  const maxAffixCount = GetAffixLimitForRarity(baseItemId, \"rare\");\r\n  if (maxAffixCount === 6) {\r\n    // Number of mods from data mined note (source: https://www.reddit.com/r/pathofexile/comments/amm2tg/tool_poecraftingshenanigans_a_crafting_simulator/)\r\n    let modCount = 4;\r\n    if (randRange(rng, 0, 2) === 0) {\r\n      // Roughly 33% chance to get 5 or 6\r\n      modCount++;\r\n      if (randRange(rng, 0, 2) === 0) {\r\n        // Roughly 33% * 33% chance to get 6\r\n        modCount++;\r\n      }\r\n    }\r\n    return modCount;\r\n  }\r\n  else if (maxAffixCount === 4) {\r\n    // Number of mods from data mined note (source: reddit, https://www.reddit.com/r/pathofexile/comments/8fxnlu/chance_of_getting_specific_number_of_mods_via/)\r\n    // \"for jewels: 65/35\"\r\n    let modCount = 3;\r\n    if (randRange(rng, 0, 2) === 0) {\r\n      // Roughly 33% chance to get 4\r\n      modCount++;\r\n    }\r\n    return modCount;\r\n  }\r\n  else if (maxAffixCount > 0) {\r\n    // Unexpected situation, roll pure random!\r\n    return randRange(rng, 1, maxAffixCount);\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction cloneMods(modArray) {\r\n  let newArray = Array(modArray.length);\r\n  for (const oldModIdx in modArray) {\r\n    newArray[oldModIdx] = { ...modArray[oldModIdx], values : [ ...modArray[oldModIdx].values ]};\r\n  }\r\n  return newArray;\r\n}\r\n\r\nfunction cloneItemState(itemState) {\r\n  return { \r\n    ...itemState, \r\n    influences : itemState.influences.slice(),\r\n    enchantments : cloneMods(itemState.enchantments),\r\n    baseImplicits : cloneMods(itemState.baseImplicits), \r\n    gildedImplicits : cloneMods(itemState.gildedImplicits),\r\n    corruptions : cloneMods(itemState.corruptions), \r\n    affixes : cloneMods(itemState.affixes) \r\n  };\r\n}\r\n\r\nfunction CreateItem(baseItemId, level, context) {\r\n  let itemState = {\r\n    generatedName : \"\",\r\n    baseItemId : baseItemId,\r\n    level : level,\r\n    rarity : \"normal\",\r\n    corrupted : false,\r\n    quality : 0,\r\n    influences : [],\r\n    enchantments : [],\r\n    baseImplicits : [],\r\n    gildedImplicits : [],\r\n    corruptions : [],\r\n    affixes : []\r\n  }  \r\n\r\n  // Add and roll implicits\r\n  const baseItem = base_items[baseItemId];\r\n  for (const implicitId of baseItem[\"implicits\"]) {\r\n    itemState.baseImplicits.push(CreateRolledMod(itemState, implicitId, false, context));\r\n  }\r\n\r\n  return itemState;\r\n}\r\n\r\nfunction PickRandomModFromListAndWeights(modsAndWeights, context) {\r\n  const weightedModPool = CreateWeightedModPool(modsAndWeights, context);\r\n  return PickModFromWeightedModPool(weightedModPool, context);\r\n}\r\n\r\nfunction AddRandomModFromListAndWeights(itemState, modsAndWeights, rollsLucky, context) {\r\n  const modId = PickRandomModFromListAndWeights(modsAndWeights, context);\r\n  if (!modId) {\r\n    return [false, itemState];\r\n  }\r\n  let newItemState = cloneItemState(itemState);\r\n  newItemState.affixes.push(CreateRolledMod(itemState, modId, rollsLucky, context));\r\n  return [true, newItemState];  \r\n}\r\n\r\nfunction AddRandomMod(itemState, rollsLucky, context, extendedParameters = {}) {\r\n  let newItemState = cloneItemState(itemState);\r\n  const modsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, extendedParameters);\r\n  return AddRandomModFromListAndWeights(itemState, modsAndWeights, rollsLucky, context);\r\n}\r\n\r\nconst generationTypeOrder = {\r\n  \"unique\": 0,\r\n  \"prefix\": 1,\r\n  \"suffix\": 2,\r\n};\r\n\r\nfunction ModIdComparer (a, b, context) {\r\n  const modA = context.mods[a];\r\n  const modB = context.mods[b];\r\n\r\n  const modAGenerationType = modA[\"generation_type\"];\r\n  const modBGenerationType = modB[\"generation_type\"];\r\n  if (modAGenerationType !== modBGenerationType) {\r\n    if (modAGenerationType in generationTypeOrder && modBGenerationType in generationTypeOrder) {\r\n      return generationTypeOrder[modAGenerationType] - generationTypeOrder[modBGenerationType];\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const aStatIndices = context.modLookupTables.getStatLineIndices(a);\r\n  const bStatIndices = context.modLookupTables.getStatLineIndices(b);\r\n  const aNumStats = aStatIndices.length;\r\n  const bNumStats = bStatIndices.length;\r\n  let statIdx = 0;\r\n  while (statIdx < aNumStats && statIdx < bNumStats) {\r\n    if (aStatIndices[statIdx] !== bStatIndices[statIdx]) {\r\n      return aStatIndices[statIdx] - bStatIndices[statIdx];\r\n    }\r\n    ++statIdx;\r\n  }\r\n  if (aNumStats !== bNumStats) {\r\n    return aNumStats - bNumStats;\r\n  }\r\n\r\n  const modARequiredLevel = modA[\"required_level\"];\r\n  const modBRequiredLevel = modB[\"required_level\"];\r\n  if (modARequiredLevel !== modBRequiredLevel) {\r\n    return -(modARequiredLevel - modBRequiredLevel);\r\n  }\r\n\r\n  return 0;  \r\n}\r\n\r\nfunction ModComparer (a, b, context) {\r\n  return ModIdComparer(a.id, b.id, context);\r\n}\r\n\r\nfunction SortMods(modList, context) {\r\n  let sortedList = cloneMods(modList);\r\n  sortedList.sort((a, b) => { return ModComparer(a, b, context) });\r\n  return sortedList;\r\n}\r\n\r\nfunction CanAddInfluenceToItem(itemState, influence) {\r\n  return GetInfluenceTag(itemState.baseItemId, influence) != null;\r\n}\r\n\r\nfunction AddInfluenceToItem(itemState, influence) {\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newState = cloneItemState(itemState);\r\n  newState.influences.push(influence);\r\n  return [true, newState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanScourItem(itemState, context) {\r\n  if (itemState.rarity === \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ScourItem(itemState, context) {\r\n  if (!CanScourItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, { ...cloneItemState(itemState), generatedName : \"\", rarity : \"normal\", affixes : [] }];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanTransmutationItem(itemState, context) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"magic\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction TransmutationItem(itemState, context) {\r\n  if (!CanTransmutationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"magic\" };\r\n  const numMods = randRange(context.rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, false, context)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanAlterationItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlterationItem(itemState, context) {\r\n  if (!CanAlterationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [] };\r\n  const numMods = randRange(context.rng, 1, 2);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, false, context)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanAugmentationItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AugmentationItem(itemState, context) {\r\n  if (!CanAugmentationItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, false, context);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanRegalItem(itemState, context) {\r\n  if (itemState.rarity !== \"magic\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction RegalItem(itemState, context) {\r\n  if (!CanRegalItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let rareItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, context.rng) };\r\n  const [result, newItemState] = AddRandomMod(rareItemState, false, context);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanAlchemyItem(itemState, context) {\r\n  if (itemState.rarity !== \"normal\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (!CanBaseItemHaveRarity(itemState.baseItemId, \"rare\")) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AlchemyItem(itemState, context) {\r\n  if (!CanAlchemyItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, context.rng) };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, context.rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, false, context)[1];\r\n  }\r\n  newItemState.generatedName = RollRareName(itemState, context.rng);\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanChaosItem(itemState, context) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ChaosItem(itemState, context) {\r\n  if (!CanChaosItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = { ...cloneItemState(itemState), affixes : [], generatedName : RollRareName(itemState, context.rng)  };\r\n  const numMods = RollRareAffixCount(itemState.baseItemId, context.rng);\r\n  for (let i = 0; i < numMods; ++i) {\r\n    newItemState = AddRandomMod(newItemState, false, context)[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedItem(itemState, context) {\r\n  if (itemState.rarity !== \"rare\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) >= GetAffixLimit(itemState)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\nfunction ExaltedItem(itemState, context) {\r\n  if (!CanExaltedItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const [result, newItemState] = AddRandomMod(itemState, false, context);\r\n  if (!result) {\r\n    return [false, itemState];\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CanExaltedWithInfluenceItem(itemState, context, influence) {\r\n  if (itemState.influences.length > 0) {\r\n    return false;\r\n  }\r\n  if (!CanExaltedItem(itemState, context)) {\r\n    return false;\r\n  }\r\n  if (!CanAddInfluenceToItem(itemState, influence)) {\r\n    return false;\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsAndWeightsForItem(newItemState, context, { requiredPositiveWeightTag : influenceTag });\r\n  if (validMods.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ExaltedWithInfluenceItem(itemState, context, influence) {\r\n  if (!CanExaltedWithInfluenceItem(itemState, context, influence)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let [ , newItemState] = AddInfluenceToItem(itemState, influence);\r\n  const influenceTag = GetInfluenceTag(newItemState.baseItemId, influence);\r\n  const validMods = GetValidModsAndWeightsForItem(newItemState, context, { requiredPositiveWeightTag : influenceTag });\r\n  return AddRandomModFromListAndWeights(newItemState, validMods, false, context);\r\n}\r\n\r\nfunction CanAnnulmentItem(itemState, context) {\r\n  if (itemState.rarity === \"normal\" || itemState.rarity === \"unique\") {\r\n    return false;\r\n  }\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (GetAffixCount(itemState, context) === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction AnnulmentItem(itemState, context) {\r\n  if (!CanAnnulmentItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  const numAffixes = GetAffixCount(newItemState, context);\r\n  const affixIdxToRemove = randRange(context.rng, 0, numAffixes - 1);\r\n  newItemState.affixes.splice(affixIdxToRemove, 1);\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanBlessedItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.baseImplicits.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction BlessedItem(itemState, context) {\r\n  if (!CanBlessedItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let implicit of newItemState.baseImplicits) {\r\n    implicit.values = RollModValues(implicit.id, false, context);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanDivineItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n  if (itemState.affixes.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction DivineItem(itemState, context) {\r\n  if (!CanDivineItem(itemState, context)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  let newItemState = cloneItemState(itemState);\r\n  for (let affix of newItemState.affixes) {\r\n    affix.values = RollModValues(affix.id, false, context);\r\n  }\r\n  return [true, newItemState];\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction CanFossilItem(itemState, context) {\r\n  if (itemState.corrupted) {\r\n    return false;\r\n  }\r\n\r\n  if (base_items[itemState.baseItemId][\"domain\"] === \"flask\") {\r\n    return false;\r\n  }\r\n\r\n  const fossilTypes = Array.prototype.slice.call(arguments, 2);\r\n  if (fossilTypes.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  for (const fossilId of fossilTypes) {\r\n    const fossil = fossils[fossilId];\r\n\r\n    if (fossil[\"allowed_tags\"].length > 0) {\r\n      const baseItem = base_items[itemState.baseItemId];\r\n      let hasAllowedTag = false;\r\n      for (const allowedTag of fossil[\"allowed_tags\"]) {\r\n        if (baseItem[\"tags\"].includes(allowedTag)) {\r\n          hasAllowedTag = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!hasAllowedTag) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (fossil[\"forbidden_tags\"].length > 0) {\r\n      const baseItem = base_items[itemState.baseItemId];\r\n      for (const forbiddenTag of fossil[\"allowed_tags\"]) {\r\n        if (baseItem[\"tags\"].includes(forbiddenTag)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction GetWeightParametersForFossils(fossilTypes) {\r\n  let addedMods = [];\r\n  let forcedModLists = [];\r\n  let gildedFossilMods = [];\r\n  let negativeTagMultipliers = {};\r\n  let positiveTagMultipliers = {};\r\n  let corruptedEssenceChances = [];\r\n  let rollsLucky = false;\r\n  let addsEnchant = false;\r\n\r\n  for (const fossilId of fossilTypes) {\r\n    const fossil = fossils[fossilId];\r\n    addedMods = [ ...addedMods, ...fossil[\"added_mods\"] ];\r\n    for (const negativeWeightMod of fossil[\"negative_mod_weights\"]) {\r\n      const tag = negativeWeightMod[\"tag\"];\r\n      const weightMultiplier = negativeWeightMod[\"weight\"] / 100.0;\r\n      if (tag in negativeTagMultipliers) {\r\n        negativeTagMultipliers[tag] = negativeTagMultipliers[tag] * weightMultiplier;\r\n      }\r\n      else {\r\n        negativeTagMultipliers[tag] = weightMultiplier;\r\n      }\r\n    }\r\n    for (const positiveWeightMod of fossil[\"positive_mod_weights\"]) {\r\n      const tag = positiveWeightMod[\"tag\"];\r\n      const weightMultiplier = positiveWeightMod[\"weight\"] / 100.0;\r\n      if (tag in positiveTagMultipliers) {\r\n        positiveTagMultipliers[tag] = positiveTagMultipliers[tag] + weightMultiplier;\r\n      }\r\n      else {\r\n        positiveTagMultipliers[tag] = weightMultiplier;\r\n      }\r\n    }\r\n    if (fossil[\"forced_mods\"].length > 0) {\r\n      forcedModLists = [ ...forcedModLists, { modIds : [...fossil[\"forced_mods\"]], fossilId: fossilId }];\r\n    }\r\n    if (fossil[\"sell_price_mods\"].length > 0) {\r\n      gildedFossilMods = [ ...gildedFossilMods, ...fossil[\"sell_price_mods\"]];\r\n    }\r\n    if (fossil[\"corrupted_essence_chance\"] > 0) {\r\n      corruptedEssenceChances.push(fossil[\"corrupted_essence_chance\"]);\r\n    }\r\n    if (fossil[\"enchants\"]) {\r\n      addsEnchant = true;\r\n    }\r\n    rollsLucky = rollsLucky || fossil[\"rolls_lucky\"];\r\n  }\r\n\r\n  return {\r\n    negativeWeightMultipliers : negativeTagMultipliers,\r\n    positiveWeightMultipliers : positiveTagMultipliers,\r\n    addedMods : addedMods,\r\n    forcedModLists : forcedModLists,\r\n    gildedFossilMods : gildedFossilMods,\r\n    rollsLucky : rollsLucky,\r\n    corruptedEssenceChances : corruptedEssenceChances,\r\n    addsEnchant : addsEnchant,\r\n  }\r\n}\r\n\r\nfunction FossilItem(itemState, context) {\r\n  if (!CanFossilItem(...arguments)) {\r\n    return [false, itemState];\r\n  }\r\n\r\n  const fossilTypes = Array.prototype.slice.call(arguments, 2);\r\n  const weightParameters = GetWeightParametersForFossils(fossilTypes);\r\n\r\n  let numMods = RollRareAffixCount(itemState.baseItemId, context.rng);\r\n  let newItemState = { ...cloneItemState(itemState), rarity : \"rare\", generatedName : RollRareName(itemState, context.rng), affixes : [] };  \r\n\r\n  if (weightParameters.gildedFossilMods.length > 0) {\r\n    const gildedImplicitModsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, { forcedModIds : weightParameters.gildedFossilMods, ignoreAffixTypes : true });\r\n    const gildedModId = PickRandomModFromListAndWeights(gildedImplicitModsAndWeights, context);\r\n    if (gildedModId) {\r\n      const gildedMod = CreateRolledMod(newItemState, gildedModId, false, context);\r\n      newItemState.gildedImplicits = [gildedMod];\r\n    }\r\n  }\r\n\r\n  if (weightParameters.addsEnchant) {\r\n    const enchantmentModsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, { forceAffixTypes : [\"enchantment\"], ignoreExistingGroups : true });\r\n    const enchantmentModId = PickRandomModFromListAndWeights(enchantmentModsAndWeights, context);\r\n    if (enchantmentModId) {\r\n      const enchantmentMod = CreateRolledMod(newItemState, enchantmentModId, false, context);\r\n      newItemState.enchantments = [enchantmentMod];\r\n    }\r\n  }\r\n\r\n  for (const corruptedEssenceChance of weightParameters.corruptedEssenceChances) {\r\n    const randRoll = randRange(context.rng, 0, 99);\r\n    if (randRoll < corruptedEssenceChance) {\r\n      let essenceModIds = [];\r\n      const itemClass = base_items[itemState.baseItemId][\"item_class\"];\r\n      for (const essenceId in essences) {\r\n        const essence = essences[essenceId];\r\n        if (essence[\"type\"][\"is_corruption_only\"]) {\r\n          if (itemClass in essence[\"mods\"]) {\r\n            essenceModIds.push(essence[\"mods\"][itemClass]);\r\n          }\r\n        }\r\n      }\r\n      // NOTE: Many of the mods applied by corrupted essences don't have weights\r\n      // Therefore I'm assuming it just picks randomly from the available ones\r\n      const essenceModsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, { ignoreAffixLimits : true, ignoreSpawnWeight : true, forcedModIds : essenceModIds });\r\n      if (essenceModsAndWeights.length > 0) {\r\n        const essenceModIdx = randRange(context.rng, 0, essenceModsAndWeights.length - 1);\r\n        const essenceModId = essenceModsAndWeights[essenceModIdx].modId;\r\n        newItemState.affixes.push(CreateRolledMod(itemState, essenceModId, false, context));\r\n        numMods--;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const forcedModList of weightParameters.forcedModLists) {\r\n    const forcedModsAndWeights = GetValidModsAndWeightsForItem(newItemState, context, { ...weightParameters, forcedModIds : forcedModList.modIds });\r\n    if (forcedModsAndWeights.length > 0) {\r\n      const result = AddRandomModFromListAndWeights(newItemState, forcedModsAndWeights, weightParameters.rollsLucky, context);\r\n      if (result[0] === false) {\r\n        continue;\r\n      }\r\n      newItemState = result[1];\r\n      numMods--;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < numMods; ++i) {\r\n    const validMods = GetValidModsAndWeightsForItem(newItemState, context, weightParameters);\r\n    if (validMods.length === 0) {\r\n      break;\r\n    }\r\n    const result = AddRandomModFromListAndWeights(newItemState, validMods, weightParameters.rollsLucky, context);\r\n    if (result[0] === false) {\r\n      break;\r\n    }\r\n    newItemState = result[1];\r\n  }\r\n\r\n  return [true, newItemState];\r\n}\r\n\r\nfunction CraftingButton(props) {\r\n  return <button className=\"button\" onClick={props.onClick} disabled={!props.enabled}>{props.label}</button>;\r\n}\r\n\r\nclass TheoryCrafterContext {\r\n  constructor(modDatabase, rng) {\r\n    this.mods = modDatabase;\r\n    this.modLookupTables = ModGroups.ParseModGroups(modDatabase, stats, mod_types);\r\n    this.rng = rng;\r\n  }\r\n}\r\n\r\nclass TheoryCrafter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.testMap = {\r\n      \"scour\" : CanScourItem,\r\n      \"transmute\" : CanTransmutationItem,\r\n      \"alt\" : CanAlterationItem,\r\n      \"aug\" : CanAugmentationItem,\r\n      \"regal\" : CanRegalItem,\r\n      \"alch\" : CanAlchemyItem,\r\n      \"chaos\" : CanChaosItem,\r\n      \"exalt\" : CanExaltedItem,\r\n      \"exalt_inf\" : CanExaltedWithInfluenceItem,\r\n      \"annul\" : CanAnnulmentItem,\r\n      \"bless\" : CanBlessedItem,\r\n      \"divine\" : CanDivineItem,\r\n      \"fossil\" : CanFossilItem,\r\n    }\r\n\r\n    this.actionMap = {\r\n      \"scour\" : ScourItem,\r\n      \"transmute\" : TransmutationItem,\r\n      \"alt\" : AlterationItem,\r\n      \"aug\" : AugmentationItem,\r\n      \"regal\" : RegalItem,\r\n      \"alch\" : AlchemyItem,\r\n      \"chaos\" : ChaosItem,\r\n      \"exalt\" : ExaltedItem,\r\n      \"exalt_inf\" : ExaltedWithInfluenceItem,\r\n      \"annul\" : AnnulmentItem,\r\n      \"bless\" : BlessedItem,\r\n      \"divine\" : DivineItem,\r\n      \"fossil\" : FossilItem,\r\n    }\r\n\r\n    this.theoryCrafterContext = new TheoryCrafterContext(_mods, seedrandom());\r\n\r\n    const normalItemState = CreateItem(\"Metadata/Items/Armours/Boots/BootsAtlas1\", 100, this.theoryCrafterContext);\r\n    this.state = this.initState(normalItemState);\r\n  }\r\n\r\n  initState(initItemState) {\r\n    return {\r\n      itemStateHistory : [ { itemState: initItemState, action : \"\" } ],\r\n      itemStateHistoryIdx : 0,\r\n      lastCommand : \"\",\r\n      selectedBaseId : initItemState.baseItemId,\r\n      selectedBaseLevel : initItemState.level,\r\n      sortMods : false,\r\n      selectedFossils : [],\r\n      collapsedGroups : new Set()\r\n    };\r\n  }\r\n\r\n  pushState(newState, actionName) {\r\n    return { ...this.state, itemStateHistory : [ ...this.state.itemStateHistory, { itemState: newState, action : actionName } ] };\r\n  }\r\n\r\n  getState() {\r\n    return this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState;\r\n  }\r\n\r\n  canUndoState() {\r\n    return this.state.itemStateHistoryIdx > 0;\r\n  }\r\n\r\n  getUndoLabel() {\r\n    if (!this.canUndoState()) {\r\n      return \"Undo\";\r\n    }\r\n    return \"Undo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  undoState() {\r\n    if (this.state.itemStateHistoryIdx > 0)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx - 1 });\r\n    }\r\n  }\r\n\r\n  canRerollAction() {\r\n    return (this.state.itemStateHistory[this.state.itemStateHistoryIdx].action !== \"\") \r\n      && (this.state.itemStateHistoryIdx > 0);\r\n  }\r\n\r\n  getRerollLabel() {\r\n    if (!this.canRerollAction()) {\r\n      return \"Reroll Action\";\r\n    }\r\n    return \"Reroll \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n  }\r\n\r\n  rerollAction() {\r\n    if (!this.canRerollAction()) {\r\n      return;\r\n    }\r\n    const action = this.state.itemStateHistory[this.state.itemStateHistoryIdx].action;\r\n    const previousItemState = this.state.itemStateHistory[this.state.itemStateHistoryIdx - 1].itemState;\r\n    const canPerformAction = this.canPerformAction(action, previousItemState);\r\n    if (!canPerformAction) {\r\n      return;\r\n    }\r\n    this.performAction(action, previousItemState, this.state.itemStateHistoryIdx);\r\n  }\r\n\r\n  canRedoState() {\r\n    return this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1;\r\n  }\r\n\r\n  getRedoLabel() {\r\n    if (!this.canRedoState()) {\r\n      return \"Redo\";\r\n    }\r\n    return \"Redo \" + this.state.itemStateHistory[this.state.itemStateHistoryIdx + 1].action;\r\n  }\r\n\r\n  redoState() {\r\n    if (this.state.itemStateHistoryIdx < this.state.itemStateHistory.length - 1)\r\n    {\r\n      this.setState({ ...this.state, itemStateHistoryIdx :  this.state.itemStateHistoryIdx + 1 });\r\n    }\r\n  }\r\n\r\n  insertAndCutStateAt(newState, actionName, index) {\r\n    const newStateHistory = this.state.itemStateHistory.slice(0, index);\r\n    newStateHistory.push( { itemState: newState, action : actionName } );\r\n    return { ...this.state, itemStateHistory : newStateHistory, itemStateHistoryIdx : index };    \r\n  }\r\n\r\n  insertAndCutState(newState, actionName) {\r\n    return this.insertAndCutStateAt(newState, actionName, this.state.itemStateHistoryIdx + 1);\r\n  }\r\n\r\n  canPerformAction(actionName, itemState) {\r\n    return this.splitAndTestAction(actionName, itemState);\r\n  }\r\n\r\n  splitAndTestAction(actionName, itemState) {\r\n    const splitAction = actionName.split(\" \");\r\n    return this.testMap[splitAction[0]](itemState, this.theoryCrafterContext, ...(splitAction.slice(1)));\r\n  }\r\n\r\n  performAction(actionName, itemState, splitLocationOverride = null) {\r\n    return this.splitAndExecuteAction(actionName, itemState, splitLocationOverride);\r\n  }\r\n\r\n  splitAndExecuteAction(actionName, itemState, splitLocationOverride = null) {\r\n    const splitAction = actionName.split(\" \");\r\n    const result = this.actionMap[splitAction[0]](itemState, this.theoryCrafterContext, ...(splitAction.slice(1)));\r\n    if (result[0]) {\r\n      if (splitLocationOverride) {\r\n        this.setState(this.insertAndCutStateAt(result[1], actionName, splitLocationOverride));\r\n      }\r\n      else {\r\n        this.setState(this.insertAndCutState(result[1], actionName));\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSelectedBaseChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseId : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectList() {\r\n    const baseItems = {}\r\n    for (const baseItemId in base_items) {\r\n      if (base_items[baseItemId][\"release_state\"] === \"released\") {\r\n        const domain = base_items[baseItemId][\"domain\"];\r\n        if (domain === \"item\" || domain === \"flask\" || domain === \"abyss_jewel\" || domain === \"misc\") {\r\n          baseItems[baseItemId] = baseItemId.slice(baseItemId.lastIndexOf('/') + 1);\r\n        }\r\n      }\r\n    }\r\n    return <select value={this.state.selectedBaseId} onChange={(x) => this.handleSelectedBaseChanged(x)} key=\"baseItemSelector\">\r\n      { Object.keys(baseItems).map( (k) => <option value={k} key={k}>{baseItems[k]}</option> ) }\r\n    </select>;\r\n  }\r\n\r\n  handleSelectedBaseLevelChanged(e) {\r\n    this.setState({ ...this.state, selectedBaseLevel : e.target.value });\r\n  }\r\n\r\n  RenderBaseSelectLevel() {\r\n    return <input value={this.state.selectedBaseLevel} onChange={(x) => this.handleSelectedBaseLevelChanged(x)} key=\"baseItemLevelInput\"/>;\r\n  }\r\n\r\n  handleBaseSelectButtonClicked() {\r\n    const normalItemState = CreateItem(this.state.selectedBaseId, this.state.selectedBaseLevel, this.theoryCrafterContext);\r\n    this.setState({ ...this.initState(normalItemState), sortMods: this.state.sortMods });\r\n  }\r\n\r\n  RenderBaseSelectButton() {\r\n    return <button onClick={() => this.handleBaseSelectButtonClicked()} key=\"baseItemCreateButton\">Create New Item</button>;\r\n  }\r\n\r\n  RenderCraftingButton(actionName, label) {\r\n    return <CraftingButton onClick={ () => this.performAction(actionName, this.getState()) } enabled={ this.canPerformAction(actionName, this.getState()) } label={label} key={actionName} />\r\n  }\r\n\r\n  RenderFossilSelector(fossilId, label) {\r\n    const checked = this.state.selectedFossils.includes(fossilId);\r\n    const enabled = this.state.selectedFossils.length < 4 || checked;\r\n    return <CraftingButton onClick={ () => this.handleFossilSelectorClicked(fossilId) } enabled={enabled} key={fossilId} label={(checked ? \"☒\" : \"☐\") + \" \" + label + \" Fossil\"} />\r\n  }\r\n\r\n  handleFossilSelectorClicked(fossilId) {\r\n    const idx = this.state.selectedFossils.findIndex((x) => { return x === fossilId });\r\n    if (idx >= 0) {\r\n      const newState = { ...this.state };\r\n      newState.selectedFossils.splice(idx, 1);\r\n      this.setState(newState);\r\n    }\r\n    else {\r\n      this.setState({ ...this.state, selectedFossils : [...this.state.selectedFossils, fossilId] });\r\n    }\r\n  }\r\n\r\n  handleSortModsToggled(e) {\r\n    this.setState( {...this.state, sortMods : e.target.checked} );\r\n  }\r\n\r\n  rollTest() {\r\n    let itemState = cloneItemState(this.getState());\r\n    for (let i = 0; i < 100; ++i) {\r\n      itemState = ScourItem(itemState, this.theoryCrafterContext)[1];\r\n      itemState = TransmutationItem(itemState, this.theoryCrafterContext)[1];\r\n    }\r\n    this.setState(this.insertAndCutState(itemState, \"scour\"));\r\n  }\r\n\r\n  onGroupClicked(groupKey) {\r\n    const isCollapsed = this.state.collapsedGroups.has(groupKey);\r\n    let newSet = new Set(this.state.collapsedGroups);\r\n    if (isCollapsed) {\r\n      newSet.delete(groupKey);\r\n    }\r\n    else {\r\n      newSet.add(groupKey);\r\n    }\r\n    this.setState({ ...this.state, collapsedGroups : newSet });\r\n  }\r\n\r\n  render() {\r\n    return [\r\n        <div key=\"baseSelection\">\r\n          { [\r\n            this.RenderBaseSelectList(),\r\n            this.RenderBaseSelectLevel(),\r\n            this.RenderBaseSelectButton(),\r\n          ] }\r\n        </div>,\r\n        <div key=\"craftingButtons\">\r\n          { [\r\n            this.RenderCraftingButton(\"scour\", \"Scour\"),\r\n            this.RenderCraftingButton(\"transmute\", \"Transmutation\"),\r\n            this.RenderCraftingButton(\"aug\", \"Augmentation\"),\r\n            this.RenderCraftingButton(\"alt\", \"Alteration\"),\r\n            this.RenderCraftingButton(\"regal\", \"Regal\"),\r\n            this.RenderCraftingButton(\"alch\", \"Alchemy\"),\r\n            this.RenderCraftingButton(\"chaos\", \"Chaos\"),\r\n            this.RenderCraftingButton(\"exalt\", \"Exalted\"),\r\n            this.RenderCraftingButton(\"exalt_inf crusader\", \"Crusader Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_inf hunter\", \"Hunter Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_inf redeemer\", \"Redeemer Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_inf warlord\", \"Warlord Exalt\"),\r\n            this.RenderCraftingButton(\"exalt_inf shaper\", \"{Shaper Exalt}\"),\r\n            this.RenderCraftingButton(\"exalt_inf elder\", \"{Elder Exalt}\"),\r\n            this.RenderCraftingButton(\"annul\", \"Annulment\"),\r\n            this.RenderCraftingButton(\"bless\", \"Blessed\"),\r\n            this.RenderCraftingButton(\"divine\", \"Divine\")\r\n          ] }\r\n        </div>,\r\n        <div key=\"fossilSelectors\">\r\n          { [\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingAbyss\", \"Hollow\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingAttackMods\", \"Serrated\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingBleedPoison\", \"Corroded\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingCasterMods\", \"Aetheric\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingChaos\", \"Aberrant\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingCold\", \"Frigid\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingCorruptEssence\", \"Glyphic\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingDefences\", \"Dense\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingElemental\", \"Prismatic\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingEnchant\", \"Enchanted\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingFire\", \"Scorched\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingGemLevel\", \"Faceted\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingLife\", \"Pristine\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingLightning\", \"Metallic\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingLuckyModRolls\", \"Sanctified\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingMana\", \"Lucent\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingMinionsAuras\", \"Bound\"),\r\n//            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingMirror\", \"Fractured\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingPhysical\", \"Jagged\"),\r\n//            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingQuality\", \"Perfect\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingRandom\", \"Tangled\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingSellPrice\", \"Gilded\"),\r\n//            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingSockets\", \"Encrusted\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingSpeed\", \"Shuddering\"),\r\n            this.RenderFossilSelector(\"Metadata/Items/Currency/CurrencyDelveCraftingVaal\", \"Bloodstained\"),\r\n          ] }\r\n        </div>,\r\n        <div key=\"fossilButton\">\r\n          { [\r\n            this.RenderCraftingButton([\"fossil\", ...this.state.selectedFossils].join(\" \"), \"Fossil\")\r\n          ] }\r\n        </div>,\r\n        <div key=\"undoDiv\"><CraftingButton onClick={ () => this.undoState() } enabled={ this.canUndoState() } label={ this.getUndoLabel() } key=\"undo\" /></div>,\r\n        <div key=\"redoDiv\"><CraftingButton onClick={ () => this.redoState() } enabled={ this.canRedoState() } label={ this.getRedoLabel() } key=\"redo\" /></div>,\r\n        <div key=\"rerollDiv\"><CraftingButton onClick={ () => this.rerollAction() } enabled={ this.canRerollAction() } label={ this.getRerollLabel() } key=\"undo\" /></div>,\r\n//        <div key=\"rollTest\"><CraftingButton onClick={ () => this.rollTest() } enabled={ true } label=\"Roll 100000\" /></div>,\r\n        <div key=\"sortMods\"><input type=\"checkbox\" onChange={(e) => this.handleSortModsToggled(e)} checked={this.state.sortMods} /><span style={{color: 'white'}}>Sort Mods</span></div>,\r\n        <div className=\"itemAndModListContainer\" key=\"itemAndModListContainer\">\r\n          {[\r\n            <div className=\"craftedItemContainer\" key=\"craftedItemContainer\">\r\n              <CraftedItem itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } context={this.theoryCrafterContext} sortMods={this.state.sortMods} key=\"craftedItem\" />\r\n            </div>,\r\n            <div className=\"modListContainer\" key=\"modListContainer\">\r\n              <ModList collapsedGroups={this.state.collapsedGroups} onGroupClicked={(groupKey) => this.onGroupClicked(groupKey)} fossilTypes={this.state.selectedFossils} itemState={ this.state.itemStateHistory[this.state.itemStateHistoryIdx].itemState } context={this.theoryCrafterContext} key=\"modList\" />\r\n            </div>\r\n          ]}\r\n        </div>\r\n    ]\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <TheoryCrafter />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}